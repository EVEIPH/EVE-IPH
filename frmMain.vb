' Main form for all processing

Imports System.Net
Imports System.Data.SQLite
Imports System.Globalization
Imports System.Threading
Imports System.Threading.Tasks
Imports System.IO

Public Class frmMain
    Inherits System.Windows.Forms.Form

    ' Update Prices Variables
    Private m_ControlsCollection As ControlsCollection
    Private RegionCheckBoxes() As CheckBox
    Private SystemCheckBoxes() As CheckBox
    Private TechCheckBoxes() As CheckBox

    ' Datacores
    Private DCSkillCheckBoxes() As CheckBox
    Private DCSkillLabels() As Label
    Private DCSkillCombos() As ComboBox
    Private DCCorpCheckBoxes() As CheckBox
    Private DCCorpLabels() As Label
    Private DCCorpTextboxes() As TextBox

    ' Mining ore processing skills
    Private MineProcessingCheckBoxes() As CheckBox
    Private MineProcessingLabels() As Label
    Private MineProcessingCombos() As ComboBox

    ' Manufacturing
    Private CalcRelicCheckboxes() As CheckBox
    Private CalcDecryptorCheckBoxes() As CheckBox
    Private TypeIDToFind As Long ' For searching a price list

    ' Manufacturing Column stuff
    Private ColumnPositions(NumManufacturingTabColumns) As String ' For saving the column order
    Private AddingColumns As Boolean
    Private MovedColumn As Integer

    ' For sorting grids
    Private rawBPMatsColumnSorter As ListViewColumnSorter
    Private compBPMatsColumnSorter As ListViewColumnSorter
    Private DCColumnSorter As ListViewColumnSorter
    Private ReactionsColumnSorter As ListViewColumnSorter
    Private MiningColumnSorter As ListViewColumnSorter

    Private DCIPH_COLUMN As Integer ' The number of the DC IPH column for totalling up the price

    Private TechChecked As Boolean
    Private RunUpdatePriceList As Boolean = True ' If we want to run the price list update
    Private RefreshList As Boolean = True
    Private UpdateAllTechChecks As Boolean = True ' Whether to update all Tech checks in prices or not
    Private FirstShowMining As Boolean = True ' If we have clicked on the Mining tab yet to load initial data
    Private FirstShowDatacores As Boolean = True ' If we have clicked on the Datacores tab yet or not (only load initial data on first click)

    ' Blueprints Variables
    Private cmbBPsLoaded As Boolean
    Private SetTaxFeeChecks As Boolean

    ' BP List for Previous/Next
    Private BPHistory As New List(Of Blueprint)
    Private CurrentBPHistoryIndex As Integer
    Private ResetBPTab As Boolean ' If we recalled the InitBP to enable all the stuff on the screen

    ' BP Combo processing
    Private ComboMenuDown As Boolean
    Private MouseWheelSelection As Boolean
    Private ComboBoxArrowKeys As Boolean

    ' Relics
    Private LoadingRelics As Boolean
    Private RelicsLoaded As Boolean

    ' Decryptors
    Private SelectedDecryptor As New Decryptor

    ' Invention
    Private UpdatingInventionChecks As Boolean

    Private LoadingInventionDecryptors As Boolean
    Private LoadingT3Decryptors As Boolean

    Private InventionDecryptorsLoaded As Boolean
    Private T3DecryptorsLoaded As Boolean

    ' If we doubleclick an item from Manufacturing Tab
    Private SentFromManufacturingTab As Boolean

    ' Same with shopping list
    Public SentFromShoppingList As Boolean

    Private BlueprintBuildFacility As IndustryFacility ' for knowing what facility we used to add to shopping list data

    ' BP stats
    Private OwnedBP As Boolean

    ' For T2 BPOs mainly so we can load the stored ME/TE if it changes
    Private OwnedBPME As String
    Private OwnedBPPE As String

    ' For checks that are enabled
    Private PriceCheckT1Enabled As Boolean
    Private PriceCheckT2Enabled As Boolean
    Private PriceCheckT3Enabled As Boolean
    Private PriceCheckT4Enabled As Boolean
    Private PriceCheckT5Enabled As Boolean
    Private PriceCheckT6Enabled As Boolean

    ' For updating several checks at once
    Private IgnoreSystemCheckUpdates As Boolean
    Private IgnoreRegionCheckUpdates As Boolean

    Private PriceToggleButtonHit As Boolean

    ' Total isk per hour selected on datacore grid
    Private TotalSelectedIPH As Double

    ' Loading the solar system combo on the price page
    Private FirstSolarSystemComboLoad As Boolean
    Private FirstPriceShipTypesComboLoad As Boolean
    Private FirstPriceChargeTypesComboLoad As Boolean

    ' For loading the Manufacturing Grid
    Private FirstLoadCalcBPTypes As Boolean
    Private FirstManufacturingGridLoad As Boolean
    Private CancelManufacturingCalculate As Boolean

    Private UserInventedBPs As New List(Of Long)  ' This is a list of all the BPs that the user will invent from owned T1s (Manufacturing Grid)

    ' For ignoring updates to the ship booster combo in mining
    Private UpdatingMiningShips As Boolean

    ' The Reaction list for Reactions tab
    Private GlobalReactionList As New List(Of Reaction)

    ' If we refresh the manufacturing data or recalcuate
    Private RefreshCalcData As Boolean

    ' Reload of Regions on Datacore class
    Private DCRegionsLoaded As Boolean

    ' Final list of items for manufacturing (keep form level so we can refresh it if needed)
    Private FinalManufacturingItemList As List(Of ManufacturingItem)
    Private ManufacturingRecordIDToFind As Long ' for Predicate
    Private ManufacturingNameToFind As String ' for Predicate

    ' For maximum production and laboratory lines
    Private MaximumProductionLines As Integer
    Private MaximumLaboratoryLines As Integer

    Private SelectedBPText As String = ""

    ' Team combos
    Private BPTeamComboLoaded As Boolean
    Private CalcManufacturingTeamComboLoaded As Boolean
    Private CalcComponentManufacturingTeamComboLoaded As Boolean
    Private CalcInventionTeamComboLoaded As Boolean
    Private CalcCopyTeamComboLoaded As Boolean
    Private LoadTeambyCombo As Boolean
    Private PreviousTeamActivity As String

    ' Facility combos
    Private PreviousIndustryType As IndustryType
    Private PreviousFacilityType As String
    Private PreviousFacilityRegion As String
    Private PreviousFacilitySystem As String
    Private PreviousFacilityEquipment As String
    Private PreviousActivity As String
    Private CurrentIndustryType As IndustryType
    Private CurrentBPGroupID As Integer
    Private CurrentBPCategoryID As Integer

    Private PreviousCalcBaseIndustryType As IndustryType
    Private PreviousCalcBaseFacilityType As String
    Private PreviousCalcBaseFacilityRegion As String
    Private PreviousCalcBaseFacilitySystem As String
    Private PreviousCalcBaseFacilityEquipment As String

    Private PreviousCalcComponentIndustryType As IndustryType
    Private PreviousCalcComponentFacilityType As String
    Private PreviousCalcComponentFacilityRegion As String
    Private PreviousCalcComponentFacilitySystem As String
    Private PreviousCalcComponentFacilityEquipment As String

    Private PreviousCalcSuperIndustryType As IndustryType
    Private PreviousCalcSuperFacilityType As String
    Private PreviousCalcSuperFacilityRegion As String
    Private PreviousCalcSuperFacilitySystem As String
    Private PreviousCalcSuperFacilityEquipment As String

    Private PreviousCalcCapitalIndustryType As IndustryType
    Private PreviousCalcCapitalFacilityType As String
    Private PreviousCalcCapitalFacilityRegion As String
    Private PreviousCalcCapitalFacilitySystem As String
    Private PreviousCalcCapitalFacilityEquipment As String

    Private PreviousCalcT3IndustryType As IndustryType
    Private PreviousCalcT3FacilityType As String
    Private PreviousCalcT3FacilityRegion As String
    Private PreviousCalcT3FacilitySystem As String
    Private PreviousCalcT3FacilityEquipment As String

    Private PreviousCalcSubsystemIndustryType As IndustryType
    Private PreviousCalcSubsystemFacilityType As String
    Private PreviousCalcSubsystemFacilityRegion As String
    Private PreviousCalcSubsystemFacilitySystem As String
    Private PreviousCalcSubsystemFacilityEquipment As String

    Private PreviousCalcBoosterIndustryType As IndustryType
    Private PreviousCalcBoosterFacilityType As String
    Private PreviousCalcBoosterFacilityRegion As String
    Private PreviousCalcBoosterFacilitySystem As String
    Private PreviousCalcBoosterFacilityEquipment As String

    Private PreviousCalcInventionIndustryType As IndustryType
    Private PreviousCalcInventionFacilityType As String
    Private PreviousCalcInventionFacilityRegion As String
    Private PreviousCalcInventionFacilitySystem As String
    Private PreviousCalcInventionFacilityEquipment As String

    Private PreviousCalcT3InventionIndustryType As IndustryType
    Private PreviousCalcT3InventionFacilityType As String
    Private PreviousCalcT3InventionFacilityRegion As String
    Private PreviousCalcT3InventionFacilitySystem As String
    Private PreviousCalcT3InventionFacilityEquipment As String

    Private PreviousCalcCopyIndustryType As IndustryType
    Private PreviousCalcCopyFacilityType As String
    Private PreviousCalcCopyFacilityRegion As String
    Private PreviousCalcCopyFacilitySystem As String
    Private PreviousCalcCopyFacilityEquipment As String

    Private PreviousCalcREIndustryType As IndustryType
    Private PreviousCalcNoPOSFacilityType As String
    Private PreviousCalcNoPOSFacilityRegion As String
    Private PreviousCalcNoPOSFacilitySystem As String
    Private PreviousCalcNoPOSFacilityEquipment As String

    Private BPFacilityRegionsLoaded As Boolean
    Private BPFacilitySystemsLoaded As Boolean
    Private BPFacilitiesLoaded As Boolean

    Private CalcBaseFacilityRegionsLoaded As Boolean
    Private CalcBaseFacilitySystemsLoaded As Boolean
    Private CalcBaseFacilitiesLoaded As Boolean
    Private CalcComponentFacilityRegionsLoaded As Boolean
    Private CalcComponentFacilitySystemsLoaded As Boolean
    Private CalcComponentFacilitiesLoaded As Boolean
    Private CalcInventionFacilityRegionsLoaded As Boolean
    Private CalcInventionFacilitySystemsLoaded As Boolean
    Private CalcInventionFacilitiesLoaded As Boolean
    Private CalcT3InventionFacilityRegionsLoaded As Boolean
    Private CalcT3InventionFacilitySystemsLoaded As Boolean
    Private CalcT3InventionFacilitiesLoaded As Boolean
    Private CalcCopyFacilityRegionsLoaded As Boolean
    Private CalcCopyFacilitySystemsLoaded As Boolean
    Private CalcCopyFacilitiesLoaded As Boolean
    Private CalcNoPOSFacilityRegionsLoaded As Boolean
    Private CalcNoPOSFacilitySystemsLoaded As Boolean
    Private CalcNoPOSFacilitiesLoaded As Boolean
    Private CalcCapitalFacilityRegionsLoaded As Boolean
    Private CalcCapitalFacilitySystemsLoaded As Boolean
    Private CalcCapitalFacilitiesLoaded As Boolean
    Private CalcSuperFacilityRegionsLoaded As Boolean
    Private CalcSuperFacilitySystemsLoaded As Boolean
    Private CalcSuperFacilitiesLoaded As Boolean
    Private CalcT3FacilityRegionsLoaded As Boolean
    Private CalcT3FacilitySystemsLoaded As Boolean
    Private CalcT3FacilitiesLoaded As Boolean
    Private CalcSubsystemFacilityRegionsLoaded As Boolean
    Private CalcSubsystemFacilitySystemsLoaded As Boolean
    Private CalcSubsystemFacilitiesLoaded As Boolean
    Private CalcBoosterFacilityRegionsLoaded As Boolean
    Private CalcBoosterFacilitySystemsLoaded As Boolean
    Private CalcBoosterFacilitiesLoaded As Boolean

    Private LoadingFacilityActivities As Boolean
    Private LoadingFacilityTypes As Boolean
    Private LoadingFacilityRegions As Boolean
    Private LoadingFacilitySystems As Boolean
    Private LoadingFacilities As Boolean
    Private ChangingUsageChecks As Boolean

    ' For making sure they have a bp facility loaded
    Private FullyLoadedBPFacility As Boolean

    ' For manufacturing tab
    Private CalcBaseFacilityLoaded As Boolean ' To check that a full facility is loaded or we can't build anything
    Private TempCalcComponentFacilityLoaded As Boolean ' Need to set this for both
    Private CalcComponentFacilityLoaded As Boolean
    Private CalcCapitalComponentFacilityLoaded As Boolean
    Private CalcSuperFacilityLoaded As Boolean
    Private CalcCapitalFacilityLoaded As Boolean
    Private TempCalcT3FacilityLoaded As Boolean ' Need to set this for both
    Private CalcT3FacilityLoaded As Boolean
    Private CalcT3DestroyerFacilityLoaded As Boolean
    Private CalcSubsystemFacilityLoaded As Boolean
    Private CalcBoosterFacilityLoaded As Boolean
    Private CalcInventionFacilityLoaded As Boolean
    Private CalcT3InventionFacilityLoaded As Boolean
    Private CalcCopyFacilityLoaded As Boolean
    Private CalcNoPOSFacilityLoaded As Boolean

    Private DefaultSettings As New ProgramSettings ' For default constants

    Private RecordIDIterator As Integer ' For setting a unique record id in the manufacturing tab

    Private SelectedBPTabIndex As Integer ' So we don't move around the different facility/invention/re tabs on the user

    ' Inline grid row update variables
    Private Structure SavedLoc
        Dim X As Integer
        Dim Y As Integer
    End Structure

    Private SavedListClickLoc As SavedLoc
    Private RefreshingGrid As Boolean

    Private CurrentRow As ListViewItem
    Private PreviousRow As ListViewItem
    Private NextRow As ListViewItem

    Private NextCellRow As ListViewItem
    Private PreviousCellRow As ListViewItem

    Private CurrentCell As ListViewItem.ListViewSubItem
    Private PreviousCell As ListViewItem.ListViewSubItem
    Private NextCell As ListViewItem.ListViewSubItem

    Private MEUpdate As Boolean
    Private PriceUpdate As Boolean
    Private DataEntered As Boolean
    Private EnterKeyPressed As Boolean
    Private SelectedGrid As ListView

    Private IgnoreFocus As Boolean

    ' Column width consts - may change depending on Ore, Ice or Gas so change the widths of the columns based on these and use them to add and move
    Private Const MineOreNameColumnWidth As Integer = 120
    Private Const MineRefineYieldColumnWidth As Integer = 70
    Private Const MineCrystalColumnWidth As Integer = 45

#Region "Initialization Code"

    ' Set default window theme so tabs in invention window display correctly on all systems
    Public Declare Unicode Function SetWindowTheme Lib "uxtheme.dll" (ByVal hWnd As IntPtr, _
        ByVal pszSubAppName As String, ByVal pszSubIdList As String) As Integer

    Public Sub New()

        MyBase.New()

        Dim ErrorData As ErrObject = Nothing
        Dim UserAppDataPath As String = ""
        Dim CREST As New EVECREST

        FirstLoad = True
        ErrorTracker = ""

        ' Set developer flag
        If File.Exists("Developer") Then
            Developer = True
        Else
            Developer = False
        End If

        ' Set test platform
        If File.Exists("Test.txt") Then
            TestingVersion = True
            MsgBox("The test version of IPH is no longer being updated." & vbCrLf & vbCrLf & "Please delete the 'Test.txt' file in your installation directory to get new updates")
        Else
            TestingVersion = False
        End If

        Call SetProgress("Initializing...")

        Application.DoEvents()

        ' This call is required by the designer.
        InitializeComponent()

        ' Always use US for now and don't take into account user overrided stuff like the system clock format
        LocalCulture = New CultureInfo("en-US", False)
        ' Sets the CurrentCulture 
        Thread.CurrentThread.CurrentCulture = LocalCulture

        ' Add any initialization after the InitializeComponent() call.

        ' Get user path for application data
        UserAppDataPath = "" 'Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
        ' Set where files will be updated
        UpdaterFilePath = UpdatePath ' UserAppDataPath & "\" & AppDataPath & UpdatePath
        ' Set where the db, main exe, and updater and such will be
        UserWorkingFolder = "" 'UserAppDataPath & "\" & AppDataPath
        ' The Image path
        UserImagePath = BPImageFilePath 'UserAppDataPath & "\" & BPImageFilePath

        ' Get the user settings then check for updates
        UserApplicationSettings = AllSettings.LoadApplicationSettings

        ' Check for program updates first
        If UserApplicationSettings.CheckforUpdatesonStart Then
            ' Check for program updates
            Application.UseWaitCursor = True
            Me.Activate()
            Call CheckForUpdates(False, Me.Icon)
            Application.UseWaitCursor = False
            Application.DoEvents()
        End If

        ' Initialize stuff
        Call SetProgress("Initializing Database...")
        Call InitDB()

        ' Set these here for later use
        Call SetNoPOSGroupIDs()

        Dim Timecheck As DateTime

        ' Update CREST Data - Teams
        'If UserApplicationSettings.LoadCRESTTeamDataonStartup Then
        '    Application.UseWaitCursor = True
        '    Application.DoEvents()
        '    Timecheck = Now
        '    Call SetProgress("Updating Industry Teams...")
        '    Call CREST.UpdateIndustryTeams()
        '    Debug.Print("Teams " & CStr(DateDiff(DateInterval.Second, Timecheck, Now)))
        '    Timecheck = Now
        '    Call SetProgress("Updating Industry Team Auctions...")
        '    Call CREST.UpdateIndustryTeamAuctions()
        '    Debug.Print("Team Auctions " & CStr(DateDiff(DateInterval.Second, Timecheck, Now)))
        '    Timecheck = Now
        '    Call SetProgress("Updating Industry Specialties...")
        '    Call CREST.UpdateIndustrySpecialties()
        '    Debug.Print("Specs " & CStr(DateDiff(DateInterval.Second, Timecheck, Now)))
        '    Application.UseWaitCursor = False
        '    Application.DoEvents()
        'End If

        ' CREST Facilities
        If UserApplicationSettings.LoadCRESTFacilityDataonStartup Then
            ' Always do cost indicies first
            Application.UseWaitCursor = True
            Timecheck = Now
            Call SetProgress("Updating Industry Systems Cost Indicies...")
            Call CREST.UpdateIndustrySystemsCostIndex()
            Debug.Print("System Indicies " & CStr(DateDiff(DateInterval.Second, Timecheck, Now)))
            Timecheck = Now
            Call SetProgress("Updating Industry Facilities...")
            Call CREST.UpdateIndustryFacilties(Nothing, Nothing, True)
            Debug.Print("Facilities " & CStr(DateDiff(DateInterval.Second, Timecheck, Now)))
            Timecheck = Now
            Application.UseWaitCursor = False
            Application.DoEvents()
        End If

        DBCommand = Nothing

        ' CREST Market Data
        If UserApplicationSettings.LoadCRESTMarketDataonStartup Then
            Application.UseWaitCursor = True
            Application.DoEvents()
            Timecheck = Now
            Call SetProgress("Updating Avg/Adj Market Prices...")
            Call CREST.UpdateMarketPrices()
            Debug.Print("Market Prices " & CStr(DateDiff(DateInterval.Second, Timecheck, Now)))
            Application.UseWaitCursor = False
            Application.DoEvents()
        End If

        If TestingVersion Then
            Me.Text = Me.Text & " - Testing"
        End If

        If Developer Then
            Me.Text = Me.Text & " - Developer"
            mnuRefinery.Visible = True
            chkUpdatePricesCRESTHistory.Visible = True
            CalcBPStripMenuItem.Visible = True
            mnuInventionSuccessMonitor.Visible = True
        Else
            ' Hide all the development stuff
            mnuRefinery.Visible = False
            CalcBPStripMenuItem.Visible = False
            tabMain.TabPages.Remove(tabPI)
            chkUpdatePricesCRESTHistory.Visible = False
        End If

        ' For changes to mining upgrade combo
        MiningUpgradesCollection.Add(None)
        MiningUpgradesCollection.Add("5% (T1)")
        MiningUpgradesCollection.Add("8% (M1)")
        MiningUpgradesCollection.Add("9% (T2)")
        MiningUpgradesCollection.Add("9% (M6)")
        MiningUpgradesCollection.Add("10% (M6)")

        ' Don't include invention teams until CCP implements it
        tabCalcTeams.TabPages.Remove(tabCalcTeamInvention)

        ' Load the user settings
        Call SetProgress("Loading User Settings...")
        UserBPTabSettings = AllSettings.LoadBPSettings
        UserUpdatePricesTabSettings = AllSettings.LoadUpdatePricesSettings
        UserManufacturingTabSettings = AllSettings.LoadManufacturingSettings
        UserDCTabSettings = AllSettings.LoadDatacoreSettings
        UserReactionTabSettings = AllSettings.LoadReactionSettings
        UserMiningTabSettings = AllSettings.LoadMiningSettings
        UserIndustryJobsColumnSettings = AllSettings.LoadIndustryJobsColumnSettings
        UserManufacturingTabColumnSettings = AllSettings.LoadManufacturingTabColumnSettings
        UserShoppingListSettings = AllSettings.LoadShoppingListSettings

        UserIndustryFlipBeltSettings = AllSettings.LoadIndustryFlipBeltColumnSettings
        UserIndustryFlipBeltOreCheckSettings1 = AllSettings.LoadIndustryBeltOreChecksSettings(BeltType.Small)
        UserIndustryFlipBeltOreCheckSettings2 = AllSettings.LoadIndustryBeltOreChecksSettings(BeltType.Medium)
        UserIndustryFlipBeltOreCheckSettings3 = AllSettings.LoadIndustryBeltOreChecksSettings(BeltType.Large)
        UserIndustryFlipBeltOreCheckSettings4 = AllSettings.LoadIndustryBeltOreChecksSettings(BeltType.Enormous)
        UserIndustryFlipBeltOreCheckSettings5 = AllSettings.LoadIndustryBeltOreChecksSettings(BeltType.Colossal)

        UserAssetWindowDefaultSettings = AllSettings.LoadAssetWindowSettings(AssetWindow.ProgramDefault)
        UserAssetWindowShoppingListSettings = AllSettings.LoadAssetWindowSettings(AssetWindow.ShoppingList)

        SelectedTower = AllSettings.LoadPOSSettings

        ' Teams (save the default teams for loading defaults later)
        Call SetAllTeams(True)

        BPTeamComboLoaded = False
        CalcManufacturingTeamComboLoaded = False
        CalcComponentManufacturingTeamComboLoaded = False
        CalcInventionTeamComboLoaded = False
        CalcCopyTeamComboLoaded = False
        LoadTeambyCombo = True

        ' Load up the BP facilities
        Call SetAllFacilities(True)

        ' Init combo loading
        LoadingFacilityActivities = False
        LoadingFacilityRegions = False
        LoadingFacilityRegions = False
        LoadingFacilityTypes = False
        LoadingFacilities = False

        ' Load the character
        Call SetProgress("Loading Character Data from API...")
        Call LoadCharacter(UserApplicationSettings.LoadAssetsonStartup, UserApplicationSettings.LoadBPsonStartup)

        ' Only allow selecting a default if there are accounts to set it to
        If NonDummyAccountsLoaded() Then
            mnuSelectDefaultChar.Enabled = True
        Else
            mnuSelectDefaultChar.Enabled = False
        End If

        ' Default character set, now set the panel
        pnlCharacter.Text = "Character Loaded: " & SelectedCharacter.Name

        ' Type of skills loaded
        Call UpdateSkillPanel()

        If Not IsNothing(SelectedCharacter.Skills) Then ' 3387 mass production, 24625 adv mass production, 3406 laboratory efficiency, 24524 adv laboratory operation
            MaximumProductionLines = SelectedCharacter.Skills.GetSkillLevel(3387) + SelectedCharacter.Skills.GetSkillLevel(24625) + 1
            MaximumLaboratoryLines = SelectedCharacter.Skills.GetSkillLevel(3406) + SelectedCharacter.Skills.GetSkillLevel(24624) + 1
        Else
            MaximumProductionLines = 1
            MaximumLaboratoryLines = 1
        End If

        ' Init Tool tips
        If UserApplicationSettings.ShowToolTips Then
            Me.ttMain = New System.Windows.Forms.ToolTip(Me.components)
            Me.ttMain.IsBalloon = True
        End If

        ' Nothing in shopping List
        pnlShoppingList.Text = "No Items in Shopping List"

        Call SetProgress("Finalizing Forms...")

        '****************************************
        '**** Blueprints Tab Initializations ****
        '****************************************
        ' Width is now 556, scrollbar is 21 
        'lstBPComponentMats.Columns.Add("", -2, HorizontalAlignment.Center) ' For check (25 size)
        lstBPComponentMats.Columns.Add("Material", 230, HorizontalAlignment.Left) 'added 25 temp
        lstBPComponentMats.Columns.Add("Quantity", 80, HorizontalAlignment.Right)
        lstBPComponentMats.Columns.Add("ME", 35, HorizontalAlignment.Center)
        lstBPComponentMats.Columns.Add("Cost Per Item", 85, HorizontalAlignment.Right)
        lstBPComponentMats.Columns.Add("Total Cost", 105, HorizontalAlignment.Right)

        ' No check for raw mats since the check will be used to toggle build/buy for each item
        lstBPRawMats.Columns.Add("Material", 210, HorizontalAlignment.Left)
        lstBPRawMats.Columns.Add("Quantity", 90, HorizontalAlignment.Right)
        lstBPRawMats.Columns.Add("ME", 35, HorizontalAlignment.Center)
        lstBPRawMats.Columns.Add("Cost Per Item", 90, HorizontalAlignment.Right)
        lstBPRawMats.Columns.Add("Total Cost", 110, HorizontalAlignment.Right)

        ' We haven't checked any tech levels yet
        TechChecked = False

        Call InitBPTab()

        Call InitInventionTab()

        ' Base Decryptor
        SelectedDecryptor.MEMod = 0
        SelectedDecryptor.TEMod = 0
        SelectedDecryptor.RunMod = 0
        SelectedDecryptor.ProductionMod = 1
        SelectedDecryptor.Name = None

        ' For the disabling of the price update form
        PriceCheckT1Enabled = True
        PriceCheckT2Enabled = True
        PriceCheckT3Enabled = True
        PriceCheckT4Enabled = True
        PriceCheckT5Enabled = True
        PriceCheckT6Enabled = True

        ' Tool Tips
        If UserApplicationSettings.ShowToolTips Then
            ttMain.SetToolTip(lblBPInventionCost, "Invention Cost for Runs entered = (Datacores + Decryptors) / Invented Runs * Runs" & vbCrLf & "Double-Click for material list needed for enough successful BPCs for runs entered")
            ttMain.SetToolTip(lblBPRECost, "Invention Cost for Runs entered = (Datacores + Decryptors + Relics) / Invented Runs * Runs" & vbCrLf & "Double-Click for material list needed for enough successful BPCs for runs entered")
            ttMain.SetToolTip(lblBPCopyCosts, "Total Cost of materials to make enough BPCs for the number of invention jobs needed" & vbCrLf & "Double-Click for material list needed for enough successful BPCs for runs entered")
            ttMain.SetToolTip(lblBPFacilityUsage, "") ' Set when loaded with data
            ttMain.SetToolTip(lblBPRuns, "Total number of items to produce. I.e. If you have 5 blueprints with 4 runs each, then enter 20")
            ttMain.SetToolTip(lblBPTaxes, "Sales Taxes to set up a sell order at an NPC Station")
            ttMain.SetToolTip(lblBPBrokerFees, "Broker's Fees to set up a sell order at an NPC Station")
            ttMain.SetToolTip(lblBPTotalCompCost, "Total Cost of Component Materials, InventionCosts, Usage, Taxes and Fees - Double Click for list of costs")
            ttMain.SetToolTip(lblBPRawTotalCost, "Total Cost of Raw Materials, InventionCosts, Usage, Taxes and Fees - Double Click for list of costs")
            ttMain.SetToolTip(lblBPPT, "This is the time to build the item (including skill and implant modifiers) from the blueprint after all materials are gathered")
            ttMain.SetToolTip(lblBPCPTPT, "This is the total time to build the item and components and if selected, time to complete invention and copying")
            ttMain.SetToolTip(lblBPCanMakeBP, "Double-Click here to see required skills to make this BP")
            ttMain.SetToolTip(lblBPCanMakeBPAll, "Double-Click here to see required skills to make all the items for this BP")
            ttMain.SetToolTip(lblBPT2InventStatus, "Double-Click here to see required skills to invent this BP")
            ttMain.SetToolTip(chkBPPricePerUnit, "Show Price per Unit - All price data in this frame will be updated to show the prices for 1 unit")
            ttMain.SetToolTip(lblBPProductionTime, "Total time to build this blueprint with listed components")
            ttMain.SetToolTip(lblBPTotalItemPT, "Total time to build selected build components and this blueprint")
            ttMain.SetToolTip(lblBPComponentMats, "Total list of components, which can be built, and materials to build this blueprint")
            ttMain.SetToolTip(lblBPRawMats, "Total list of materials to build all components and base materials for this blueprint")
            ttMain.SetToolTip(chkBPSmall, "'Small' or 'S' in Name or 5m3 (Light) Drones")
            ttMain.SetToolTip(chkBPMedium, "'Medium' or 'M' in Name or 10m3 (Medium) Drones")
            ttMain.SetToolTip(chkBPLarge, "'Large' or 'L' in Name or 25m3 (Heavy) Drones")
            ttMain.SetToolTip(chkBPXL, "'Capital' or 'XL' in Name or 5000m3 (Fighters) Drones")
            ttMain.SetToolTip(lblBPDecryptorStats, "Selected Decryptor Stats and Runs per BPC")
            ttMain.SetToolTip(lblBPT3Stats, "Selected Decryptor Stats and Runs per BPC")
            ttMain.SetToolTip(chkUpdatePricesCRESTHistory, "Updates the price history of each selected item and region for the last year." & vbCrLf & "Note: This may take a long time to complete, especially with more than one region checked.")
        End If

        '*******************************************
        '**** Update Prices Tab Initializations ****
        '*******************************************
        ' Create the controls collection class
        m_ControlsCollection = New ControlsCollection(Me)
        ' Get Region check boxes (note index starts at 1)
        RegionCheckBoxes = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "chkRegion"), CheckBox())
        TechCheckBoxes = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "chkPricesT"), CheckBox())
        SystemCheckBoxes = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "chkSystems"), CheckBox())

        ' Columns of Update Prices Listview (width = 691)
        lstPricesView.Columns.Add("TypeID", 0, HorizontalAlignment.Left) ' Hidden
        lstPricesView.Columns.Add("Group", 270, HorizontalAlignment.Left)
        lstPricesView.Columns.Add("Item", 300, HorizontalAlignment.Left)
        lstPricesView.Columns.Add("Price", 100, HorizontalAlignment.Right)
        lstPricesView.Columns.Add("Manufacture", 0, HorizontalAlignment.Right) ' Hidden
        lstPricesView.Columns.Add("Market ID", 0, HorizontalAlignment.Right) ' Hidden

        FirstSolarSystemComboLoad = True
        FirstPriceChargeTypesComboLoad = True
        FirstPriceShipTypesComboLoad = True
        IgnoreSystemCheckUpdates = False
        IgnoreRegionCheckUpdates = False

        ' Tool Tips
        If UserApplicationSettings.ShowToolTips Then
            ttMain.SetToolTip(btnImportPrices, "Import from EVE Central")
        End If

        Call InitUpdatePricesTab()

        '****************************************
        '**** Manufacturing Tab Initializations ****
        '****************************************
        CalcRelicCheckboxes = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "chkCalcRERelic"), CheckBox())
        CalcDecryptorCheckBoxes = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "chkCalcDecryptor"), CheckBox())

        ' Add the columns based on settings
        Call RefreshManufacturingTabColumns()

        If UserApplicationSettings.ShowToolTips Then
            ' Decryptor Tool tips
            ttMain.SetToolTip(chkCalcDecryptor2, "Augmentation - (PM: 0.6, Runs: +9, ME: -2, TE: +1)")
            ttMain.SetToolTip(chkCalcDecryptor3, "Optimized Augmentation - (PM: 0.9, Runs: +7, ME +2 TE: 0)")
            ttMain.SetToolTip(chkCalcDecryptor4, "Symmetry - (PM: 1.0, Runs: +2, ME: +1, TE: +4)")
            ttMain.SetToolTip(chkCalcDecryptor5, "Process - (PM: 1.1, Runs: 0, ME: +3, TE: +3)")
            ttMain.SetToolTip(chkCalcDecryptor6, "Accelerant - (PM: 1.2, Runs: +1, ME: +2, TE: +5)")
            ttMain.SetToolTip(chkCalcDecryptor7, "Parity - (PM: 1.5, Runs: +3, ME: +1, TE: -1)")
            ttMain.SetToolTip(chkCalcDecryptor8, "Attainment - (PM: 1.8, Runs: +4, ME: -1, TE: +2)")
            ttMain.SetToolTip(chkCalcDecryptor9, "Optimized Attainment - (PM: 1.9, Runs: +2, ME: +1, TE: -1)")

            ttMain.SetToolTip(rbtnCalcShowProfitPercent, "Shows the percentage of profit you make for this item.")

            ttMain.SetToolTip(lblCalcColorCode1, "Beige Background: Owned Blueprint")
            ttMain.SetToolTip(lblCalcColorCode2, "Light Blue Background: T2 item with Owned T1 Blueprint (for invention)")
            ttMain.SetToolTip(lblCalcColorCode5, "Green Text: Unable to T3 Invent Item")
            ttMain.SetToolTip(lblCalcColorCode4, "Orange Text: Unable to Invent Item")
            ttMain.SetToolTip(lblCalcColorCode3, "Red Text: Unable to Build Item")

            ttMain.SetToolTip(txtCalcProdLines, "Will assume Number of BPs is same as Number of Production lines for Calculations")

            ttMain.SetToolTip(chkCalcTaxes, "Sales Taxes to set up a sell order at an NPC Station for the Item")
            ttMain.SetToolTip(chkCalcFees, "Broker's Fees to set up a sell order at an NPC Station for the Item")

            ttMain.SetToolTip(gbCalcAvgPrice, "Volume prices downloaded from EVE Marketeer and averaged over days selected.")
            ttMain.SetToolTip(rbtnCalcSortSVR, "Sales Volume Ratio (SVR) is the ratio of daily volume divided by the number of this item you can make in a day.")
            ttMain.SetToolTip(rbtnCalcSortSVRIPH, "Sales Volume Ratio (SVR) is the ratio of daily volume divided by the number of this item you can make in a day.")
            ttMain.SetToolTip(txtCalcProdLines, "Enter the number of Manufacturing Lines you have to build items per day for calculations. Calculations will assume the same number of BPs used." & vbCrLf & "Calculations for components will also use this value. Double-Click to enter max runs for this character.")
            ttMain.SetToolTip(txtCalcLabLines, "Enter the number of Laboratory Lines you have to invent per day for calculations. Double-Click to enter max runs for this character.")

            ttMain.SetToolTip(txtCalcSVRThreshold, "No results with an SVR lower than the number entered will be returned.")

            ttMain.SetToolTip(lblCalcBaseFacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcComponentFacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcInventionFacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcT3InventionFacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcCopyFacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcSuperFacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcCapitalFacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcT3FacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcSubsystemFacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcBoosterFacilityDefault, "Double-Click to load default facility")
            ttMain.SetToolTip(lblCalcNoPOSFacilityDefault, "Double-Click to load default facility")

        End If
        FirstLoadCalcBPTypes = True
        FirstManufacturingGridLoad = True

        ' If there is an error in price updates, only show once
        ShownPriceUpdateError = False
        SentFromManufacturingTab = False
        SentFromShoppingList = False

        Call InitManufacturingTab()

        '****************************************
        '**** Datacores Tab Initializations *****
        '****************************************
        DCSkillCheckBoxes = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "chkDC"), CheckBox())
        DCSkillLabels = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "lblDatacore"), Label())
        DCSkillCombos = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "cmbDCSkillLevel"), ComboBox())
        DCCorpCheckBoxes = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "chkDCCorp"), CheckBox())
        DCCorpLabels = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "lblDCCorp"), Label())
        DCCorpTextboxes = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "txtDCStanding"), TextBox())

        FirstShowDatacores = True
        DCRegionsLoaded = False
        rbtnDCUpdatedPrices.Checked = True
        TotalSelectedIPH = 0

        txtDCTotalOptIPH.Text = "0.00"
        txtDCTotalSelectedIPH.Text = "0.00"

        ' Width 1124, 21 for scrollbar, 25 for check
        lstDC.Columns.Add("", -2, HorizontalAlignment.Center) ' For check
        lstDC.Columns.Add("Corporation", 120, HorizontalAlignment.Left)
        lstDC.Columns.Add("Agent", 152, HorizontalAlignment.Left)
        lstDC.Columns.Add("LVL", 40, HorizontalAlignment.Center)
        lstDC.Columns.Add("Standing", 60, HorizontalAlignment.Right)
        lstDC.Columns.Add("Location", 250, HorizontalAlignment.Left) ' System name and security (station name?)
        lstDC.Columns.Add("DataCore Skill", 166, HorizontalAlignment.Left)
        lstDC.Columns.Add("DataCore Price", 88, HorizontalAlignment.Right)
        lstDC.Columns.Add("Price From", 65, HorizontalAlignment.Center) ' Load with system name, region, or multiple
        lstDC.Columns.Add("Core/Day", 62, HorizontalAlignment.Right)
        lstDC.Columns.Add("Isk per Hour", 75, HorizontalAlignment.Right)
        DCIPH_COLUMN = 10 ' For totaling up the price

        If UserApplicationSettings.ShowToolTips Then
            ttMain.SetToolTip(rbtnDCSystemPrices, "Max Buy Order from System used for Datacore Price")
            ttMain.SetToolTip(rbtnDCRegionPrices, "Max Buy Order from Region used for Datacore Price")
            ttMain.SetToolTip(lblDCGreenBackColor, "Green Background: Max IPH Agent")
            ttMain.SetToolTip(lblDCBlueText, "Blue Text: Current Research Agents")
            ttMain.SetToolTip(lblDCGrayText, "Gray Text: Unavailable Research Agent")
            ttMain.SetToolTip(lblDCOrangeText, "Orange Text: Research Agent is in Low Sec")
            ttMain.SetToolTip(lblDCRedText, "Red Text: Research Agent is in Null Sec")
        End If

        '****************************************
        '**** Reactions Tab Initializations *****
        '****************************************
        ' 922 width, 21 for scroll
        lstReactions.Columns.Add("Reaction Type", 136, HorizontalAlignment.Left)
        lstReactions.Columns.Add("Reaction", 210, HorizontalAlignment.Left)
        lstReactions.Columns.Add("Output Material", 222, HorizontalAlignment.Left)
        lstReactions.Columns.Add("Output Quantity", 100, HorizontalAlignment.Right)
        lstReactions.Columns.Add("Material Group", 118, HorizontalAlignment.Left)
        lstReactions.Columns.Add("Isk per Hour", 115, HorizontalAlignment.Right)

        Call InitReactionsTab()

        ' Tool Tips
        If UserApplicationSettings.ShowToolTips Then
            ttMain.SetToolTip(chkReactionsTaxes, "Include taxes charged for sale of Reaction Products")
            ttMain.SetToolTip(chkReactionsFees, "Include Broker Fees charged for placing a buy order for Reaction Products")
        End If

        ' Set up grid for input mats
        lstReactionMats.Columns.Add("Material", 117, HorizontalAlignment.Left)
        'lstReactionMats.Columns.Add("Cost", 50, HorizontalAlignment.Right)
        lstReactionMats.Columns.Add("Quantity", 52, HorizontalAlignment.Right)

        '****************************************
        '**** Mining Tab Initializations ********
        '****************************************
        lstMineGrid.Columns.Add("Ore ID", 0, HorizontalAlignment.Right) ' Hidden
        lstMineGrid.Columns.Add("Ore Name", MineOreNameColumnWidth, HorizontalAlignment.Left)
        lstMineGrid.Columns.Add("Refine Type", 70, HorizontalAlignment.Left)
        lstMineGrid.Columns.Add("Unit Price", 100, HorizontalAlignment.Right)
        lstMineGrid.Columns.Add("Refine Yield", MineRefineYieldColumnWidth, HorizontalAlignment.Center)
        lstMineGrid.Columns.Add("Crystal", MineCrystalColumnWidth, HorizontalAlignment.Left)
        lstMineGrid.Columns.Add("m3 per Cycle", 75, HorizontalAlignment.Right)
        lstMineGrid.Columns.Add("Units per Hour", 94, HorizontalAlignment.Right)
        lstMineGrid.Columns.Add("Isk per Hour", 105, HorizontalAlignment.Right)

        MineProcessingCheckBoxes = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "chkOreProcessing"), CheckBox())
        MineProcessingLabels = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "lblOreProcessing"), Label())
        MineProcessingCombos = DirectCast(ControlArrayUtils.getControlArray(Me, Me.MyControls, "cmbOreProcessing"), ComboBox())

        Call InitMiningTab()

        ' Tool Tips
        If UserApplicationSettings.ShowToolTips Then
            ttMain.SetToolTip(rbtnMineT2Crystals, "Use T2 Crystals when skills and equipment allow")
            ttMain.SetToolTip(gbMineHauling, "If no hauling, results will take into account Round Trip time to the station based on M3 of Ship and fill times")
            ttMain.SetToolTip(btnMineSaveAllSettings, "Saves all current options on Mining Screen")
            ttMain.SetToolTip(chkMineForemanLaserOpBoost, "Click to cycle through No Booster, T1 or T2")
            ttMain.SetToolTip(chkMineForemanLaserRangeBoost, "Click to cycle through No Booster, T1 or T2")
            ttMain.SetToolTip(cmbMineIndustReconfig, "Select skill level to include Heavy Water costs per hour, set to 0 to ignore")
            ttMain.SetToolTip(chkMineRorqDeployedMode, "To include Heavy Water costs for deployed mode, select Industrial Reconfiguration skill other than 0")
            ttMain.SetToolTip(lblMineExhumers, "For Prospect Mining Frigate, use the Exhumers Combobox to set the Expedition Frigate skill level.")

        End If

        '****************************************
        '**** All Tabs **************************
        '****************************************

        ' All set, we are done loading
        FirstLoad = False

        Call SetProgress("")

    End Sub

    Protected Overrides Sub Finalize()
        MyBase.Finalize()
        On Error Resume Next
        DB.Close()
        On Error GoTo 0
    End Sub

    Public ReadOnly Property MyControls() As Collection
        Get
            Return m_ControlsCollection.Controls
        End Get
    End Property

    ' Inits the Invention tab so it shows correctly with themes
    Public Sub InitInventionTab()
        Dim sb As String = String.Empty
        Dim v As String = String.Empty

        On Error Resume Next
        SetWindowTheme(Me.tabBPInventionEquip.Handle, " ", " ")
        On Error GoTo 0

    End Sub

    Private Function NonDummyAccountsLoaded() As Boolean
        Dim SQL As String
        Dim numChars As Long

        SQL = "SELECT COUNT(*) FROM API WHERE CHARACTER_NAME <> 'None' AND API_TYPE NOT IN ('Corporation', 'Old Key')"

        DBCommand = New SQLiteCommand(SQL, DB)
        numChars = CLng(DBCommand.ExecuteScalar())

        If numChars = 0 Then
            Return False
        Else
            Return True
        End If

    End Function

#End Region

#Region "Form Functions/Procedures"

#Region "Teams"

    ' Looks up and loads all the team data for the selected team in combo and activity
    Private Sub LoadTeam(TeamName As String, Activity As String, ByRef TeamBonusLabel As TextBox, ByRef TeamDefaultLabel As Label, ByRef SaveButton As Button, Tab As String, GroupIDList As List(Of Long))
        If LoadTeambyCombo Then
            Dim SQL As String = ""
            Dim rsLoader As SQLiteDataReader
            Dim TeamBonusFound As Boolean = False
            Dim FoundTeam As New IndustryTeam
            Dim FoundBonus As New IndustryTeamBonus
            Dim FoundTeamBonuses As New List(Of IndustryTeamBonus)

            If TeamName.Contains(NoTeam.TeamName) Then
                GoTo NoBonus
            End If

            Dim TempTeamText As String = Replace(Mid(TeamName, 1, InStr(TeamName, " -") - 1), " (A) ", "")

            SQL = "SELECT BONUS_ID, BONUS_TYPE, BONUS_VALUE, SPECIALTY_GROUP_NAME, INDUSTRY_TEAMS_BONUSES.SPECIALTY_GROUP_ID "
            SQL = SQL & "FROM INDUSTRY_TEAMS_BONUSES, INDUSTRY_GROUP_SPECIALTIES "
            SQL = SQL & "WHERE TEAM_NAME = '" & TempTeamText & "' "
            SQL = SQL & "AND INDUSTRY_TEAMS_BONUSES.SPECIALTY_GROUP_ID = INDUSTRY_GROUP_SPECIALTIES.SPECIALTY_GROUP_ID "
            SQL = SQL & "GROUP BY BONUS_ID, BONUS_TYPE, BONUS_VALUE, SPECIALTY_GROUP_NAME, INDUSTRY_TEAMS_BONUSES.SPECIALTY_GROUP_ID "

            DBCommand = New SQLiteCommand(SQL, DB)
            rsLoader = DBCommand.ExecuteReader

            While rsLoader.Read()
                ' Get all bonuses and save
                FoundBonus = New IndustryTeamBonus
                With FoundBonus
                    .BonusID = rsLoader.GetInt32(0)
                    .BonusType = rsLoader.GetString(1)
                    .BonusValue = rsLoader.GetDouble(2)
                    .BonusSpecialtyGroupName = rsLoader.GetString(3)
                    .BonusSpecialtyGroupID = rsLoader.GetInt32(4)
                End With

                ' Add to list
                FoundTeamBonuses.Add(FoundBonus)

                TeamBonusFound = True
            End While

            rsLoader.Close()
            rsLoader = Nothing
            DBCommand = Nothing

            If TeamBonusFound Then
                ' We have a team we can use a bonus(s) on, Get and save the team information for the selected activity
                FoundTeam.Bonuses = FoundTeamBonuses

                ' Look up team info
                SQL = "SELECT TEAM_ID, TEAM_NAME, TEAM_ACTIVITY_ID, SOLAR_SYSTEM_ID, SOLAR_SYSTEM_NAME, COST_MODIFIER, CREATION_TIME, EXPIRY_TIME, "
                SQL = SQL & "INDUSTRY_CATEGORY_SPECIALTIES.SPECIALTY_CATEGORY_ID, INDUSTRY_CATEGORY_SPECIALTIES.SPECIALTY_CATEGORY_NAME "
                SQL = SQL & "FROM INDUSTRY_TEAMS, INDUSTRY_CATEGORY_SPECIALTIES "
                SQL = SQL & "WHERE TEAM_NAME = '" & TempTeamText & "' "
                SQL = SQL & "AND INDUSTRY_TEAMS.SPECIALTY_CATEGORY_ID = INDUSTRY_CATEGORY_SPECIALTIES.SPECIALTY_CATEGORY_ID "
                SQL = SQL & "UNION "
                SQL = SQL & "SELECT TEAM_ID, TEAM_NAME, TEAM_ACTIVITY_ID, SOLAR_SYSTEM_ID, SOLAR_SYSTEM_NAME, COST_MODIFIER, CREATION_TIME, EXPIRY_TIME, "
                SQL = SQL & "INDUSTRY_CATEGORY_SPECIALTIES.SPECIALTY_CATEGORY_ID, INDUSTRY_CATEGORY_SPECIALTIES.SPECIALTY_CATEGORY_NAME "
                SQL = SQL & "FROM INDUSTRY_TEAMS_AUCTIONS, INDUSTRY_CATEGORY_SPECIALTIES "
                SQL = SQL & "WHERE TEAM_NAME = '" & TempTeamText & "'"
                SQL = SQL & "AND INDUSTRY_TEAMS_AUCTIONS.SPECIALTY_CATEGORY_ID = INDUSTRY_CATEGORY_SPECIALTIES.SPECIALTY_CATEGORY_ID "

                DBCommand = New SQLiteCommand(SQL, DB)
                rsLoader = DBCommand.ExecuteReader
                rsLoader.Read()

                With FoundTeam
                    .TeamID = rsLoader.GetInt64(0)
                    .TeamName = rsLoader.GetString(1)
                    .ActivityID = rsLoader.GetInt32(2)
                    .SolarSystemID = rsLoader.GetInt64(3)
                    .SolarSystemName = rsLoader.GetString(4)
                    .CostModifier = rsLoader.GetDouble(5) / 100
                    .CreationTime = CDate(rsLoader.GetString(6))
                    .ExpiryTime = CDate(rsLoader.GetString(7))
                    .SpecializationCategoryID = rsLoader.GetInt32(8)
                    .SpecializationCategory = rsLoader.GetString(9)
                End With

                rsLoader.Close()
                rsLoader = Nothing
                DBCommand = Nothing

            Else
NoBonus:
                ' Set to no team
                FoundTeam = NoTeam

            End If

            ' Save the team locally
            If Tab = BPTab Then
                Select Case Activity
                    Case ActivityManufacturing
                        SelectedBPManufacturingTeam = FoundTeam
                        ' Set the default flag
                        If SelectedBPManufacturingTeam.TeamID = DefaultBPManufacturingTeam.TeamID Then
                            SelectedBPManufacturingTeam.IsDefault = True
                        End If
                    Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                        SelectedBPComponentManufacturingTeam = FoundTeam
                        ' Set the default flag
                        If SelectedBPComponentManufacturingTeam.TeamID = DefaultBPComponentManufacturingTeam.TeamID Then
                            SelectedBPComponentManufacturingTeam.IsDefault = True
                        End If
                    Case ActivityCopying
                        SelectedBPCopyTeam = FoundTeam
                        ' Set the default flag
                        If SelectedBPCopyTeam.TeamID = DefaultBPCopyTeam.TeamID Then
                            SelectedBPCopyTeam.IsDefault = True
                        End If
                    Case ActivityInvention
                        SelectedBPInventionTeam = FoundTeam
                        ' Set the default flag
                        If SelectedBPInventionTeam.TeamID = DefaultBPInventionTeam.TeamID Then
                            SelectedBPInventionTeam.IsDefault = True
                        End If
                End Select
            Else
                Select Case Activity
                    Case ActivityManufacturing
                        SelectedCalcManufacturingTeam = FoundTeam
                        ' Set the default flag
                        If SelectedCalcManufacturingTeam.TeamID = DefaultCalcManufacturingTeam.TeamID Then
                            SelectedCalcManufacturingTeam.IsDefault = True
                        End If
                    Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                        SelectedCalcComponentManufacturingTeam = FoundTeam
                        ' Set the default flag
                        If SelectedCalcComponentManufacturingTeam.TeamID = DefaultCalcComponentManufacturingTeam.TeamID Then
                            SelectedCalcComponentManufacturingTeam.IsDefault = True
                        End If
                    Case ActivityCopying
                        SelectedCalcCopyTeam = FoundTeam
                        ' Set the default flag
                        If SelectedCalcCopyTeam.TeamID = DefaultCalcCopyTeam.TeamID Then
                            SelectedCalcCopyTeam.IsDefault = True
                        End If
                    Case ActivityInvention
                        SelectedCalcInventionTeam = FoundTeam
                        ' Set the default flag
                        If SelectedCalcInventionTeam.TeamID = DefaultCalcInventionTeam.TeamID Then
                            SelectedCalcInventionTeam.IsDefault = True
                        End If
                End Select
            End If

            ' Finally update the labels for this team
            Call DisplayTeamBonus(GroupIDList, FoundTeam, TeamBonusLabel, TeamDefaultLabel, SaveButton, Tab)

            ' Reset these so combo works
            MouseWheelSelection = False
            ComboBoxArrowKeys = False
        End If

    End Sub

    ' Loads the default team for the activity on the sent tab into the sent combo
    Private Sub LoadDefaultTeam(SetDefaultText As Boolean, Activity As String, IgnoreDisplay As Boolean, ByRef TeamCombo As ComboBox, ByRef TeamBonusLabel As TextBox, ByRef TeamDefaultLabel As Label, ByRef TeamSaveButton As Button, Tab As String)
        Dim SelectedTeam As New IndustryTeam

        ' Don't trigger a reload of the combos yet
        BPTeamComboLoaded = True

        Select Case Activity
            Case ActivityManufacturing
                If Tab = BPTab Then
                    SelectedTeam = DefaultBPManufacturingTeam
                Else
                    SelectedTeam = DefaultCalcManufacturingTeam
                End If
            Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                If Tab = BPTab Then
                    SelectedTeam = DefaultBPComponentManufacturingTeam
                Else
                    SelectedTeam = DefaultCalcComponentManufacturingTeam
                End If
            Case ActivityInvention
                If Tab = BPTab Then
                    SelectedTeam = DefaultBPInventionTeam
                Else
                    SelectedTeam = DefaultCalcInventionTeam
                End If
            Case ActivityCopying
                If Tab = BPTab Then
                    SelectedTeam = DefaultBPCopyTeam
                Else
                    SelectedTeam = DefaultCalcCopyTeam
                End If
        End Select

        LoadTeambyCombo = False ' Don't run the saving of this team's info since we already have it

        ' First, add 'No Team' to the combo if not already loaded and the selected team is not no-team
        If Not TeamCombo.Items.Contains(NoTeam.TeamName & " - " & FormatPercent(NoTeam.CostModifier / 100, 0)) And SelectedTeam.TeamID <> NoTeam.TeamID Then
            TeamCombo.Items.Add(NoTeam.TeamName & " - " & FormatPercent(NoTeam.CostModifier / 100, 0))
        End If

        ' Add the team if not in the combo and not no team
        If SelectedTeam.TeamID <> NoTeam.TeamID Or Not TeamCombo.Items.Contains(SelectedTeam.TeamName & " - " & FormatPercent(SelectedTeam.CostModifier / 100, 0)) Then
            ' Also, need to add the selected team to the combo since it might not be selected in the query
            TeamCombo.Items.Add(SelectedTeam.TeamName & " - " & FormatPercent(SelectedTeam.CostModifier / 100, 0))
        End If

        LoadTeambyCombo = True

        If SetDefaultText Then
            ' Set the team name to the selected team even before loading
            LoadTeambyCombo = False ' Don't run the saving of this team's info since we already have it
            TeamCombo.Text = SelectedTeam.TeamName & " - " & FormatPercent(SelectedTeam.CostModifier / 100, 0)
            LoadTeambyCombo = True
        End If

        Call DisplayTeamBonus(GetTeamGroupIDList(), SelectedTeam, TeamBonusLabel, TeamDefaultLabel, TeamSaveButton, Tab)

        BPTeamComboLoaded = False

    End Sub

    ' Loads the team combo with teams for the activity selected
    Private Sub LoadTeamCombo(SetDefaultTeamText As Boolean, ByRef TeamCombo As ComboBox, TeamActivity As String, ByRef TeamBonusLabel As TextBox, ByRef TeamDefaultLabel As Label, ByRef TeamSaveButton As Button, Tab As String, Optional BPItemGroupIDList As List(Of Long) = Nothing)
        Dim SQL As String = ""
        Dim rsLoader As SQLiteDataReader
        Dim Activity As Integer
        Dim GroupIDList As String = ""

        TeamCombo.Enabled = True
        TeamCombo.Items.Clear()

        ' Load the default team even if it's not part of the list so they can see it doesn't apply or does
        Call LoadDefaultTeam(SetDefaultTeamText, TeamActivity, True, TeamCombo, TeamBonusLabel, TeamDefaultLabel, TeamSaveButton, Tab)

        Select Case TeamActivity
            Case ActivityManufacturing, ActivityComponentManufacturing, ActivityCapComponentManufacturing
                Activity = 1
            Case ActivityInvention
                Activity = 8
            Case ActivityCopying
                Activity = 5
        End Select

        If TeamActivity = ActivityComponentManufacturing Or TeamActivity = ActivityCapComponentManufacturing Then
            ' Reset the groupID list to just categories with components
            DBCommand = New SQLiteCommand("SELECT groupID FROM INVENTORY_GROUPS WHERE categoryID = " & ComponentCategoryID, DB)
            rsLoader = DBCommand.ExecuteReader
            BPItemGroupIDList = New List(Of Long)

            While rsLoader.Read
                BPItemGroupIDList.Add(rsLoader.GetInt64(0))
            End While

            rsLoader.Close()
        End If

        If Not IsNothing(BPItemGroupIDList) Then
            GroupIDList = "("
            For i = 0 To BPItemGroupIDList.Count - 1
                GroupIDList = GroupIDList & CStr(BPItemGroupIDList(i)) & ","
            Next
            GroupIDList = Mid(GroupIDList, 1, Len(GroupIDList) - 1) & ")"
        End If

        ' Only load teams that can work with this BP
        SQL = "SELECT INDUSTRY_TEAMS.TEAM_NAME, COST_MODIFIER "
        SQL = SQL & "FROM INDUSTRY_TEAMS, INDUSTRY_GROUP_SPECIALTIES, INDUSTRY_TEAMS_BONUSES "
        SQL = SQL & "WHERE INDUSTRY_TEAMS.TEAM_ID = INDUSTRY_TEAMS_BONUSES.TEAM_ID "
        SQL = SQL & "AND INDUSTRY_TEAMS_BONUSES.SPECIALTY_GROUP_ID = INDUSTRY_GROUP_SPECIALTIES.SPECIALTY_GROUP_ID "
        If GroupIDList <> "" Then
            SQL = SQL & "AND INDUSTRY_GROUP_SPECIALTIES.GROUP_ID IN " & GroupIDList & " "
        End If
        SQL = SQL & "AND TEAM_ACTIVITY_ID = " & CStr(Activity) & " "
        If Tab = BPTab And cmbBPFacilitySystem.Text <> "" Then
            ' Link the query of teams to only that system
            SQL = SQL & "AND INDUSTRY_TEAMS.SOLAR_SYSTEM_NAME = '" & cmbBPFacilitySystem.Text & "' "
        End If
        SQL = SQL & "UNION "
        SQL = SQL & "SELECT INDUSTRY_TEAMS_AUCTIONS.TEAM_NAME || ' (A) ', COST_MODIFIER "
        SQL = SQL & "FROM INDUSTRY_TEAMS_AUCTIONS, INDUSTRY_GROUP_SPECIALTIES, INDUSTRY_TEAMS_BONUSES "
        SQL = SQL & "WHERE INDUSTRY_TEAMS_AUCTIONS.TEAM_ID = INDUSTRY_TEAMS_BONUSES.TEAM_ID "
        SQL = SQL & "AND INDUSTRY_TEAMS_BONUSES.SPECIALTY_GROUP_ID = INDUSTRY_GROUP_SPECIALTIES.SPECIALTY_GROUP_ID "
        If GroupIDList <> "" Then
            SQL = SQL & "AND INDUSTRY_GROUP_SPECIALTIES.GROUP_ID IN " & GroupIDList & " "
        End If
        SQL = SQL & "AND TEAM_ACTIVITY_ID = " & CStr(Activity) & " "
        If Tab = BPTab And cmbBPFacilitySystem.Text <> "" Then
            ' Link the query of teams to only that system
            SQL = SQL & "AND INDUSTRY_TEAMS_AUCTIONS.SOLAR_SYSTEM_NAME = '" & cmbBPFacilitySystem.Text & "' "
        End If

        DBCommand = New SQLiteCommand(SQL, DB)
        rsLoader = DBCommand.ExecuteReader

        While rsLoader.Read()
            Application.DoEvents()
            ' Add the cost modifier for now and don't add if already there from default
            If Not TeamCombo.Items.Contains(rsLoader.GetString(0) & " - " & FormatPercent(rsLoader.GetDouble(1) / 100, 0)) Then
                TeamCombo.Items.Add(rsLoader.GetString(0) & " - " & FormatPercent(rsLoader.GetDouble(1) / 100, 0))
            End If
        End While

    End Sub

    ' Displays the bonus for the selected team as it applies to the item
    Private Sub DisplayTeamBonus(SentGroupIDList As List(Of Long), DisplayTeam As IndustryTeam, ByRef TeamBonusLabel As TextBox, ByRef TeamDefaultLabel As Label, ByRef TeamSaveButton As Button, Tab As String)
        Dim BonusLabel As String = ""
        Dim ToolTipLabel As String = ""
        Dim SQL As String = ""
        Dim rsSearch As SQLiteDataReader
        Dim rsLookUp As SQLiteDataReader

        If DisplayTeam.TeamName <> "" And ((Not IsNothing(SelectedBlueprint) And Tab = BPTab) Or Tab = CalcTab) Then

            ' Look up the bonuses
            SQL = "SELECT BONUS_TYPE, BONUS_VALUE, INDUSTRY_GROUP_SPECIALTIES.SPECIALTY_GROUP_ID, SPECIALTY_GROUP_NAME "
            SQL = SQL & "FROM INDUSTRY_TEAMS_BONUSES, INDUSTRY_GROUP_SPECIALTIES "
            SQL = SQL & "WHERE TEAM_NAME = '" & DisplayTeam.TeamName & "' "
            SQL = SQL & "AND INDUSTRY_TEAMS_BONUSES.SPECIALTY_GROUP_ID = INDUSTRY_GROUP_SPECIALTIES.SPECIALTY_GROUP_ID "
            SQL = SQL & "GROUP BY BONUS_TYPE, BONUS_VALUE, INDUSTRY_GROUP_SPECIALTIES.SPECIALTY_GROUP_ID, SPECIALTY_GROUP_NAME "

            DBCommand = New SQLiteCommand(SQL, DB)
            rsLookUp = DBCommand.ExecuteReader

            ' Loop through the bonuses and display the bonuses that apply to the label, and all for tool tip
            While rsLookUp.Read()

                ' Look up the groupIDs in the table with this team specialty id bonus if bp tab, else look them all up
                If Tab = BPTab Then
                    SQL = "SELECT SPECIALTY_GROUP_NAME, GROUP_ID FROM INDUSTRY_GROUP_SPECIALTIES "
                    SQL = SQL & "WHERE SPECIALTY_GROUP_ID = " & rsLookUp.GetInt32(2)

                    DBCommand = New SQLiteCommand(SQL, DB)
                    rsSearch = DBCommand.ExecuteReader

                    While rsSearch.Read
                        If Not IsNothing(SentGroupIDList) Then
                            If SentGroupIDList.Contains(rsSearch.GetInt32(1)) Then
                                ' Save the bonus to the bonus label
                                BonusLabel = BonusLabel & rsSearch.GetString(0) & " " & FormatPercent(rsLookUp.GetDouble(1) / 100, 1) & " " & rsLookUp.GetString(0) & vbCrLf
                            End If
                        End If
                    End While

                    rsSearch.Close()
                    rsSearch = Nothing
                    DBCommand = Nothing
                Else
                    ' Save all the bonuses to the bonus label for manufacturing tab 
                    BonusLabel = BonusLabel & rsLookUp.GetString(3) & " - " & FormatPercent(rsLookUp.GetDouble(1) / 100, 1) & " " & rsLookUp.GetString(0) & vbCrLf
                End If

                ' Always add all bonuses to the tool tip
                If Tab <> CalcTab Then
                    ToolTipLabel = ToolTipLabel & rsLookUp.GetString(3) & " - " & FormatPercent(rsLookUp.GetDouble(1) / 100, 1) & " " & rsLookUp.GetString(0) & vbCrLf
                End If

            End While

            ' Set the labels
            If BonusLabel <> "" Then
                TeamBonusLabel.Text = BonusLabel.Substring(0, Len(BonusLabel) - 2)
            Else
                TeamBonusLabel.Text = "No Team Bonus"
            End If

            ' Set the tool tip regardless
            If UserApplicationSettings.ShowToolTips And ToolTipLabel <> "" Then
                ttMain.SetToolTip(TeamBonusLabel, ToolTipLabel.Substring(0, Len(ToolTipLabel) - 2))
            End If

        Else
            TeamBonusLabel.Text = ""
        End If

        If DisplayTeam.IsDefault Then
            TeamDefaultLabel.Visible = True
            TeamSaveButton.Enabled = False
        Else
            TeamDefaultLabel.Visible = False
            TeamSaveButton.Enabled = True
        End If

    End Sub

#End Region

#Region "Facilities"

    ' Resets all combo boxes that might need to be updated 
    Private Sub ResetComboLoadVariables(Tab As String, ProductionType As IndustryType, RegionsValue As Boolean, SystemsValue As Boolean, FacilitiesValue As Boolean)

        If Tab = BPTab Then
            BPFacilityRegionsLoaded = RegionsValue
            BPFacilitySystemsLoaded = SystemsValue
            BPFacilitiesLoaded = FacilitiesValue
        Else
            Select Case ProductionType
                Case IndustryType.Manufacturing
                    CalcBaseFacilitiesLoaded = FacilitiesValue
                    CalcBaseFacilitySystemsLoaded = SystemsValue
                    CalcBaseFacilityRegionsLoaded = RegionsValue
                Case IndustryType.SuperManufacturing
                    CalcSuperFacilitiesLoaded = FacilitiesValue
                    CalcSuperFacilitySystemsLoaded = SystemsValue
                    CalcSuperFacilityRegionsLoaded = RegionsValue
                Case IndustryType.CapitalManufacturing
                    CalcCapitalFacilitiesLoaded = FacilitiesValue
                    CalcCapitalFacilitySystemsLoaded = SystemsValue
                    CalcCapitalFacilityRegionsLoaded = RegionsValue
                Case IndustryType.BoosterManufacturing
                    CalcBoosterFacilitiesLoaded = FacilitiesValue
                    CalcBoosterFacilitySystemsLoaded = SystemsValue
                    CalcBoosterFacilityRegionsLoaded = RegionsValue
                Case IndustryType.T3CruiserManufacturing, IndustryType.T3DestroyerManufacturing
                    CalcT3FacilitiesLoaded = FacilitiesValue
                    CalcT3FacilitySystemsLoaded = SystemsValue
                    CalcT3FacilityRegionsLoaded = RegionsValue
                Case IndustryType.SubsystemManufacturing
                    CalcSubsystemFacilitiesLoaded = FacilitiesValue
                    CalcSubsystemFacilitySystemsLoaded = SystemsValue
                    CalcSubsystemFacilityRegionsLoaded = RegionsValue
                Case IndustryType.Invention
                    CalcInventionFacilitiesLoaded = FacilitiesValue
                    CalcInventionFacilitySystemsLoaded = SystemsValue
                    CalcInventionFacilityRegionsLoaded = RegionsValue
                Case IndustryType.T3Invention
                    CalcT3InventionFacilitiesLoaded = FacilitiesValue
                    CalcT3InventionFacilitySystemsLoaded = SystemsValue
                    CalcT3InventionFacilityRegionsLoaded = RegionsValue
                Case IndustryType.Copying
                    CalcCopyFacilitiesLoaded = FacilitiesValue
                    CalcCopyFacilitySystemsLoaded = SystemsValue
                    CalcCopyFacilityRegionsLoaded = RegionsValue
                Case IndustryType.NoPOSManufacturing
                    CalcNoPOSFacilitiesLoaded = FacilitiesValue
                    CalcNoPOSFacilitySystemsLoaded = SystemsValue
                    CalcNoPOSFacilityRegionsLoaded = RegionsValue
                Case IndustryType.ComponentManufacturing, IndustryType.CapitalComponentManufacturing
                    CalcComponentFacilitiesLoaded = FacilitiesValue
                    CalcComponentFacilitySystemsLoaded = SystemsValue
                    CalcComponentFacilityRegionsLoaded = RegionsValue
            End Select
        End If
    End Sub

    ' Loads the default facility for activity sent unless specified
    Private Sub LoadFacility(ProductionType As IndustryType, IsDefault As Boolean, NewBP As Boolean, _
                             FacilityActivity As String, ByRef FacilityTypeCombo As ComboBox, ByRef FacilityRegionCombo As ComboBox, _
                             ByRef FacilitySystemCombo As ComboBox, ByRef FacilityCombo As ComboBox, _
                             ByRef FacilityBonusLabel As Label, ByRef FacilityDefaultLabel As Label, _
                             ByRef FacilityManualMELabel As Label, ByRef FacilityManualMETextBox As TextBox, _
                             ByRef FacilityManualTELabel As Label, ByRef FacilityManualTETextBox As TextBox,
                             ByRef FacilityManualTaxLabel As Label, ByRef FacilityManualTaxTextBox As TextBox,
                             ByRef FacilitySaveButton As Button, ByRef FacilityTaxRateLabel As Label, Tab As String, _
                             ByRef FacilityUsageCheck As CheckBox, ByRef FacilityIncludeLabel As Label, _
                             ByRef FacilityActivityCostCheck As CheckBox, ByRef FacilityActivityTimeCheck As CheckBox, _
                             ByRef FacilityLoaded As Boolean, _
                             Optional ByRef FacilityActivityCombo As ComboBox = Nothing, Optional BPTech As Integer = 1, _
                             Optional ItemGroupID As Integer = 0, Optional ItemCategoryID As Integer = 0, _
                             Optional LoadActivites As Boolean = True, Optional RefreshBP As Boolean = True, Optional ByRef FacilityUsageLabel As Label = Nothing)

        Dim SelectedFacility As New IndustryFacility
        Dim SelectedActivity As String = ActivityManufacturing
        Dim FacilityName As String = ""

        If Tab = BPTab Then
            If IsDefault Then
                Select Case ProductionType
                    Case IndustryType.Manufacturing
                        SelectedFacility = CType(DefaultBPManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.SuperManufacturing
                        SelectedFacility = CType(DefaultBPSuperManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.CapitalManufacturing
                        SelectedFacility = CType(DefaultBPCapitalManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.BoosterManufacturing
                        SelectedFacility = CType(DefaultBPBoosterManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.T3CruiserManufacturing
                        SelectedFacility = CType(DefaultBPT3CruiserManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.T3DestroyerManufacturing
                        SelectedFacility = CType(DefaultBPT3DestroyerManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.SubsystemManufacturing
                        SelectedFacility = CType(DefaultBPSubsystemManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.Invention
                        SelectedFacility = CType(DefaultBPInventionFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityInvention
                    Case IndustryType.T3Invention
                        SelectedFacility = CType(DefaultBPT3InventionFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityInvention
                    Case IndustryType.Copying
                        SelectedActivity = ActivityCopying
                        SelectedFacility = CType(DefaultBPCopyFacility.Clone, IndustryFacility)
                    Case IndustryType.NoPOSManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(DefaultBPNoPOSFacility.Clone, IndustryFacility)
                    Case IndustryType.ComponentManufacturing
                        SelectedActivity = ActivityComponentManufacturing
                        SelectedFacility = CType(DefaultBPComponentManufacturingFacility.Clone, IndustryFacility)
                    Case IndustryType.CapitalComponentManufacturing
                        SelectedActivity = ActivityCapComponentManufacturing
                        SelectedFacility = CType(DefaultBPCapitalComponentManufacturingFacility.Clone, IndustryFacility)
                    Case IndustryType.POSFuelBlockManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(DefaultBPPOSFuelBlockFacility.Clone, IndustryFacility)
                    Case IndustryType.POSLargeShipManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(DefaultBPPOSLargeShipFacility.Clone, IndustryFacility)
                    Case IndustryType.POSModuleManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(DefaultBPPOSModuleFacility.Clone, IndustryFacility)
                End Select

            Else
                Select Case ProductionType
                    Case IndustryType.Manufacturing
                        SelectedFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.SuperManufacturing
                        SelectedFacility = CType(SelectedBPSuperManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.CapitalManufacturing
                        SelectedFacility = CType(SelectedBPCapitalManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.BoosterManufacturing
                        SelectedFacility = CType(SelectedBPBoosterManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.T3CruiserManufacturing
                        SelectedFacility = CType(SelectedBPT3CruiserManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.T3DestroyerManufacturing
                        SelectedFacility = CType(SelectedBPT3DestroyerManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.SubsystemManufacturing
                        SelectedFacility = CType(SelectedBPSubsystemManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.Invention
                        SelectedActivity = ActivityInvention
                        SelectedFacility = CType(SelectedBPInventionFacility.Clone, IndustryFacility)
                    Case IndustryType.T3Invention
                        SelectedActivity = ActivityInvention
                        SelectedFacility = CType(SelectedBPT3InventionFacility.Clone, IndustryFacility)
                    Case IndustryType.Copying
                        SelectedActivity = ActivityCopying
                        SelectedFacility = CType(SelectedBPCopyFacility.Clone, IndustryFacility)
                    Case IndustryType.NoPOSManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(SelectedBPNoPOSFacility.Clone, IndustryFacility)
                    Case IndustryType.ComponentManufacturing
                        SelectedActivity = ActivityComponentManufacturing
                        SelectedFacility = CType(SelectedBPComponentManufacturingFacility.Clone, IndustryFacility)
                    Case IndustryType.CapitalComponentManufacturing
                        SelectedActivity = ActivityCapComponentManufacturing
                        SelectedFacility = CType(SelectedBPCapitalComponentManufacturingFacility.Clone, IndustryFacility)
                    Case IndustryType.POSFuelBlockManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(SelectedBPPOSFuelBlockFacility.Clone, IndustryFacility)
                    Case IndustryType.POSLargeShipManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(SelectedBPPOSLargeShipFacility.Clone, IndustryFacility)
                    Case IndustryType.POSModuleManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(SelectedBPPOSModuleFacility.Clone, IndustryFacility)
                End Select
            End If
        Else
            If IsDefault Then
                Select Case ProductionType
                    Case IndustryType.Manufacturing
                        SelectedFacility = CType(DefaultCalcBaseManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.SuperManufacturing
                        SelectedFacility = CType(DefaultCalcSuperManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.CapitalManufacturing
                        SelectedFacility = CType(DefaultCalcCapitalManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.BoosterManufacturing
                        SelectedFacility = CType(DefaultCalcBoosterManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.T3CruiserManufacturing
                        SelectedFacility = CType(DefaultCalcT3CruiserManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.T3DestroyerManufacturing
                        SelectedFacility = CType(DefaultCalcT3DestroyerManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.SubsystemManufacturing
                        SelectedFacility = CType(DefaultCalcSubsystemManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.Invention
                        SelectedActivity = ActivityInvention
                        SelectedFacility = CType(DefaultCalcInventionFacility.Clone, IndustryFacility)
                    Case IndustryType.T3Invention
                        SelectedActivity = ActivityInvention
                        SelectedFacility = CType(DefaultCalcT3InventionFacility.Clone, IndustryFacility)
                    Case IndustryType.Copying
                        SelectedActivity = ActivityCopying
                        SelectedFacility = CType(DefaultCalcCopyFacility.Clone, IndustryFacility)
                    Case IndustryType.NoPOSManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(DefaultCalcNoPOSFacility.Clone, IndustryFacility)
                    Case IndustryType.ComponentManufacturing
                        SelectedActivity = ActivityComponentManufacturing
                        SelectedFacility = CType(DefaultCalcComponentManufacturingFacility.Clone, IndustryFacility)
                    Case IndustryType.CapitalComponentManufacturing
                        SelectedActivity = ActivityCapComponentManufacturing
                        SelectedFacility = CType(DefaultCalcCapitalComponentManufacturingFacility.Clone, IndustryFacility)
                    Case IndustryType.POSFuelBlockManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(DefaultCalcPOSFuelBlockFacility.Clone, IndustryFacility)
                    Case IndustryType.POSLargeShipManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(DefaultCalcPOSLargeShipFacility.Clone, IndustryFacility)
                    Case IndustryType.POSModuleManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(DefaultCalcPOSModuleFacility.Clone, IndustryFacility)
                End Select

            Else
                Select Case ProductionType
                    Case IndustryType.Manufacturing
                        SelectedFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.SuperManufacturing
                        SelectedFacility = CType(SelectedCalcSuperManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.CapitalManufacturing
                        SelectedFacility = CType(SelectedCalcCapitalManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.BoosterManufacturing
                        SelectedFacility = CType(SelectedCalcBoosterManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.T3CruiserManufacturing
                        SelectedFacility = CType(SelectedCalcT3CruiserManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.T3DestroyerManufacturing
                        SelectedFacility = CType(SelectedCalcT3DestroyerManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.SubsystemManufacturing
                        SelectedFacility = CType(SelectedCalcSubsystemManufacturingFacility.Clone, IndustryFacility)
                        SelectedActivity = ActivityManufacturing
                    Case IndustryType.Invention
                        SelectedActivity = ActivityInvention
                        SelectedFacility = CType(SelectedCalcInventionFacility.Clone, IndustryFacility)
                    Case IndustryType.T3Invention
                        SelectedActivity = ActivityInvention
                        SelectedFacility = CType(SelectedCalcT3InventionFacility.Clone, IndustryFacility)
                    Case IndustryType.Copying
                        SelectedActivity = ActivityCopying
                        SelectedFacility = CType(SelectedCalcCopyFacility.Clone, IndustryFacility)
                    Case IndustryType.NoPOSManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(SelectedCalcNoPOSFacility.Clone, IndustryFacility)
                    Case IndustryType.ComponentManufacturing
                        SelectedActivity = ActivityComponentManufacturing
                        SelectedFacility = CType(SelectedCalcComponentManufacturingFacility.Clone, IndustryFacility)
                    Case IndustryType.CapitalComponentManufacturing
                        SelectedActivity = ActivityCapComponentManufacturing
                        SelectedFacility = CType(SelectedCalcCapitalComponentManufacturingFacility.Clone, IndustryFacility)
                    Case IndustryType.POSFuelBlockManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(SelectedCalcPOSFuelBlockFacility.Clone, IndustryFacility)
                    Case IndustryType.POSLargeShipManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(SelectedCalcPOSLargeShipFacility.Clone, IndustryFacility)
                    Case IndustryType.POSModuleManufacturing
                        SelectedActivity = ActivityManufacturing
                        SelectedFacility = CType(SelectedCalcPOSModuleFacility.Clone, IndustryFacility)
                End Select
            End If
        End If

        If LoadActivites And Not IsNothing(FacilityActivityCombo) Then
            Call LoadFacilityActivities(BPTech, NewBP, FacilityActivityCombo, ItemGroupID, ItemCategoryID)
        End If

        ' Activity combo is loaded so set the activity Text
        LoadingFacilityActivities = True
        If Not IsNothing(FacilityActivityCombo) Then
            FacilityActivityCombo.Text = SelectedActivity
        End If
        PreviousIndustryType = ProductionType
        PreviousActivity = SelectedActivity
        LoadingFacilityActivities = False

        ' Facility Type combo
        ' Load the combo if they want to change
        Call LoadFacilityTypeCombo(ProductionType, FacilityActivity, FacilityTypeCombo, FacilityRegionCombo, FacilitySystemCombo, _
                                   FacilityCombo, FacilityBonusLabel, FacilityDefaultLabel, FacilityManualMELabel, FacilityManualMETextBox, _
                                   FacilityManualTELabel, FacilityManualMETextBox, FacilityManualTaxLabel, FacilityManualTaxTextBox, _
                                   FacilitySaveButton, FacilityTaxRateLabel, Tab, FacilityUsageLabel, FacilityUsageCheck)

        ' Enable the type of facility and set
        LoadingFacilityTypes = True
        FacilityTypeCombo.Enabled = True
        FacilityTypeCombo.Text = SelectedFacility.FacilityType
        LoadingFacilityTypes = False

        If SelectedFacility.FacilityType = None Then
            ' Just hide the boxes and exit
            Call HideFacilityBonusBoxes(FacilityBonusLabel, FacilityTaxRateLabel, FacilityManualMELabel, FacilityManualTELabel, _
                                        FacilityManualMETextBox, FacilityManualTETextBox, FacilityManualTaxLabel, FacilityManualTaxTextBox, FacilityUsageLabel)
            Call SetNoFacility(FacilityRegionCombo, FacilitySystemCombo, FacilityCombo, FacilityUsageCheck, _
                               FacilityActivityCostCheck, FacilityActivityTimeCheck, FacilityIncludeLabel)
            FacilityLoaded = True ' Even with none, it's loaded
            Exit Sub
        End If

        ' Region name Combo
        LoadingFacilityRegions = True
        FacilityRegionCombo.Enabled = True
        FacilityRegionCombo.Text = SelectedFacility.RegionName
        LoadingFacilityRegions = False

        ' Systems combo
        LoadingFacilitySystems = True
        FacilitySystemCombo.Enabled = True
        FacilitySystemCombo.Text = SelectedFacility.SolarSystemName ' & " (" & FormatNumber(SelectedFacility.CostIndex, 3) & ")"
        LoadingFacilitySystems = False

        ' Facility/Array combo
        LoadingFacilities = True
        FacilityCombo.Enabled = True
        Dim AutoLoad As Boolean = False
        'If it's a pos, need to auto-load the facility for that item selected
        If FacilityTypeCombo.Text = POSFacility And Tab = BPTab Then
            Call LoadFacilities(ItemGroupID, ItemCategoryID, False, _
                                FacilityActivity, FacilityTypeCombo, FacilityRegionCombo, FacilitySystemCombo, FacilityCombo, _
                                FacilityBonusLabel, FacilityDefaultLabel, FacilityManualMELabel, FacilityManualMETextBox, _
                                FacilityManualTELabel, FacilityManualTETextBox, FacilityManualTaxLabel, FacilityManualTaxTextBox, _
                                FacilitySaveButton, FacilityTaxRateLabel, Tab, _
                                FacilityUsageCheck, FacilityActivityCostCheck, FacilityActivityTimeCheck, AutoLoad, _
                                SelectedFacility.IncludeActivityUsage, SelectedFacility.FacilityName, FacilityUsageLabel)
        ElseIf Tab = CalcTab Then
            ' Load all facilities for each calc tab facility
            Call LoadFacilities(ItemGroupID, ItemCategoryID, False, _
                    FacilityActivity, FacilityTypeCombo, FacilityRegionCombo, FacilitySystemCombo, FacilityCombo, _
                    FacilityBonusLabel, FacilityDefaultLabel, FacilityManualMELabel, FacilityManualMETextBox, _
                    FacilityManualTELabel, FacilityManualTETextBox, FacilityManualTaxLabel, FacilityManualTaxTextBox, _
                    FacilitySaveButton, FacilityTaxRateLabel, Tab, _
                    FacilityUsageCheck, FacilityActivityCostCheck, FacilityActivityTimeCheck, AutoLoad, _
                    SelectedFacility.IncludeActivityUsage, SelectedFacility.FacilityName, FacilityUsageLabel)
        End If
        LoadingFacilities = False

        ' Usage checks
        ChangingUsageChecks = True
        FacilityUsageCheck.Checked = SelectedFacility.IncludeActivityUsage

        If Not IsNothing(FacilityActivityCostCheck) Then
            FacilityActivityCostCheck.Checked = SelectedFacility.IncludeActivityCost
        End If

        If Not IsNothing(FacilityActivityTimeCheck) Then
            FacilityActivityTimeCheck.Checked = SelectedFacility.IncludeActivityTime
        End If
        ChangingUsageChecks = False

        ' Finally show the results and save the facility locally
        If Not AutoLoad Then
            LoadingFacilities = True
            FacilityCombo.Text = SelectedFacility.FacilityName
            Call DisplayFacilityBonus(SelectedFacility.ProductionType, SelectedFacility.MaterialMultiplier, SelectedFacility.TimeMultiplier, SelectedFacility.TaxRate, _
                                      ItemGroupID, ItemCategoryID, _
                                      FacilityActivity, FacilityTypeCombo.Text, FacilityCombo.Text, _
                                      FacilityRegionCombo, FacilitySystemCombo, FacilityCombo, _
                                      FacilityBonusLabel, FacilityDefaultLabel, _
                                      FacilityManualMELabel, FacilityManualMETextBox, _
                                      FacilityManualTELabel, FacilityManualTETextBox, _
                                      FacilityManualTaxLabel, FacilityManualTaxTextBox, _
                                      FacilitySaveButton, FacilityTaxRateLabel, _
                                      FacilityUsageCheck, FacilityActivityCostCheck, FacilityActivityTimeCheck, Tab, FacilityLoaded, SelectedFacility.IncludeActivityUsage)
            LoadingFacilities = False
        End If

        Call ResetComboLoadVariables(Tab, ProductionType, False, False, False)

        ' If this is the BP tab, then refresh the BP prices
        If Not FirstLoad And SetTaxFeeChecks And Tab = BPTab And RefreshBP Then
            If Not IsNothing(SelectedBlueprint) Then
                Call SelectedBlueprint.SetPriceData(chkBPTaxes.Checked, chkBPBrokerFees.Checked)
                Call UpdateBPPriceLabels()
            End If
        End If

        ' All facilities loaded
        FacilityLoaded = True
        If Tab = CalcTab Then
            Call ResetRefresh()
        End If

    End Sub

    ' Loads the bp facility activity combo
    Private Sub LoadFacilityActivities(BPTech As Integer, NewBP As Boolean, ByRef FacilityActivitiesCombo As ComboBox, BPGroupID As Long, BPCategoryID As Long)

        LoadingFacilityActivities = True

        Select Case BPTech
            Case BlueprintTechLevel.T1
                ' Just manufacturing (add components later if there are any)
                FacilityActivitiesCombo.Items.Clear()
                FacilityActivitiesCombo.Items.Add(ActivityManufacturing)

            Case BlueprintTechLevel.T2
                ' Add only T2 activities to equipment
                FacilityActivitiesCombo.Items.Clear()
                FacilityActivitiesCombo.Items.Add(ActivityManufacturing)
                FacilityActivitiesCombo.Items.Add(ActivityCopying)
                FacilityActivitiesCombo.Items.Add(ActivityInvention)

            Case BlueprintTechLevel.T3
                ' Add only T3 activities to eqipment
                FacilityActivitiesCombo.Items.Clear()
                FacilityActivitiesCombo.Items.Add(ActivityManufacturing)
                FacilityActivitiesCombo.Items.Add(ActivityInvention)

        End Select

        ' Add components as a manufacturing facility option if this bp has any
        If Not IsNothing(SelectedBlueprint) And Not NewBP Then
            If SelectedBlueprint.HasComponents Then
                Select Case BPGroupID
                    Case TitanGroupID, DreadnoughtGroupID, CarrierGroupID, SupercarrierGroupID, CapitalIndustrialShipGroupID, IndustrialCommandShipGroupID, FreighterGroupID, JumpFreighterGroupID
                        FacilityActivitiesCombo.Items.Add(ActivityCapComponentManufacturing)
                        If BPGroupID = JumpFreighterGroupID Then
                            ' Need to add both cap and components
                            FacilityActivitiesCombo.Items.Add(ActivityComponentManufacturing)
                        End If
                    Case Else
                        FacilityActivitiesCombo.Items.Add(ActivityComponentManufacturing)
                End Select
            End If
        End If

        ' Only the BP tab will call this
        BPFacilitiesLoaded = False
        BPFacilityRegionsLoaded = False
        BPFacilitySystemsLoaded = False

        LoadingFacilityActivities = False

    End Sub

    ' Loads the facility types in the sent combo
    Private Sub LoadFacilityTypeCombo(ProductionType As IndustryType, _
                             ByRef FacilityActivity As String, ByRef FacilityTypeCombo As ComboBox, _
                             ByRef FacilityRegionCombo As ComboBox, ByRef FacilitySystemCombo As ComboBox, ByRef FacilityCombo As ComboBox, _
                             ByRef FacilityBonusLabel As Label, ByRef FacilityDefaultLabel As Label, _
                             ByRef FacilityManualMELabel As Label, ByRef FacilityManualMETextBox As TextBox, _
                             ByRef FacilityManualTELabel As Label, ByRef FacilityManualTETextBox As TextBox, _
                             ByRef FacilityManualTaxLabel As Label, ByRef FacilityManualTaxTextBox As TextBox, _
                             ByRef FacilitySaveButton As Button, ByRef FacilityTaxRateLabel As Label, Tab As String, _
                             ByRef FacilityUsageLabel As Label, ByRef FacilityUsageCheck As CheckBox)

        LoadingFacilityTypes = True
        LoadingFacilityRegions = True
        LoadingFacilitySystems = True
        LoadingFacilities = True

        ' Clear the types each time for a fresh set of options
        FacilityTypeCombo.Items.Clear()

        ' Load the facility type options
        Select Case FacilityActivity
            ' Load up None for Invention/RE, Copy - they could buy the BP or T2 BPO
            Case ActivityCopying, ActivityInvention
                Select Case ProductionType
                    Case IndustryType.T3Invention
                        ' Can be invented in outposts and POS
                        FacilityTypeCombo.Items.Add(OutpostFacility)
                        FacilityTypeCombo.Items.Add(POSFacility)
                        FacilityTypeCombo.Items.Add(None)
                    Case Else
                        FacilityTypeCombo.Items.Add(StationFacility)
                        FacilityTypeCombo.Items.Add(OutpostFacility)
                        FacilityTypeCombo.Items.Add(POSFacility)
                        FacilityTypeCombo.Items.Add(None)
                End Select
            Case ActivityManufacturing
                Select Case ProductionType
                    Case IndustryType.SuperManufacturing
                        ' Check types, supers can only be built in a pos
                        FacilityTypeCombo.Items.Add(POSFacility)
                    Case IndustryType.BoosterManufacturing, IndustryType.SubsystemManufacturing, IndustryType.T3CruiserManufacturing, IndustryType.T3DestroyerManufacturing
                        ' Can be built in outposts and POS
                        FacilityTypeCombo.Items.Add(OutpostFacility)
                        FacilityTypeCombo.Items.Add(POSFacility)
                    Case IndustryType.NoPOSManufacturing
                        ' No POS for stuff like infrastructure hubs
                        FacilityTypeCombo.Items.Add(StationFacility)
                        FacilityTypeCombo.Items.Add(OutpostFacility)
                    Case Else
                        ' Add all
                        FacilityTypeCombo.Items.Add(StationFacility)
                        FacilityTypeCombo.Items.Add(OutpostFacility)
                        FacilityTypeCombo.Items.Add(POSFacility)
                End Select
            Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                ' Can do these anywhere
                FacilityTypeCombo.Items.Add(StationFacility)
                FacilityTypeCombo.Items.Add(OutpostFacility)
                FacilityTypeCombo.Items.Add(POSFacility)
        End Select

        ' Only reset if they changed it
        If ProductionType <> PreviousIndustryType Or FacilityActivity <> PreviousActivity Then
            ' Reset all other dropdowns
            FacilityTypeCombo.Text = "Select Type"
            FacilityRegionCombo.Items.Clear()
            FacilityRegionCombo.Text = "Select Region"
            FacilityRegionCombo.Enabled = False
            FacilitySystemCombo.Items.Clear()
            FacilitySystemCombo.Text = "Select System"
            FacilitySystemCombo.Enabled = False
            FacilityCombo.Items.Clear()
            FacilityCombo.Text = "Select Facility / Array"
            FacilityCombo.Enabled = False
            FacilityUsageCheck.Enabled = False
            PreviousIndustryType = ProductionType
            PreviousActivity = FacilityActivity
            Call HideFacilityBonusBoxes(FacilityBonusLabel, FacilityTaxRateLabel, FacilityManualMELabel, FacilityManualTELabel, _
                                        FacilityManualMETextBox, FacilityManualTETextBox, FacilityManualTaxLabel, FacilityManualTaxTextBox, FacilityUsageLabel)


        End If

        ' Double check the text selected and reset 
        If Not FacilityTypeCombo.Items.Contains(FacilityTypeCombo.Text) Then
            FacilityTypeCombo.Text = POSFacility ' can build almost everything (if not all) in a pos
        End If

        ' Enable the facility type combo
        FacilityTypeCombo.Enabled = True

        ' Make sure default is not shown yet
        'FacilityDefaultLabel.Visible = False
        FacilitySaveButton.Enabled = False

        LoadingFacilityTypes = False
        LoadingFacilityRegions = False
        LoadingFacilitySystems = False
        LoadingFacilities = False

        Call ResetComboLoadVariables(Tab, ProductionType, False, False, False)

    End Sub

    ' Based on the selections, load the region combo
    Private Sub LoadFacilityRegions(ItemGroupID As Integer, ItemCategoryID As Integer, NewFacility As Boolean, _
                                    ByRef FacilityActivity As String, ByRef FacilityTypeCombo As ComboBox, _
                                    ByRef FacilityRegionCombo As ComboBox, ByRef FacilitySystemCombo As ComboBox, ByRef FacilityCombo As ComboBox, _
                                    ByRef FacilityBonusLabel As Label, ByRef FacilityDefaultLabel As Label, _
                                    ByRef FacilityManualMELabel As Label, ByRef FacilityManualMETextBox As TextBox, _
                                    ByRef FacilityManualTELabel As Label, ByRef FacilityManualTETextBox As TextBox, _
                                    ByRef FacilityManualTaxLabel As Label, ByRef FacilityManualTaxTextBox As TextBox, _
                                    ByRef FacilitySaveButton As Button, ByRef FacilityTaxRateLabel As Label, Tab As String, _
                                    ByRef FacilityUsageCheck As CheckBox, Optional ByRef FacilityUsageLabel As Label = Nothing)
        Dim SQL As String = ""
        Dim rsLoader As SQLiteDataReader

        LoadingFacilityRegions = True
        LoadingFacilitySystems = True
        LoadingFacilities = True

        FacilityRegionCombo.Items.Clear()

        ' Load regions from the facilities table - only load regions for our activity type and item group/category
        Select Case FacilityTypeCombo.Text

            Case OutpostFacility, StationFacility

                SQL = "SELECT DISTINCT REGION_NAME FROM STATION_FACILITIES WHERE OUTPOST "

                ' Set flag for outpost just to delineate
                If FacilityTypeCombo.Text = StationFacility Then
                    SQL = SQL & " = " & CStr(StationType.Station) & " "
                Else
                    SQL = SQL & " = " & CStr(StationType.Outpost) & " "
                End If

                Select Case FacilityActivity
                    Case ActivityManufacturing
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                        ' Add only regions with stations that can make what we sent
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Manufacturing)
                    Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                        ' Add category for components - All types can be built in stations
                        SQL = SQL & GetFacilityCatGroupIDSQL(ComponentCategoryID, -1, IndustryActivities.Manufacturing)
                    Case ActivityCopying
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Copying) & " "
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Copying)
                    Case ActivityInvention
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Invention) & " "
                        ' For T3 stuff, need to make sure we only show facilities that can do T3 invention (Caldari Outposts)
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Invention)
                End Select

            Case POSFacility
                ' For a POS, load all regions as options, but adding only one wormhole region option and don't show Jove regions
                SQL = "SELECT DISTINCT CASE WHEN (REGIONS.regionID >=11000000 and REGIONS.regionid <=11000030) THEN 'Wormhole Space' ELSE regionName END AS REGION_NAME "
                SQL = SQL & "FROM REGIONS, SOLAR_SYSTEMS "
                SQL = SQL & "WHERE SOLAR_SYSTEMS.regionID = REGIONS.regionID "
                SQL = SQL & "AND (factionID <> 500005 OR factionID IS NULL) "

                ' For supers, only show null regions where you can have sov (no factionID excludes NPC null, etc)
                If ItemGroupID = SupercarrierGroupID Or ItemGroupID = TitanGroupID Then
                    SQL = SQL & " AND security <= 0.0 AND factionID IS NULL AND regionName <> 'Wormhole Space' "
                ElseIf ItemGroupID = DreadnoughtGroupID Or ItemGroupID = CarrierGroupID Or ItemGroupID = CapitalIndustrialShipGroupID Then
                    ' For caps, only show low sec
                    SQL = SQL & " AND security < .45 "
                End If

        End Select

        SQL = SQL & "GROUP BY REGION_NAME "

        DBCommand = New SQLiteCommand(SQL, DB)
        rsLoader = DBCommand.ExecuteReader

        While rsLoader.Read
            FacilityRegionCombo.Items.Add(rsLoader.GetString(0))
        End While

        ' Enable the region combo
        FacilityRegionCombo.Enabled = True

        ' Only turn off everything if it's set to select region
        If NewFacility Then
            FacilitySystemCombo.Items.Clear()
            FacilitySystemCombo.Text = "Select System"
            FacilitySystemCombo.Enabled = False
            FacilityCombo.Items.Clear()
            FacilityCombo.Text = "Select Facility / Array"
            FacilityCombo.Enabled = False
            ' Make sure default is not checked yet
            FacilityDefaultLabel.ForeColor = SystemColors.ButtonShadow
            FacilitySaveButton.Enabled = False
            FacilityUsageCheck.Enabled = False
            Call HideFacilityBonusBoxes(FacilityBonusLabel, FacilityTaxRateLabel, FacilityManualMELabel, FacilityManualTELabel, _
                                        FacilityManualMETextBox, FacilityManualTETextBox, FacilityManualTaxLabel, FacilityManualTaxTextBox, FacilityUsageLabel)
        End If

        ' Only reset the region if the current selected region is not in list, also if it is in list, enable solarsystem
        If Not FacilityRegionCombo.Items.Contains(FacilityRegionCombo.Text) Then
            FacilityRegionCombo.Text = "Select Region"
        Else
            FacilitySystemCombo.Enabled = True
        End If

        LoadingFacilityRegions = False
        LoadingFacilitySystems = False
        LoadingFacilities = False

        Call ResetComboLoadVariables(Tab, GetProductionType(FacilityActivity, ItemGroupID, ItemCategoryID, FacilityTypeCombo.Text), True, False, False)

        rsLoader.Close()
        rsLoader = Nothing
        DBCommand = Nothing

    End Sub

    ' Based on the selections, load the systems combo
    Private Sub LoadFacilitySystems(ItemGroupID As Integer, ItemCategoryID As Integer, NewFacility As Boolean, _
                               ByRef FacilityActivity As String, ByRef FacilityTypeCombo As ComboBox, _
                               ByRef FacilityRegionCombo As ComboBox, ByRef FacilitySystemCombo As ComboBox, ByRef FacilityCombo As ComboBox, _
                               ByRef FacilityBonusLabel As Label, ByRef FacilityTaxRateLabel As Label, _
                               ByRef FacilityManualMELabel As Label, ByRef FacilityManualMETextBox As TextBox, _
                               ByRef FacilityManualTELabel As Label, ByRef FacilityManualTETextBox As TextBox, _
                               ByRef FacilityManualTaxLabel As Label, ByRef FacilityManualTaxTextBox As TextBox, _
                               ByRef FacilityDefaultLabel As Label, ByRef FacilitySaveButton As Button, Tab As String, _
                               ByRef FacilityUsageCheck As CheckBox, Optional ByRef FacilityUsageLabel As Label = Nothing)

        Dim SQL As String = ""
        Dim rsLoader As SQLiteDataReader

        LoadingFacilitySystems = True
        LoadingFacilities = True

        FacilitySystemCombo.Items.Clear()

        Select Case FacilityTypeCombo.Text

            Case OutpostFacility, StationFacility

                SQL = "SELECT DISTINCT SOLAR_SYSTEM_NAME, COST_INDEX FROM STATION_FACILITIES WHERE OUTPOST "

                ' Set flag for outpost just to delineate
                If FacilityTypeCombo.Text = StationFacility Then
                    SQL = SQL & " = " & CStr(StationType.Station) & " "
                Else
                    SQL = SQL & " = " & CStr(StationType.Outpost) & " "
                End If

                Select Case FacilityActivity
                    Case ActivityManufacturing
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Manufacturing)
                    Case ActivityComponentManufacturing
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                        ' Add category for components - All types can be built in stations
                        SQL = SQL & GetFacilityCatGroupIDSQL(ComponentCategoryID, -1, IndustryActivities.Manufacturing)
                    Case ActivityCopying
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Copying) & " "
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Copying)
                    Case ActivityInvention
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Invention) & " "
                        ' For T3 stuff, need to make sure we only show facilities that can do T3 invention (Caldari Outposts)
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Invention)
                End Select

                SQL = SQL & "AND REGION_NAME = '" & FormatDBString(FacilityRegionCombo.Text) & "'"

            Case POSFacility
                ' For a POS, load all systems, if wormhole 'region' selected, then load jspace systems
                SQL = "SELECT DISTINCT solarSystemName AS SOLAR_SYSTEM_NAME, COST_INDEX FROM SOLAR_SYSTEMS, REGIONS, INDUSTRY_SYSTEMS_COST_INDICIES "
                SQL = SQL & "WHERE SOLAR_SYSTEMS.regionID = REGIONS.regionID "
                If FacilityRegionCombo.Text = "Wormhole Space" Then
                    SQL = SQL & "AND SOLAR_SYSTEMS.regionID >=11000000 and SOLAR_SYSTEMS.regionid <=11000030 "
                Else
                    SQL = SQL & "AND regionName = '" & FormatDBString(FacilityRegionCombo.Text) & "'"
                End If

                ' For supers, only show null regions where you can have sov (no factionID excludes NPC null, etc)
                If ItemGroupID = SupercarrierGroupID Or ItemGroupID = TitanGroupID Then
                    SQL = SQL & " AND security <= 0.0 AND factionID IS NULL AND regionName <> 'Wormhole Space' "
                ElseIf ItemGroupID = DreadnoughtGroupID Or ItemGroupID = CarrierGroupID Or ItemGroupID = CapitalIndustrialShipGroupID Then
                    ' For caps, only show low sec
                    SQL = SQL & " AND security < .45 "
                End If

                ' Link the activity and index
                SQL = SQL & " AND solarSystemID = SOLAR_SYSTEM_ID "

                Select Case FacilityActivity
                    Case ActivityManufacturing
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                    Case ActivityComponentManufacturing
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                    Case ActivityCopying
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Copying) & " "
                    Case ActivityInvention
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Invention) & " "
                End Select

        End Select

        SQL = SQL & " GROUP BY SOLAR_SYSTEM_NAME, COST_INDEX"

        DBCommand = New SQLiteCommand(SQL, DB)
        rsLoader = DBCommand.ExecuteReader

        While rsLoader.Read
            FacilitySystemCombo.Items.Add(rsLoader.GetString(0) & " (" & FormatNumber(rsLoader.GetDouble(1), 3) & ")")
        End While

        ' Enable the system combo
        FacilitySystemCombo.Enabled = True

        ' Only turn off everything if it's set to select a system
        If NewFacility Then
            FacilityCombo.Items.Clear()
            If FacilityTypeCombo.Text = POSFacility Then
                FacilityCombo.Text = "Select Array"
            Else
                FacilityCombo.Text = "Select Facility"
            End If
            FacilityCombo.Enabled = False
            ' Make sure default is not checked yet
            FacilityDefaultLabel.ForeColor = SystemColors.ButtonShadow
            FacilitySaveButton.Enabled = False
            FacilityUsageCheck.Enabled = False
            Call HideFacilityBonusBoxes(FacilityBonusLabel, FacilityTaxRateLabel, FacilityManualMELabel, FacilityManualTELabel, _
                                        FacilityManualMETextBox, FacilityManualTETextBox, FacilityManualTaxLabel, FacilityManualTaxTextBox, FacilityUsageLabel)
        End If

        ' Only reset the system if the current selected system is not in list, also if it is in list, enable facilty
        If Not FacilitySystemCombo.Items.Contains(FacilitySystemCombo.Text) Then
            FacilitySystemCombo.Text = "Select System"
        Else
            FacilityCombo.Enabled = True
        End If

        LoadingFacilitySystems = False
        LoadingFacilities = False

        Call ResetComboLoadVariables(Tab, GetProductionType(FacilityActivity, ItemGroupID, ItemCategoryID, FacilityTypeCombo.Text), False, True, False)

        rsLoader.Close()
        rsLoader = Nothing
        DBCommand = Nothing

    End Sub

    ' Based on the selections, load the facilities/arrays combo - an itemcategory or itemgroup id of -1 means to ignore it when filling arrays
    Private Sub LoadFacilities(ItemGroupID As Integer, ItemCategoryID As Integer, NewFacility As Boolean, _
                               ByRef FacilityActivity As String, ByRef FacilityTypeCombo As ComboBox, _
                               ByRef FacilityRegionCombo As ComboBox, ByRef FacilitySystemCombo As ComboBox, ByRef FacilityCombo As ComboBox, _
                               ByRef FacilityBonusLabel As Label, ByRef FacilityDefaultLabel As Label, _
                               ByRef FacilityManualMELabel As Label, ByRef FacilityManualMETextBox As TextBox, _
                               ByRef FacilityManualTELabel As Label, ByRef FacilityManualTETextBox As TextBox, _
                               ByRef FacilityManualTaxLabel As Label, ByRef FacilityManualTaxTextBox As TextBox, _
                               ByRef FacilitySaveButton As Button, ByRef FacilityTaxRateLabel As Label, _
                               ByVal Tab As String, ByRef FacilityUsageCheck As CheckBox, _
                               ByRef FacilityIncludeActivityCostsCheck As CheckBox, ByRef FacilityIncludeActivityTimeCheck As CheckBox, _
                               ByRef AutoLoadFacility As Boolean, ByVal FacilityUsageCheckValue As Boolean, _
                               Optional OverrideFacilityName As String = "", Optional ByRef FacilityUsageLabel As Label = Nothing)
        Dim SQL As String = ""
        Dim rsLoader As SQLiteDataReader

        LoadingFacilities = True

        Select Case FacilityTypeCombo.Text

            Case StationFacility, OutpostFacility
                ' Load the Stations in system for the activity we are doing
                SQL = "SELECT DISTINCT FACILITY_NAME FROM STATION_FACILITIES WHERE OUTPOST "

                ' Set flag for outpost just to delineate
                If FacilityTypeCombo.Text = StationFacility Then
                    SQL = SQL & " = " & CStr(StationType.Station) & " "
                Else
                    SQL = SQL & " = " & CStr(StationType.Outpost) & " "
                End If

                Select Case FacilityActivity
                    Case ActivityManufacturing
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                        ' Check groups and categories
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Manufacturing)
                    Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                        ' Add category for components - All types can be built in stations
                        SQL = SQL & GetFacilityCatGroupIDSQL(ComponentCategoryID, -1, IndustryActivities.Manufacturing)
                    Case ActivityCopying
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Copying) & " "
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Copying)
                    Case ActivityInvention
                        SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Invention) & " "
                        ' For T3 stuff, need to make sure we only show facilities that can do T3 invention (Caldari Outposts)
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Invention)
                End Select

                SQL = SQL & "AND REGION_NAME = '" & FormatDBString(FacilityRegionCombo.Text) & "' "
                Dim SystemName As String = FacilitySystemCombo.Text.Substring(0, InStr(FacilitySystemCombo.Text, "(") - 2)
                SQL = SQL & "AND SOLAR_SYSTEM_NAME = '" & FormatDBString(SystemName) & "' "

            Case POSFacility

                ' Load all the array types up into the combo for a POS
                SQL = "SELECT DISTINCT ARRAY_NAME AS FACILITY_NAME FROM ASSEMBLY_ARRAYS "
                SQL = SQL & "WHERE ACTIVITY_ID = "

                Select Case FacilityActivity
                    Case ActivityManufacturing
                        SQL = SQL & CStr(IndustryActivities.Manufacturing) & " "
                        ' Check groups and categories
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Manufacturing)
                    Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                        SQL = SQL & CStr(IndustryActivities.Manufacturing) & " "
                        ' Add category for component
                        Select Case ItemGroupID
                            Case TitanGroupID, SupercarrierGroupID, DreadnoughtGroupID, CarrierGroupID, _
                                CapitalIndustrialShipGroupID, IndustrialCommandShipGroupID, FreighterGroupID, JumpFreighterGroupID, _
                                AdvCapitalComponentGroupID, CapitalComponentGroupID
                                SQL = SQL & GetFacilityCatGroupIDSQL(ComponentCategoryID, CapitalComponentGroupID, IndustryActivities.Manufacturing) ' These all use cap components
                            Case Else
                                SQL = SQL & GetFacilityCatGroupIDSQL(ComponentCategoryID, ConstructionComponentsGroupID, IndustryActivities.Manufacturing)
                        End Select
                    Case ActivityCopying
                        SQL = SQL & CStr(IndustryActivities.Copying) & " "
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Invention)
                    Case ActivityInvention
                        ' POS invention you can only do T3 in certain arrays
                        SQL = SQL & CStr(IndustryActivities.Invention) & " "
                        SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Invention)
                End Select

        End Select

        ' This is helpful if we auto-load (Capital array before super capital, equipment array before rapid equipment) to choose the one more likely
        SQL = SQL & " ORDER BY FACILITY_NAME"

        DBCommand = New SQLiteCommand(SQL, DB)
        rsLoader = DBCommand.ExecuteReader

        FacilityCombo.Enabled = True
        FacilityCombo.Items.Clear()

        Dim AutoLoadName As String = ""
        Dim i As Integer = 0

        While rsLoader.Read
            FacilityCombo.Items.Add(rsLoader.GetString(0))
            i += 1 ' get the count
            ' Load the first one - auto choose subsystem array over advanced medium array unless already selected
            If AutoLoadName = "" Or (rsLoader.GetString(0) = "Subsystem Assembly Array" And OverrideFacilityName = "") Then
                AutoLoadName = rsLoader.GetString(0)
            End If
        End While

        ' Always load the facility if there is only one and we have a reference to auto load or we are loading a specific facility
        If (i = 1 And Not IsNothing(AutoLoadFacility)) Or FacilityCombo.Items.Contains(OverrideFacilityName) _
            Or FacilityCombo.Items.Contains(FacilityCombo.Text) Or OverrideFacilityName = "CalcBase" Then
            ' Check the override, if they want to use a rapid assembly it will override here, otherwise the other facility types should handle it (e.g. super, cap, etc)
            If OverrideFacilityName <> "" And FacilityCombo.Items.Contains(OverrideFacilityName) Then
                FacilityCombo.Text = OverrideFacilityName
            Else
                FacilityCombo.Text = AutoLoadName
            End If

            AutoLoadFacility = True
            ' Display bonuses - Need to load everything since the array won't change to cause it to reload
            Dim Defaults As New ProgramSettings

            ' For a pos, need to display the results and reload the bp
            Call DisplayFacilityBonus(GetProductionType(FacilityActivity, ItemGroupID, ItemCategoryID, FacilityTypeCombo.Text), _
                          Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, ItemGroupID, ItemCategoryID, _
                          FacilityActivity, FacilityTypeCombo.Text, FacilityCombo.Text, _
                          FacilityRegionCombo, FacilitySystemCombo, FacilityCombo, _
                          FacilityBonusLabel, FacilityDefaultLabel, _
                          FacilityManualMELabel, FacilityManualMETextBox, _
                          FacilityManualTELabel, FacilityManualTETextBox, _
                          FacilityManualTaxLabel, FacilityManualTaxTextBox, _
                          FacilitySaveButton, FacilityTaxRateLabel, _
                          FacilityUsageCheck, FacilityIncludeActivityCostsCheck, FacilityIncludeActivityTimeCheck, _
                          Tab, FullyLoadedBPFacility, FacilityUsageCheckValue)

        Else
            If Not FacilityCombo.Items.Contains(FacilityCombo.Text) Then
                ' Only load if the item isn't in the combo
                Select Case FacilityTypeCombo.Text
                    Case OutpostFacility, StationFacility
                        FacilityCombo.Text = "Select Facility"
                    Case POSFacility
                        FacilityCombo.Text = "Select Array"
                End Select

                ' Make sure default is turned off since we still have to load the array
                FacilitySaveButton.Enabled = False
                FacilityDefaultLabel.ForeColor = SystemColors.ButtonShadow
                FacilityUsageCheck.Enabled = False ' Don't enable the usage either
            Else
                ' Since this is a different system but facility is loaded, enable save
                FacilitySaveButton.Enabled = True
                FacilityDefaultLabel.ForeColor = SystemColors.ButtonShadow
                FacilityUsageCheck.Enabled = True
            End If

            AutoLoadFacility = False

        End If

        ' Users might select the facility drop down first, so reload all others
        Call ResetComboLoadVariables(Tab, GetProductionType(FacilityActivity, ItemGroupID, ItemCategoryID, FacilityTypeCombo.Text), False, False, True)

        If NewFacility Then
            ' Make sure default is not checked yet
            FacilityDefaultLabel.ForeColor = SystemColors.ButtonShadow
            FacilitySaveButton.Enabled = False
            Call HideFacilityBonusBoxes(FacilityBonusLabel, FacilityTaxRateLabel, FacilityManualMELabel, FacilityManualTELabel, _
                                        FacilityManualMETextBox, FacilityManualTETextBox, FacilityManualTaxLabel, FacilityManualTaxTextBox, FacilityUsageLabel)
        End If

        LoadingFacilities = False

        rsLoader.Close()
        rsLoader = Nothing
        DBCommand = Nothing

    End Sub

    ' Displays the bonus for the facility selected in the facility or array combo
    Private Sub DisplayFacilityBonus(ProductionType As IndustryType, SentMM As Double, SentTM As Double, SentTax As Double, _
                                     ItemGroupID As Integer, ItemCategoryID As Integer, _
                                     Activity As String, FacilityType As String, FacilityName As String, _
                                     ByRef FacilityRegionCombo As ComboBox, ByRef FacilitySystemCombo As ComboBox, ByRef FacilityCombo As ComboBox,
                                     ByRef FacilityBonusLabel As Label, ByRef FacilityDefaultLabel As Label, _
                                     ByRef FacilityManualMELabel As Label, ByRef FacilityManualMEText As TextBox, _
                                     ByRef FacilityManualTELabel As Label, ByRef FacilityManualTEText As TextBox, _
                                     ByRef FacilityManualTaxLabel As Label, ByRef FacilityManualTaxText As TextBox, _
                                     ByRef FacilitySaveButton As Button, ByRef FacilityTaxRateLabel As Label, _
                                     ByRef FacilityUsageCheck As CheckBox, _
                                     ByRef ActivityCostCheck As CheckBox, ByRef ActivityTimeCheck As CheckBox, _
                                     Tab As String, ByRef FacilityLoaded As Boolean, FacilityUsageCheckValue As Boolean)
        Dim SQL As String = ""
        Dim rsLoader As SQLiteDataReader

        Dim FacilityID As Long
        Dim FacilityTypeID As Long
        Dim MaterialMultiplier As Double
        Dim TimeMultiplier As Double
        Dim CostMultiplier As Double
        Dim Tax As Double

        Dim Defaults As New ProgramSettings
        Dim TempDefaultFacility As New IndustryFacility

        Dim SelectedFacility As New IndustryFacility
        Dim CompareCostCheck As Boolean = False
        Dim CompareTimeCheck As Boolean = False

        If FacilityType <> None Then
            Select Case FacilityType

                Case OutpostFacility, StationFacility

                    ' Load the Stations in system for the activity we are doing
                    SQL = "SELECT FACILITY_ID, FACILITY_TYPE_ID, MATERIAL_MULTIPLIER, "
                    SQL = SQL & "TIME_MULTIPLIER, COST_MULTIPLIER, "
                    SQL = SQL & "FACILITY_TAX FROM STATION_FACILITIES WHERE OUTPOST  "

                    ' Set flag for outpost just to delineate
                    If FacilityType = StationFacility Then
                        SQL = SQL & " = " & CStr(StationType.Station) & " "
                    Else
                        SQL = SQL & " = " & CStr(StationType.Outpost) & " "
                    End If
                    SQL = SQL & "AND FACILITY_NAME = '" & FormatDBString(FacilityName) & "' "

                Case POSFacility

                    SQL = "SELECT 0 AS FACILITY_ID, ARRAY_TYPE_ID, MATERIAL_MULTIPLIER, TIME_MULTIPLIER, 1 AS COST_MULTIPLIER, " & CStr(POSTaxRate) & " as TAX "
                    SQL = SQL & "FROM ASSEMBLY_ARRAYS "
                    SQL = SQL & "WHERE ARRAY_NAME = '" & FormatDBString(FacilityName) & "' "

            End Select

            Select Case Activity
                Case ActivityManufacturing
                    SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                    SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Manufacturing)
                Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                    SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Manufacturing) & " "
                    ' Add category for component
                    Select Case ItemGroupID
                        Case TitanGroupID, SupercarrierGroupID, DreadnoughtGroupID, CarrierGroupID, _
                            CapitalIndustrialShipGroupID, IndustrialCommandShipGroupID, FreighterGroupID, JumpFreighterGroupID, _
                                AdvCapitalComponentGroupID, CapitalComponentGroupID
                            SQL = SQL & GetFacilityCatGroupIDSQL(ComponentCategoryID, CapitalComponentGroupID, IndustryActivities.Manufacturing) ' These all use cap components
                        Case Else
                            SQL = SQL & GetFacilityCatGroupIDSQL(ComponentCategoryID, ConstructionComponentsGroupID, IndustryActivities.Manufacturing)
                    End Select
                Case ActivityCopying
                    SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Copying) & " "
                    SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Copying)
                Case ActivityInvention
                    SQL = SQL & "AND ACTIVITY_ID = " & CStr(IndustryActivities.Invention) & " "
                    SQL = SQL & GetFacilityCatGroupIDSQL(ItemCategoryID, ItemGroupID, IndustryActivities.Invention)
            End Select

            DBCommand = New SQLiteCommand(SQL, DB)
            rsLoader = DBCommand.ExecuteReader

            If rsLoader.Read Then
                ' If we have values that are not the defaults, then they sent in something else saved (outposts) so set them here
                If FacilityType = OutpostFacility Then
                    If SentMM <> Defaults.FacilityDefaultMM Then
                        MaterialMultiplier = SentMM
                    Else
                        MaterialMultiplier = rsLoader.GetDouble(2)
                    End If

                    If SentTM <> Defaults.FacilityDefaultTM Then
                        TimeMultiplier = SentTM
                    Else
                        TimeMultiplier = rsLoader.GetDouble(3)
                    End If

                    If SentTax <> Defaults.FacilityDefaultTax Then
                        Tax = SentTax
                    Else
                        Tax = rsLoader.GetDouble(5)
                    End If

                Else ' For POS and Stations, this is already set
                    MaterialMultiplier = rsLoader.GetDouble(2)
                    TimeMultiplier = rsLoader.GetDouble(3)
                    Tax = rsLoader.GetDouble(5)
                End If

                CostMultiplier = rsLoader.GetDouble(4)

                FacilityID = rsLoader.GetInt64(0)
                FacilityTypeID = rsLoader.GetInt64(1)

                rsLoader.Close()
            Else
                ' Set the facility to none if not found
                FacilityType = None
            End If

        End If

        If FacilityType = None Then
            ' None selected or not found
            FacilityName = None
            FacilityID = 0
            FacilityTypeID = 0
            MaterialMultiplier = Defaults.FacilityDefaultMM
            TimeMultiplier = Defaults.FacilityDefaultTM
            CostMultiplier = 1
            Tax = Defaults.FacilityDefaultTax
        End If

        Dim MMText As String = FormatPercent(1 - MaterialMultiplier, 1)
        Dim TMText As String = FormatPercent(1 - TimeMultiplier, 1)
        Dim TaxText As String = FormatPercent(Tax / 100, 1)

        ' Show boxes for the user to enter for outposts since I can't get the upgrades or taxes from CREST
        If FacilityType = OutpostFacility Then
            FacilityBonusLabel.Visible = False
            FacilityManualMELabel.Visible = True
            FacilityManualTELabel.Visible = True
            FacilityManualTaxLabel.Visible = True
            FacilityManualMEText.Visible = True
            FacilityManualTEText.Visible = True
            FacilityManualTaxText.Visible = True
            FacilityManualMEText.Text = MMText
            FacilityManualTEText.Text = TMText
            FacilityManualTaxText.Text = TaxText
            FacilityTaxRateLabel.Text = ""
            FacilityTaxRateLabel.Visible = False
        Else
            FacilityBonusLabel.Visible = True
            FacilityManualMELabel.Visible = False
            FacilityManualTELabel.Visible = False
            FacilityManualTaxLabel.Visible = False
            FacilityManualMEText.Visible = False
            FacilityManualTEText.Visible = False
            FacilityManualTaxText.Visible = False

            FacilityBonusLabel.Text = "ME: " & MMText & " TE: " & TMText
            FacilityTaxRateLabel.Text = "Tax: " & FormatPercent(Tax, 1)
            FacilityTaxRateLabel.Visible = True
        End If

        ' Now that we have everything, load the full facility into the appropriate selected facility to use later
        With SelectedFacility
            .FacilityName = FacilityName
            Select Case Activity
                Case ActivityManufacturing, ActivityComponentManufacturing, ActivityCapComponentManufacturing
                    .ActivityID = IndustryActivities.Manufacturing
                Case ActivityCopying
                    .ActivityID = IndustryActivities.Copying
                Case ActivityInvention
                    .ActivityID = IndustryActivities.Invention
            End Select

            .ActivityCostPerSecond = 0
            .FacilityType = FacilityType
            .MaterialMultiplier = MaterialMultiplier
            .TimeMultiplier = TimeMultiplier
            .RegionName = FacilityRegionCombo.Text
            .SolarSystemName = FacilitySystemCombo.Text
            .ProductionType = ProductionType
            ChangingUsageChecks = True
            .IncludeActivityUsage = FacilityUsageCheckValue ' Use this value when loading from Load Facility (using the selected facility) or from the form dropdown (use the checkbox)
            ChangingUsageChecks = False
            .TaxRate = Tax

            If Not IsNothing(ActivityCostCheck) Then
                .IncludeActivityCost = ActivityCostCheck.Checked
            Else
                .IncludeActivityTime = False
            End If

            If Not IsNothing(ActivityTimeCheck) Then
                .IncludeActivityTime = ActivityTimeCheck.Checked
            Else
                .IncludeActivityTime = False
            End If

            If FacilityType <> None Then
                ' Quick look up for the solarsystemid and region id, Strip off the system index first
                Dim SystemName As String = .SolarSystemName.Substring(0, InStr(.SolarSystemName, "(") - 2)
                SQL = "SELECT solarSystemID, regionID FROM SOLAR_SYSTEMS WHERE solarSystemName = '" & FormatDBString(SystemName) & "'"

                DBCommand = New SQLiteCommand(SQL, DB)
                rsLoader = DBCommand.ExecuteReader
                rsLoader.Read()

                .SolarSystemID = rsLoader.GetInt64(0)
                .RegionID = rsLoader.GetInt64(1)
                rsLoader.Close()

                ' Now look up the cost index 
                If FacilityType <> POSFacility Then
                    SQL = "SELECT COST_INDEX FROM STATION_FACILITIES WHERE FACILITY_NAME = '" & FormatDBString(FacilityName) & "'"
                    SQL = SQL & "AND ACTIVITY_ID = " & .ActivityID & " "
                Else
                    SQL = "SELECT COST_INDEX FROM ASSEMBLY_ARRAYS, INDUSTRY_SYSTEMS_COST_INDICIES "
                    SQL = SQL & "WHERE ASSEMBLY_ARRAYS.ACTIVITY_ID = INDUSTRY_SYSTEMS_COST_INDICIES.ACTIVITY_ID "
                    SQL = SQL & "AND INDUSTRY_SYSTEMS_COST_INDICIES.SOLAR_SYSTEM_ID = " & .SolarSystemID & " "
                    SQL = SQL & "AND INDUSTRY_SYSTEMS_COST_INDICIES.ACTIVITY_ID = " & .ActivityID & " "
                End If

                DBCommand = New SQLiteCommand(SQL, DB)
                rsLoader = DBCommand.ExecuteReader

                If rsLoader.Read() Then
                    .CostIndex = rsLoader.GetDouble(0)
                Else
                    .CostIndex = 0
                End If

                rsLoader.Close()
            Else
                .SolarSystemID = 0
                .RegionID = 0
                .CostIndex = 0
            End If
        End With

        Call SetFacilityandDefault(SelectedFacility, ProductionType, Tab, FacilityType, FacilityCombo, _
                                   FacilityDefaultLabel, FacilitySaveButton, CompareCostCheck, CompareTimeCheck)

        ' Make sure the usage check is now enabled
        If FacilityType <> None Then
            FacilityUsageCheck.Enabled = True
        End If

        FacilityLoaded = True
        If Tab = CalcTab Then
            Call ResetRefresh()
        End If

        Application.DoEvents()

    End Sub

    ' Sets the sent facility to the one we are selecting and sets the default 
    Private Sub SetFacilityandDefault(ByVal SelectedFacility As IndustryFacility, ProductionType As IndustryType, Tab As String, _
                                      ByRef FacilityType As String, ByRef FacilityCombo As ComboBox, _
                                      ByRef FacilityDefaultLabel As Label, ByRef FacilitySaveButton As Button, _
                                      ByVal CompareIncludeCostCheck As Boolean, _
                                      ByVal CompareIncludeTimeCheck As Boolean)
        ' For checking change from stations to pos on bp tab
        Dim PreviousFacility As New IndustryFacility

        ' Based on the type of activity, set the selected facility for that type
        If Tab = BPTab Then
            Select Case ProductionType
                Case IndustryType.Manufacturing
                    PreviousFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPManufacturingFacility = CType(SelectedFacility.Clone, IndustryFacility)
                    ' Set the other three types for pos too
                    If SelectedFacility.FacilityType = POSFacility Then
                        SelectedFacility.FacilityName = SelectedBPPOSFuelBlockFacility.FacilityName
                        SelectedFacility.FacilityType = SelectedBPPOSFuelBlockFacility.FacilityType
                        SelectedBPPOSFuelBlockFacility = CType(SelectedFacility.Clone, IndustryFacility)

                        SelectedFacility.FacilityName = SelectedBPPOSLargeShipFacility.FacilityName
                        SelectedFacility.FacilityType = SelectedBPPOSLargeShipFacility.FacilityType
                        SelectedBPPOSLargeShipFacility = CType(SelectedFacility.Clone, IndustryFacility)

                        SelectedFacility.FacilityName = SelectedBPPOSModuleFacility.FacilityName
                        SelectedFacility.FacilityType = SelectedBPPOSModuleFacility.FacilityType
                        SelectedBPPOSModuleFacility = CType(SelectedFacility.Clone, IndustryFacility)
                    End If
                    If SelectedBPManufacturingFacility.IsEqual(DefaultBPManufacturingFacility) Then
                        SelectedBPManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.POSFuelBlockManufacturing
                    PreviousFacility = CType(SelectedBPPOSFuelBlockFacility.Clone, IndustryFacility)
                    SelectedBPPOSFuelBlockFacility = SelectedFacility
                    SelectedBPManufacturingFacility = SelectedFacility ' This is also the default POS for everything else, so save
                    If SelectedBPPOSFuelBlockFacility.IsEqual(DefaultBPPOSFuelBlockFacility) Then
                        SelectedBPPOSFuelBlockFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPPOSFuelBlockFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.POSLargeShipManufacturing
                    PreviousFacility = CType(SelectedBPPOSLargeShipFacility.Clone, IndustryFacility)
                    SelectedBPPOSLargeShipFacility = SelectedFacility
                    SelectedBPManufacturingFacility = SelectedFacility ' This is also the default POS for everything else, so save
                    If SelectedBPPOSLargeShipFacility.IsEqual(DefaultBPPOSLargeShipFacility) Then
                        SelectedBPPOSLargeShipFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPPOSLargeShipFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.POSModuleManufacturing
                    PreviousFacility = CType(SelectedBPPOSModuleFacility.Clone, IndustryFacility)
                    SelectedBPPOSModuleFacility = SelectedFacility
                    SelectedBPManufacturingFacility = SelectedFacility ' This is also the default POS for everything else, so save
                    If SelectedBPPOSModuleFacility.IsEqual(DefaultBPPOSModuleFacility) Then
                        SelectedBPPOSModuleFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPPOSModuleFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.BoosterManufacturing
                    PreviousFacility = CType(SelectedBPBoosterManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPBoosterManufacturingFacility = SelectedFacility
                    If SelectedBPBoosterManufacturingFacility.IsEqual(DefaultBPBoosterManufacturingFacility) Then
                        SelectedBPBoosterManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPBoosterManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.CapitalManufacturing
                    PreviousFacility = CType(SelectedBPCapitalManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPCapitalManufacturingFacility = SelectedFacility
                    If SelectedBPCapitalManufacturingFacility.IsEqual(DefaultBPCapitalManufacturingFacility) Then
                        SelectedBPCapitalManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPCapitalManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.SuperManufacturing
                    PreviousFacility = CType(SelectedBPSuperManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPSuperManufacturingFacility = SelectedFacility
                    If SelectedBPSuperManufacturingFacility.IsEqual(DefaultBPSuperManufacturingFacility) Then
                        SelectedBPSuperManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPSuperManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.T3CruiserManufacturing
                    PreviousFacility = CType(SelectedBPT3CruiserManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPT3CruiserManufacturingFacility = SelectedFacility
                    If SelectedBPT3CruiserManufacturingFacility.IsEqual(DefaultBPT3CruiserManufacturingFacility) Then
                        SelectedBPT3CruiserManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPT3CruiserManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.T3DestroyerManufacturing
                    PreviousFacility = CType(SelectedBPT3DestroyerManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPT3DestroyerManufacturingFacility = SelectedFacility
                    If SelectedBPT3DestroyerManufacturingFacility.IsEqual(DefaultBPT3DestroyerManufacturingFacility) Then
                        SelectedBPT3DestroyerManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPT3DestroyerManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.SubsystemManufacturing
                    PreviousFacility = CType(SelectedBPSubsystemManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPSubsystemManufacturingFacility = SelectedFacility
                    If SelectedBPSubsystemManufacturingFacility.IsEqual(DefaultBPSubsystemManufacturingFacility) Then
                        SelectedBPSubsystemManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPSubsystemManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.ComponentManufacturing
                    PreviousFacility = CType(SelectedBPComponentManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPComponentManufacturingFacility = SelectedFacility
                    If SelectedBPComponentManufacturingFacility.IsEqual(DefaultBPComponentManufacturingFacility) Then
                        SelectedBPComponentManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPComponentManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.CapitalComponentManufacturing
                    PreviousFacility = CType(SelectedBPCapitalComponentManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPCapitalComponentManufacturingFacility = SelectedFacility
                    If SelectedBPCapitalComponentManufacturingFacility.IsEqual(DefaultBPCapitalComponentManufacturingFacility) Then
                        SelectedBPCapitalComponentManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPCapitalComponentManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.Invention
                    PreviousFacility = CType(SelectedBPInventionFacility.Clone, IndustryFacility)
                    SelectedBPInventionFacility = SelectedFacility
                    If SelectedBPInventionFacility.IsEqual(DefaultBPInventionFacility, CompareIncludeCostCheck, CompareIncludeTimeCheck) Then
                        SelectedBPInventionFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPInventionFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.T3Invention
                    PreviousFacility = CType(SelectedBPT3InventionFacility.Clone, IndustryFacility)
                    SelectedBPT3InventionFacility = SelectedFacility
                    If SelectedBPT3InventionFacility.IsEqual(DefaultBPT3InventionFacility, CompareIncludeCostCheck, CompareIncludeTimeCheck) Then
                        SelectedBPT3InventionFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPT3InventionFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.Copying
                    PreviousFacility = CType(SelectedBPCopyFacility.Clone, IndustryFacility)
                    SelectedBPCopyFacility = SelectedFacility
                    If SelectedBPCopyFacility.IsEqual(DefaultBPCopyFacility, CompareIncludeCostCheck, CompareIncludeTimeCheck) Then
                        SelectedBPCopyFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPCopyFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.NoPOSManufacturing
                    PreviousFacility = CType(SelectedBPNoPOSFacility.Clone, IndustryFacility)
                    SelectedBPNoPOSFacility = SelectedFacility
                    If SelectedBPNoPOSFacility.IsEqual(DefaultBPNoPOSFacility) Then
                        SelectedBPNoPOSFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPNoPOSFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case Else
                    PreviousFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)
                    SelectedBPManufacturingFacility = SelectedFacility
                    If SelectedBPManufacturingFacility.IsEqual(DefaultBPManufacturingFacility) Then
                        SelectedBPManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedBPManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
            End Select
        Else
            Select Case ProductionType
                Case IndustryType.Manufacturing
                    SelectedCalcBaseManufacturingFacility = SelectedFacility
                    If SelectedCalcBaseManufacturingFacility.IsEqual(DefaultCalcBaseManufacturingFacility) Then
                        SelectedCalcBaseManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcBaseManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.POSFuelBlockManufacturing
                    SelectedCalcPOSFuelBlockFacility = SelectedFacility
                    If SelectedCalcPOSFuelBlockFacility.IsEqual(DefaultCalcPOSFuelBlockFacility) And DefaultCalcBaseManufacturingFacility.FacilityType = POSFacility Then
                        SelectedCalcPOSFuelBlockFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcPOSFuelBlockFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.POSLargeShipManufacturing
                    SelectedCalcPOSLargeShipFacility = SelectedFacility
                    If SelectedCalcPOSLargeShipFacility.IsEqual(DefaultCalcPOSLargeShipFacility) And DefaultCalcBaseManufacturingFacility.FacilityType = POSFacility Then
                        SelectedCalcPOSLargeShipFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcPOSLargeShipFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.POSModuleManufacturing
                    SelectedCalcPOSModuleFacility = SelectedFacility
                    If SelectedCalcPOSModuleFacility.IsEqual(DefaultCalcPOSModuleFacility) And DefaultCalcBaseManufacturingFacility.FacilityType = POSFacility Then
                        SelectedCalcPOSModuleFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcPOSModuleFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.BoosterManufacturing
                    SelectedCalcBoosterManufacturingFacility = SelectedFacility
                    If SelectedCalcBoosterManufacturingFacility.IsEqual(DefaultCalcBoosterManufacturingFacility) Then
                        SelectedCalcBoosterManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcBoosterManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.CapitalManufacturing
                    SelectedCalcCapitalManufacturingFacility = SelectedFacility
                    If SelectedCalcCapitalManufacturingFacility.IsEqual(DefaultCalcCapitalManufacturingFacility) Then
                        SelectedCalcCapitalManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcCapitalManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.SuperManufacturing
                    SelectedCalcSuperManufacturingFacility = SelectedFacility
                    If SelectedCalcSuperManufacturingFacility.IsEqual(DefaultCalcSuperManufacturingFacility) Then
                        SelectedCalcSuperManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcSuperManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.T3CruiserManufacturing
                    SelectedCalcT3CruiserManufacturingFacility = SelectedFacility
                    If SelectedCalcT3CruiserManufacturingFacility.IsEqual(DefaultCalcT3CruiserManufacturingFacility) Then
                        SelectedCalcT3CruiserManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcT3CruiserManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.T3DestroyerManufacturing
                    SelectedCalcT3DestroyerManufacturingFacility = SelectedFacility
                    If SelectedCalcT3DestroyerManufacturingFacility.IsEqual(DefaultCalcT3DestroyerManufacturingFacility) Then
                        SelectedCalcT3DestroyerManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcT3DestroyerManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.SubsystemManufacturing
                    SelectedCalcSubsystemManufacturingFacility = SelectedFacility
                    If SelectedCalcSubsystemManufacturingFacility.IsEqual(DefaultCalcSubsystemManufacturingFacility) Then
                        SelectedCalcSubsystemManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcSubsystemManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.ComponentManufacturing
                    SelectedCalcComponentManufacturingFacility = SelectedFacility
                    If SelectedCalcComponentManufacturingFacility.IsEqual(DefaultCalcComponentManufacturingFacility) Then
                        SelectedCalcComponentManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcComponentManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.CapitalComponentManufacturing
                    SelectedCalcCapitalComponentManufacturingFacility = SelectedFacility
                    If SelectedCalcCapitalComponentManufacturingFacility.IsEqual(DefaultCalcCapitalComponentManufacturingFacility) Then
                        SelectedCalcCapitalComponentManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcCapitalComponentManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.Invention
                    SelectedCalcInventionFacility = SelectedFacility
                    If SelectedCalcInventionFacility.IsEqual(DefaultCalcInventionFacility, CompareIncludeCostCheck, CompareIncludeTimeCheck) Then
                        SelectedCalcInventionFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcInventionFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.T3Invention
                    SelectedCalcT3InventionFacility = SelectedFacility
                    If SelectedCalcT3InventionFacility.IsEqual(DefaultCalcT3InventionFacility, CompareIncludeCostCheck, CompareIncludeTimeCheck) Then
                        SelectedCalcT3InventionFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcT3InventionFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.Copying
                    SelectedCalcCopyFacility = SelectedFacility
                    If SelectedCalcCopyFacility.IsEqual(DefaultCalcCopyFacility, CompareIncludeCostCheck, CompareIncludeTimeCheck) Then
                        SelectedCalcCopyFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcCopyFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case IndustryType.NoPOSManufacturing
                    SelectedCalcNoPOSFacility = SelectedFacility
                    If SelectedCalcNoPOSFacility.IsEqual(DefaultCalcNoPOSFacility) Then
                        SelectedCalcNoPOSFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcNoPOSFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
                Case Else
                    SelectedCalcBaseManufacturingFacility = SelectedFacility
                    If SelectedCalcBaseManufacturingFacility.IsEqual(DefaultCalcBaseManufacturingFacility) Then
                        SelectedCalcBaseManufacturingFacility.IsDefault = True
                        SelectedFacility.IsDefault = True
                    Else
                        SelectedCalcBaseManufacturingFacility.IsDefault = False
                        SelectedFacility.IsDefault = False
                    End If
            End Select
        End If

        ' Set the default 
        If SelectedFacility.IsDefault = True Then 'Or (FacilityType = POSFacility And FacilityCombo.Items.Count = 1 And Tab = BPTab _
            'And PreviousFacility.FacilityType = SelectedFacility.FacilityType _
            'And PreviousFacility.SolarSystemName = SelectedFacility.SolarSystemName _
            'And PreviousFacility.RegionName = SelectedFacility.RegionName _
            'And PreviousFacility.IncludeActivityUsage = SelectedFacility.IncludeActivityUsage) Then
            FacilityDefaultLabel.ForeColor = SystemColors.Highlight
            Call ResetToolTipforDefaultFacilityLabel(FacilityDefaultLabel, False)
            FacilitySaveButton.Enabled = False ' don't enable since it's already the default, it's pointless to save it
        Else
            FacilityDefaultLabel.ForeColor = SystemColors.ButtonShadow
            Call ResetToolTipforDefaultFacilityLabel(FacilityDefaultLabel, True)
            FacilitySaveButton.Enabled = True
        End If

    End Sub

    ' Returns the SQL string for querying by category or group id's 
    Private Function GetFacilityCatGroupIDSQL(ByVal CategoryID As Integer, ByVal GroupID As Integer, ByVal Activity As IndustryActivities) As String
        Dim SQL As String = ""
        Dim TempGroupID As Integer
        Dim TempCategoryID As Integer

        ' If the categoryID or groupID is for T3 invention, then switch the item ID's to the blueprint groupID for that item to match CCP's logic in table
        If Activity = IndustryActivities.Invention Then
            If CategoryID = SubsystemCategoryID Then
                TempGroupID = SubsystemBPGroupID
                TempCategoryID = 0
            ElseIf GroupID = StrategicCruiserGroupID Then
                TempGroupID = StrategicCruiserBPGroupID
                TempCategoryID = 0
            ElseIf GroupID = TacticalDestroyerGroupID Then
                TempGroupID = TacticalDestroyerBPGroupID
                TempCategoryID = 0
            Else
                TempGroupID = GroupID
                TempCategoryID = CategoryID
            End If
        Else
            TempGroupID = GroupID
            TempCategoryID = CategoryID
        End If

        SQL = "AND (GROUP_ID = " & CStr(TempGroupID) & " OR (GROUP_ID = 0 AND CATEGORY_ID = " & CStr(TempCategoryID) & ")) "

        Return SQL

    End Function

    ' Hides all the facility bonus boxes and such
    Private Sub HideFacilityBonusBoxes(ByRef LabelBonus As Label, LabelTaxRate As Label, ByRef LabelME As Label, _
                                       ByRef LabelTE As Label, ByRef TextME As TextBox, ByRef TextTE As TextBox, _
                                       ByRef LabelTax As Label, ByRef TextTax As TextBox, _
                                       Optional ByRef UsageLabel As Label = Nothing)
        LabelBonus.Visible = False
        LabelTaxRate.Visible = False
        LabelME.Visible = False
        LabelTE.Visible = False
        TextME.Visible = False
        TextTE.Visible = False
        LabelTax.Visible = False
        TextTax.Visible = False
        ' Clear the usage until these are set
        If Not IsNothing(UsageLabel) Then
            UsageLabel.Text = ""
        End If

    End Sub

    ' Sets all the combos to unenabled and base text to show no facility for stuff like Invention, Copy and RE where they might buy the item
    Private Sub SetNoFacility(ByRef RegionCombo As ComboBox, ByRef SystemCombo As ComboBox, ByRef FacilityorArray As ComboBox, _
                              ByRef CheckUsage As CheckBox, Optional IncludeCostCheck As CheckBox = Nothing, _
                              Optional IncludeTimeCheck As CheckBox = Nothing, Optional IncludeLabel As Label = Nothing)
        RegionCombo.Items.Clear()
        RegionCombo.Text = "Select Region"
        RegionCombo.Enabled = False
        SystemCombo.Items.Clear()
        SystemCombo.Text = "Select System"
        SystemCombo.Enabled = False
        FacilityorArray.Items.Clear()
        FacilityorArray.Text = "Select Facility / Array"
        CheckUsage.Enabled = False

        If Not IsNothing(IncludeCostCheck) Then
            IncludeCostCheck.Enabled = False
        End If
        If Not IsNothing(IncludeTimeCheck) Then
            IncludeTimeCheck.Enabled = False
        End If
        FacilityorArray.Enabled = False
        If Not IsNothing(IncludeLabel) Then
            IncludeLabel.Enabled = False
        End If
    End Sub

    ' Sets the default based on the cost check change
    Private Sub SetDefaultFacilitybyCheck(ProductionType As IndustryType, IncludeUsageCheck As CheckBox, Tab As String, _
                                          FacilityType As String, FacilityArrayCombo As ComboBox, FacilityDefaultLabel As Label, _
                                          FacilitySaveButton As Button, Optional IncludeCostCheck As CheckBox = Nothing, _
                                          Optional IncludeTimeCheck As CheckBox = Nothing)
        Dim SelectedFacility As IndustryFacility
        Dim CompareTime As Boolean = False
        Dim CompareCost As Boolean = False

        If Tab = BPTab Then
            Select Case ProductionType
                Case IndustryType.Manufacturing
                    SelectedFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.POSFuelBlockManufacturing
                    SelectedFacility = CType(SelectedBPPOSFuelBlockFacility, IndustryFacility)
                Case IndustryType.POSLargeShipManufacturing
                    SelectedFacility = CType(SelectedBPPOSLargeShipFacility, IndustryFacility)
                Case IndustryType.POSModuleManufacturing
                    SelectedFacility = CType(SelectedBPPOSModuleFacility, IndustryFacility)
                Case IndustryType.BoosterManufacturing
                    SelectedFacility = CType(SelectedBPBoosterManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.CapitalManufacturing
                    SelectedFacility = CType(SelectedBPCapitalManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.SuperManufacturing
                    SelectedFacility = CType(SelectedBPSuperManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.T3CruiserManufacturing
                    SelectedFacility = CType(SelectedBPT3CruiserManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.T3DestroyerManufacturing
                    SelectedFacility = CType(SelectedBPT3DestroyerManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.SubsystemManufacturing
                    SelectedFacility = CType(SelectedBPSubsystemManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.ComponentManufacturing
                    SelectedFacility = CType(SelectedBPComponentManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.CapitalComponentManufacturing
                    SelectedFacility = CType(SelectedBPCapitalComponentManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.Invention
                    SelectedFacility = CType(SelectedBPInventionFacility, IndustryFacility)
                Case IndustryType.T3Invention
                    SelectedFacility = CType(SelectedBPT3InventionFacility, IndustryFacility)
                Case IndustryType.Copying
                    SelectedFacility = CType(SelectedBPCopyFacility, IndustryFacility)
                Case IndustryType.NoPOSManufacturing
                    SelectedFacility = CType(SelectedBPNoPOSFacility, IndustryFacility)
                Case Else
                    SelectedFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)
            End Select
        Else
            Select Case ProductionType
                Case IndustryType.Manufacturing
                    SelectedFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.POSFuelBlockManufacturing
                    SelectedFacility = CType(SelectedCalcPOSFuelBlockFacility, IndustryFacility)
                Case IndustryType.POSLargeShipManufacturing
                    SelectedFacility = CType(SelectedCalcPOSLargeShipFacility, IndustryFacility)
                Case IndustryType.POSModuleManufacturing
                    SelectedFacility = CType(SelectedCalcPOSModuleFacility, IndustryFacility)
                Case IndustryType.BoosterManufacturing
                    SelectedFacility = CType(SelectedCalcBoosterManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.CapitalManufacturing
                    SelectedFacility = CType(SelectedCalcCapitalManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.SuperManufacturing
                    SelectedFacility = CType(SelectedCalcSuperManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.T3CruiserManufacturing
                    SelectedFacility = CType(SelectedCalcT3CruiserManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.T3DestroyerManufacturing
                    SelectedFacility = CType(SelectedCalcT3DestroyerManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.SubsystemManufacturing
                    SelectedFacility = CType(SelectedCalcSubsystemManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.CapitalComponentManufacturing
                    SelectedFacility = CType(SelectedCalcCapitalComponentManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.ComponentManufacturing
                    SelectedFacility = CType(SelectedCalcComponentManufacturingFacility.Clone, IndustryFacility)
                Case IndustryType.Invention
                    SelectedFacility = CType(SelectedCalcInventionFacility, IndustryFacility)
                Case IndustryType.T3Invention
                    SelectedFacility = CType(SelectedCalcT3InventionFacility, IndustryFacility)
                Case IndustryType.Copying
                    SelectedFacility = CType(SelectedCalcCopyFacility, IndustryFacility)
                Case IndustryType.NoPOSManufacturing
                    SelectedFacility = CType(SelectedCalcNoPOSFacility, IndustryFacility)
                Case Else
                    SelectedFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)
            End Select
        End If

        SelectedFacility.IncludeActivityUsage = IncludeUsageCheck.Checked

        If Not IsNothing(IncludeCostCheck) Then
            SelectedFacility.IncludeActivityCost = IncludeCostCheck.Checked
            CompareCost = True
        Else
            CompareCost = False
        End If

        If Not IsNothing(IncludeTimeCheck) Then
            SelectedFacility.IncludeActivityTime = IncludeTimeCheck.Checked
            CompareTime = True
        Else
            ' Don't compare this value
            CompareTime = False
        End If

        ' Set the default based on the checkbox 
        Call SetFacilityandDefault(SelectedFacility, ProductionType, Tab, FacilityType, FacilityArrayCombo, _
                                   FacilityDefaultLabel, FacilitySaveButton, CompareCost, CompareTime)

    End Sub

    ' Sets the tool tip text for default facility labels if they can double click to reload
    Private Sub ResetToolTipforDefaultFacilityLabel(ByRef FacilityDefaultLabel As Label, ByVal ShowTip As Boolean)
        If ShowTip And UserApplicationSettings.ShowToolTips Then
            ttMain.SetToolTip(FacilityDefaultLabel, "Double-Click to reload default facility")
        Else
            ttMain.SetToolTip(FacilityDefaultLabel, "")
        End If
    End Sub

#End Region

    ' Keypress, Keyup, and Lost focus functions for manual ME/TE/Tax boxes
    Private Sub OutpostMETETaxText_KeyPress(e As System.Windows.Forms.KeyPressEventArgs)
        ' only let them enter the right things
        If e.KeyChar <> ControlChars.Back Then
            If allowedMETEChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
                Exit Sub
            End If
        End If
    End Sub

    Private Sub OutpostMETETaxText_KeyUp(ByVal UpdateType As String, ByRef ManualTextBox As TextBox, ByRef SelectedFacility As IndustryFacility, _
                                         ByRef FacilityTypeCombo As ComboBox, ByRef SaveButton As Button, ByRef DefaultLabel As Label)
        Dim Temp As String
        Dim TempValue As Double

        ' Get rid of the percent sign if it exists
        Temp = Replace(ManualTextBox.Text, "%", "")

        If Not IsNumeric(Temp) Then
            Temp = "0.0"
            ManualTextBox.Text = "0.0%"
        End If

        TempValue = (100 - CDbl(Temp)) / 100

        ' If it's an outpost, then save the ME/TE/Tax for this in the current facility
        If FacilityTypeCombo.Text = OutpostFacility Then
            If UpdateType = "ME" Then
                SelectedFacility.MaterialMultiplier = TempValue
            ElseIf UpdateType = "TE" Then
                SelectedFacility.TimeMultiplier = TempValue
            Else
                SelectedFacility.TaxRate = CDbl(TempValue)
            End If

        End If

        ' They changed the value, so enable save
        SaveButton.Enabled = True
        ' changed so not the default
        DefaultLabel.Visible = False

    End Sub

    Private Sub OutpostMETETaxText_LostFocus(ByRef ManualTextBox As TextBox, ByRef FacilityTypeCombo As ComboBox, _
                                             ByRef MaterialMultiplier As Double, ByVal BPTab As Boolean)
        If Trim(Replace(ManualTextBox.Text, "%", "")) = "" And FacilityTypeCombo.Text = OutpostFacility Then
            ManualTextBox.Text = FormatPercent(MaterialMultiplier, 1)
        End If

        If Not ManualTextBox.Text.Contains("%") Then
            ' Format with percent sign
            ManualTextBox.Text = FormatPercent(CDbl(ManualTextBox.Text) / 100, 1)
        End If

        If BPTab Then
            Call RefreshBP(True)
        End If
    End Sub

    ' Loads all the facilities
    Private Sub SetAllFacilities(LoadDefault As Boolean)

        If Not LoadDefault Then
            ' Need to set the settings for each based on the current selected facility then load it from that
            Call SelectedBPManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedBPManufacturingFacility, LoadDefault)
            Call SelectedBPCapitalManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedBPCapitalManufacturingFacility, LoadDefault)
            Call SelectedBPSuperManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedBPSuperManufacturingFacility, LoadDefault)
            Call SelectedBPT3CruiserManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedBPT3CruiserManufacturingFacility, LoadDefault)
            Call SelectedBPT3DestroyerManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedBPT3DestroyerManufacturingFacility, LoadDefault)
            Call SelectedBPBoosterManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedBPBoosterManufacturingFacility, LoadDefault)
            Call SelectedBPSubsystemManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedBPSubsystemManufacturingFacility, LoadDefault)
            Call SelectedBPComponentManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedBPComponentManufacturingFacility, LoadDefault)
            Call SelectedBPCapitalComponentManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedBPCapitalComponentManufacturingFacility, LoadDefault)
            Call SelectedBPCopyFacility.LoadFacilitySettingsfromFacility(SelectedBPCopyFacility, LoadDefault)
            Call SelectedBPInventionFacility.LoadFacilitySettingsfromFacility(SelectedBPInventionFacility, LoadDefault)
            Call SelectedBPT3InventionFacility.LoadFacilitySettingsfromFacility(SelectedBPT3InventionFacility, LoadDefault)
            Call SelectedBPNoPOSFacility.LoadFacilitySettingsfromFacility(SelectedBPNoPOSFacility, LoadDefault)

            ' Load these as special cases
            Call SelectedBPPOSFuelBlockFacility.LoadFacilitySettingsfromFacility(SelectedBPPOSFuelBlockFacility, LoadDefault)
            Call SelectedBPPOSLargeShipFacility.LoadFacilitySettingsfromFacility(SelectedBPPOSLargeShipFacility, LoadDefault)
            Call SelectedBPPOSModuleFacility.LoadFacilitySettingsfromFacility(SelectedBPPOSModuleFacility, LoadDefault)

            ' Load up the Manufacturing Tab facilities
            Call SelectedCalcBaseManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedCalcBaseManufacturingFacility, LoadDefault)
            Call SelectedCalcCapitalManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedCalcCapitalManufacturingFacility, LoadDefault)
            Call SelectedCalcSuperManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedCalcSuperManufacturingFacility, LoadDefault)
            Call SelectedCalcT3CruiserManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedCalcT3CruiserManufacturingFacility, LoadDefault)
            Call SelectedCalcT3DestroyerManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedCalcT3DestroyerManufacturingFacility, LoadDefault)
            Call SelectedCalcBoosterManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedCalcBoosterManufacturingFacility, LoadDefault)
            Call SelectedCalcSubsystemManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedCalcSubsystemManufacturingFacility, LoadDefault)
            Call SelectedCalcComponentManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedCalcComponentManufacturingFacility, LoadDefault)
            Call SelectedCalcCapitalComponentManufacturingFacility.LoadFacilitySettingsfromFacility(SelectedCalcCapitalComponentManufacturingFacility, LoadDefault)
            Call SelectedCalcCopyFacility.LoadFacilitySettingsfromFacility(SelectedCalcCopyFacility, LoadDefault)
            Call SelectedCalcInventionFacility.LoadFacilitySettingsfromFacility(SelectedCalcInventionFacility, LoadDefault)
            Call SelectedCalcT3InventionFacility.LoadFacilitySettingsfromFacility(SelectedCalcT3InventionFacility, LoadDefault)
            Call SelectedCalcNoPOSFacility.LoadFacilitySettingsfromFacility(SelectedCalcNoPOSFacility, LoadDefault)
            Call SelectedCalcPOSFuelBlockFacility.LoadFacilitySettingsfromFacility(SelectedCalcPOSFuelBlockFacility, LoadDefault)
            Call SelectedCalcPOSLargeShipFacility.LoadFacilitySettingsfromFacility(SelectedCalcPOSLargeShipFacility, LoadDefault)
            Call SelectedCalcPOSModuleFacility.LoadFacilitySettingsfromFacility(SelectedCalcPOSModuleFacility, LoadDefault)

        Else
            Call SelectedBPManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.Manufacturing, BPTab), LoadDefault)
            DefaultBPManufacturingFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)
            Call SelectedBPCapitalManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.CapitalManufacturing, BPTab), LoadDefault)
            DefaultBPCapitalManufacturingFacility = CType(SelectedBPCapitalManufacturingFacility.Clone, IndustryFacility)
            Call SelectedBPSuperManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.SuperManufacturing, BPTab), LoadDefault)
            DefaultBPSuperManufacturingFacility = CType(SelectedBPSuperManufacturingFacility.Clone, IndustryFacility)
            Call SelectedBPT3CruiserManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.T3CruiserManufacturing, BPTab), LoadDefault)
            DefaultBPT3CruiserManufacturingFacility = CType(SelectedBPT3CruiserManufacturingFacility.Clone, IndustryFacility)
            Call SelectedBPT3DestroyerManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.T3DestroyerManufacturing, BPTab), LoadDefault)
            DefaultBPT3DestroyerManufacturingFacility = CType(SelectedBPT3DestroyerManufacturingFacility.Clone, IndustryFacility)
            Call SelectedBPBoosterManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.BoosterManufacturing, BPTab), LoadDefault)
            DefaultBPBoosterManufacturingFacility = CType(SelectedBPBoosterManufacturingFacility.Clone, IndustryFacility)
            Call SelectedBPSubsystemManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.SubsystemManufacturing, BPTab), LoadDefault)
            DefaultBPSubsystemManufacturingFacility = CType(SelectedBPSubsystemManufacturingFacility.Clone, IndustryFacility)
            Call SelectedBPComponentManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.ComponentManufacturing, BPTab), LoadDefault)
            DefaultBPComponentManufacturingFacility = CType(SelectedBPComponentManufacturingFacility.Clone, IndustryFacility)
            Call SelectedBPCapitalComponentManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.CapitalComponentManufacturing, BPTab), LoadDefault)
            DefaultBPCapitalComponentManufacturingFacility = CType(SelectedBPCapitalComponentManufacturingFacility.Clone, IndustryFacility)
            Call SelectedBPCopyFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.Copying, BPTab), LoadDefault)
            DefaultBPCopyFacility = CType(SelectedBPCopyFacility.Clone, IndustryFacility)
            Call SelectedBPInventionFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.Invention, BPTab), LoadDefault)
            DefaultBPInventionFacility = CType(SelectedBPInventionFacility.Clone, IndustryFacility)
            Call SelectedBPT3InventionFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.T3Invention, BPTab), LoadDefault)
            DefaultBPT3InventionFacility = CType(SelectedBPT3InventionFacility.Clone, IndustryFacility)
            Call SelectedBPNoPOSFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.NoPOSManufacturing, BPTab), LoadDefault)
            DefaultBPNoPOSFacility = CType(SelectedBPNoPOSFacility.Clone, IndustryFacility)

            ' Load these as special cases
            Call SelectedBPPOSFuelBlockFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.POSFuelBlockManufacturing, BPTab), LoadDefault)
            DefaultBPPOSFuelBlockFacility = CType(SelectedBPPOSFuelBlockFacility.Clone, IndustryFacility)
            Call SelectedBPPOSLargeShipFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.POSLargeShipManufacturing, BPTab), LoadDefault)
            DefaultBPPOSLargeShipFacility = CType(SelectedBPPOSLargeShipFacility.Clone, IndustryFacility)
            Call SelectedBPPOSModuleFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.POSModuleManufacturing, BPTab), LoadDefault)
            DefaultBPPOSModuleFacility = CType(SelectedBPPOSModuleFacility.Clone, IndustryFacility)

            ' Load up the Manufacturing Tab facilities
            Call SelectedCalcBaseManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.Manufacturing, CalcTab), LoadDefault)
            DefaultCalcBaseManufacturingFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)
            Call SelectedCalcCapitalManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.CapitalManufacturing, CalcTab), LoadDefault)
            DefaultCalcCapitalManufacturingFacility = CType(SelectedCalcCapitalManufacturingFacility.Clone, IndustryFacility)
            Call SelectedCalcSuperManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.SuperManufacturing, CalcTab), LoadDefault)
            DefaultCalcSuperManufacturingFacility = CType(SelectedCalcSuperManufacturingFacility.Clone, IndustryFacility)
            Call SelectedCalcT3CruiserManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.T3CruiserManufacturing, CalcTab), LoadDefault)
            DefaultCalcT3CruiserManufacturingFacility = CType(SelectedCalcT3CruiserManufacturingFacility.Clone, IndustryFacility)
            Call SelectedCalcT3DestroyerManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.T3DestroyerManufacturing, CalcTab), LoadDefault)
            DefaultCalcT3DestroyerManufacturingFacility = CType(SelectedCalcT3DestroyerManufacturingFacility.Clone, IndustryFacility)
            Call SelectedCalcBoosterManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.BoosterManufacturing, CalcTab), LoadDefault)
            DefaultCalcBoosterManufacturingFacility = CType(SelectedCalcBoosterManufacturingFacility.Clone, IndustryFacility)
            Call SelectedCalcSubsystemManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.SubsystemManufacturing, CalcTab), LoadDefault)
            DefaultCalcSubsystemManufacturingFacility = CType(SelectedCalcSubsystemManufacturingFacility.Clone, IndustryFacility)
            Call SelectedCalcComponentManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.ComponentManufacturing, CalcTab), LoadDefault)
            DefaultCalcComponentManufacturingFacility = CType(SelectedCalcComponentManufacturingFacility.Clone, IndustryFacility)
            Call SelectedCalcCapitalComponentManufacturingFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.CapitalComponentManufacturing, CalcTab), LoadDefault)
            DefaultCalcCapitalComponentManufacturingFacility = CType(SelectedCalcCapitalComponentManufacturingFacility.Clone, IndustryFacility)
            Call SelectedCalcCopyFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.Copying, CalcTab), LoadDefault)
            DefaultCalcCopyFacility = CType(SelectedCalcCopyFacility.Clone, IndustryFacility)
            Call SelectedCalcInventionFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.Invention, CalcTab), LoadDefault)
            DefaultCalcInventionFacility = CType(SelectedCalcInventionFacility.Clone, IndustryFacility)
            Call SelectedCalcT3InventionFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.T3Invention, CalcTab), LoadDefault)
            DefaultCalcT3InventionFacility = CType(SelectedCalcT3InventionFacility.Clone, IndustryFacility)
            Call SelectedCalcNoPOSFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.NoPOSManufacturing, CalcTab), LoadDefault)
            DefaultCalcNoPOSFacility = CType(SelectedCalcNoPOSFacility.Clone, IndustryFacility)
            Call SelectedCalcPOSFuelBlockFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.POSFuelBlockManufacturing, CalcTab), LoadDefault)
            DefaultCalcPOSFuelBlockFacility = CType(SelectedCalcPOSFuelBlockFacility.Clone, IndustryFacility)
            Call SelectedCalcPOSLargeShipFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.POSLargeShipManufacturing, CalcTab), LoadDefault)
            DefaultCalcPOSLargeShipFacility = CType(SelectedCalcPOSLargeShipFacility.Clone, IndustryFacility)
            Call SelectedCalcPOSModuleFacility.LoadFacility(AllSettings.LoadFacilitySettings(IndustryType.POSModuleManufacturing, CalcTab), LoadDefault)
            DefaultCalcPOSModuleFacility = CType(SelectedCalcPOSModuleFacility.Clone, IndustryFacility)
        End If

    End Sub

    ' Loads all the teams
    Private Sub SetAllTeams(LoadDefault As Boolean)

        SelectedBPManufacturingTeam = NoTeam
        DefaultBPManufacturingTeam = SelectedBPManufacturingTeam
        SelectedBPComponentManufacturingTeam = NoTeam
        DefaultBPComponentManufacturingTeam = SelectedBPComponentManufacturingTeam
        SelectedBPCopyTeam = NoTeam
        DefaultBPCopyTeam = SelectedBPCopyTeam
        SelectedBPInventionTeam = NoTeam
        DefaultBPInventionTeam = SelectedBPInventionTeam

        SelectedCalcManufacturingTeam = NoTeam
        DefaultCalcManufacturingTeam = SelectedCalcManufacturingTeam
        SelectedCalcComponentManufacturingTeam = NoTeam
        DefaultCalcComponentManufacturingTeam = SelectedCalcComponentManufacturingTeam
        SelectedCalcCopyTeam = NoTeam
        DefaultCalcCopyTeam = SelectedCalcCopyTeam
        SelectedCalcInventionTeam = NoTeam
        DefaultCalcInventionTeam = SelectedCalcInventionTeam

        'If Not LoadDefault Then
        '    Call SelectedBPManufacturingTeam.LoadTeamFromSettings(LoadTeamSettingsfromTeam(SelectedBPManufacturingTeam, BPTab))
        '    Call SelectedBPComponentManufacturingTeam.LoadTeamFromSettings(LoadTeamSettingsfromTeam(SelectedBPComponentManufacturingTeam, BPTab))
        '    Call SelectedBPCopyTeam.LoadTeamFromSettings(LoadTeamSettingsfromTeam(SelectedBPCopyTeam, BPTab))
        '    Call SelectedBPInventionTeam.LoadTeamFromSettings(LoadTeamSettingsfromTeam(SelectedBPInventionTeam, BPTab))

        '    Call SelectedCalcManufacturingTeam.LoadTeamFromSettings(LoadTeamSettingsfromTeam(SelectedCalcManufacturingTeam, CalcTab))
        '    Call SelectedCalcComponentManufacturingTeam.LoadTeamFromSettings(LoadTeamSettingsfromTeam(SelectedCalcComponentManufacturingTeam, CalcTab))
        '    Call SelectedCalcCopyTeam.LoadTeamFromSettings(LoadTeamSettingsfromTeam(SelectedCalcCopyTeam, CalcTab))
        '    Call SelectedCalcInventionTeam.LoadTeamFromSettings(LoadTeamSettingsfromTeam(SelectedCalcInventionTeam, CalcTab))
        'Else
        '    Call SelectedBPManufacturingTeam.LoadTeamFromSettings(AllSettings.LoadTeamSettings(TeamType.Manufacturing, BPTab))
        '    DefaultBPManufacturingTeam = SelectedBPManufacturingTeam
        '    Call SelectedBPComponentManufacturingTeam.LoadTeamFromSettings(AllSettings.LoadTeamSettings(TeamType.ComponentManufacturing, BPTab))
        '    DefaultBPComponentManufacturingTeam = SelectedBPComponentManufacturingTeam
        '    Call SelectedBPCopyTeam.LoadTeamFromSettings(AllSettings.LoadTeamSettings(TeamType.Copy, BPTab))
        '    DefaultBPCopyTeam = SelectedBPCopyTeam
        '    Call SelectedBPInventionTeam.LoadTeamFromSettings(AllSettings.LoadTeamSettings(TeamType.Invention, BPTab))
        '    DefaultBPInventionTeam = SelectedBPInventionTeam

        '    Call SelectedCalcManufacturingTeam.LoadTeamFromSettings(AllSettings.LoadTeamSettings(TeamType.Manufacturing, CalcTab))
        '    DefaultCalcManufacturingTeam = SelectedCalcManufacturingTeam
        '    Call SelectedCalcComponentManufacturingTeam.LoadTeamFromSettings(AllSettings.LoadTeamSettings(TeamType.ComponentManufacturing, CalcTab))
        '    DefaultCalcComponentManufacturingTeam = SelectedCalcComponentManufacturingTeam
        '    Call SelectedCalcCopyTeam.LoadTeamFromSettings(AllSettings.LoadTeamSettings(TeamType.Copy, CalcTab))
        '    DefaultCalcCopyTeam = SelectedCalcCopyTeam
        '    Call SelectedCalcInventionTeam.LoadTeamFromSettings(AllSettings.LoadTeamSettings(TeamType.Invention, CalcTab))
        '    DefaultCalcInventionTeam = SelectedCalcInventionTeam
        'End If

    End Sub

    ' Loads the team settings from a current team
    Private Function LoadTeamSettingsfromTeam(SentTeam As IndustryTeam, SentTab As String) As TeamSettings
        Dim TempSettings As New TeamSettings

        With TempSettings
            .TeamID = SentTeam.TeamID
            .TeamTab = SentTab
        End With

        Return TempSettings

    End Function

    ' Sets the categories that must be made in a station/outpost
    Private Sub SetNoPOSGroupIDs()
        Dim SQL As String
        Dim rsCheck As SQLite.SQLiteDataReader

        NoPOSCategoryIDs = New List(Of Long)

        SQL = "SELECT DISTINCT INVENTORY_CATEGORIES.categoryID "
        SQL = SQL & "FROM INVENTORY_TYPES, INVENTORY_GROUPS, INVENTORY_CATEGORIES "
        SQL = SQL & "WHERE INVENTORY_TYPES.groupID = INVENTORY_GROUPS.groupID "
        SQL = SQL & "AND INVENTORY_GROUPS.categoryID = INVENTORY_CATEGORIES.categoryID "
        SQL = SQL & "AND INVENTORY_CATEGORIES.categoryID NOT IN (SELECT CATEGORY_ID FROM ASSEMBLY_ARRAYS) "
        SQL = SQL & "AND INVENTORY_GROUPS.groupID NOT IN (SELECT GROUP_ID FROM ASSEMBLY_ARRAYS) "
        SQL = SQL & "AND INVENTORY_TYPES.typeID IN (SELECT ITEM_ID FROM ALL_BLUEPRINTS) "

        DBCommand = New SQLiteCommand(SQL, DB)
        rsCheck = DBCommand.ExecuteReader

        While rsCheck.Read
            NoPOSCategoryIDs.Add(rsCheck.GetInt64(0))
        End While

    End Sub

    ' Returns the POS manufacturing facility for the type sent
    Private Function GetPOSManufacturingFacility(ByVal SentFacility As IndustryFacility, BPGroupID As Long, BPCategoryID As Long, _
                                                 Tab As String) As IndustryFacility
        Dim IndyType As IndustryType

        IndyType = GetProductionType(ActivityManufacturing, BPGroupID, BPCategoryID, POSFacility)

        If Tab = BPTab Then
            Select Case IndyType
                Case IndustryType.POSFuelBlockManufacturing
                    Return SelectedBPPOSFuelBlockFacility
                Case IndustryType.POSLargeShipManufacturing
                    Return SelectedBPPOSLargeShipFacility
                Case IndustryType.POSModuleManufacturing
                    Return SelectedBPPOSModuleFacility
                Case Else
                    Return SentFacility
            End Select
        Else
            Select Case IndyType
                Case IndustryType.POSFuelBlockManufacturing
                    Return SelectedCalcPOSFuelBlockFacility
                Case IndustryType.POSLargeShipManufacturing
                    Return SelectedCalcPOSLargeShipFacility
                Case IndustryType.POSModuleManufacturing
                    Return SelectedCalcPOSModuleFacility
                Case Else
                    Return SentFacility
            End Select
        End If

    End Function

    Private Sub frmMain_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load

        ' Add a mouse down handler for the blueprint tab to enable forward and back loading of bps from mouse
        AddHandler tabBlueprints.MouseDown, AddressOf MouseDownHandling
        MouseDownSetting(tabBlueprints)

    End Sub

    ' Adds mouse down handlers for all controls of the parent
    Private Sub MouseDownSetting(ByVal parentCtr As Control)
        Dim ctr As Control

        For Each ctr In parentCtr.Controls
            AddHandler ctr.MouseDown, AddressOf MouseDownHandling
            MouseDownSetting(ctr)
        Next

    End Sub

    ' Function to deal with mouse down events to load next or previous blueprint
    Private Sub MouseDownHandling(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)

        If e.Button = Windows.Forms.MouseButtons.XButton1 Then
            Call LoadPreviousBlueprint()
        ElseIf e.Button = Windows.Forms.MouseButtons.XButton2 Then
            Call LoadNextBlueprint()
        End If
    End Sub

    ' Loads a BP sent from a double click on shopping list or manufacturing list
    Public Sub LoadBPfromDoubleClick(BPID As Long, BuildType As String, Inputs As String, SentFrom As String, _
                                     BuildTeam As IndustryTeam, ComponentTeam As IndustryTeam, CopyTeam As IndustryTeam, _
                                     BuildFacility As IndustryFacility, ComponentFacility As IndustryFacility, _
                                     InventionFacility As IndustryFacility, CopyFacility As IndustryFacility, _
                                     IncludeTaxes As Boolean, IncludeFees As Boolean, _
                                     IncludeUsage As Boolean, MEValue As String, SentRuns As String, SentLines As String, NumBPs As String)
        Dim BPTech As Integer
        Dim BPDecryptor As New Decryptor
        Dim DecryptorName As String = None

        Dim readerBP As SQLiteDataReader
        Dim readerRelic As SQLiteDataReader
        Dim SQL As String

        Dim TempLines As Integer

        ' If sent from shopping list, they won't have the lines
        If SentLines = "0" Then
            TempLines = CInt(txtBPLines.Text)
        Else
            TempLines = CInt(SentLines)
        End If

        SQL = "SELECT BLUEPRINT_NAME, TECH_LEVEL, ITEM_GROUP_ID, ITEM_CATEGORY_ID FROM ALL_BLUEPRINTS WHERE BLUEPRINT_ID = " & BPID

        DBCommand = New SQLiteCommand(SQL, DB)
        readerBP = DBCommand.ExecuteReader

        readerBP.Read()
        cmbBPBlueprintSelection.Text = readerBP.GetString(0)
        BPTech = readerBP.GetInt32(1)

        ' Set the optimize check
        If BuildType = "Build/Buy" Then
            chkBPBuildBuy.Checked = True
        Else
            chkBPBuildBuy.Checked = False
        End If

        If BPTech = 2 Or BPTech = 3 Then
            ' Set the decryptor
            If Inputs <> None Then
                If Not CBool(InStr(Inputs, "No Decryptor")) Then
                    If BPTech = 2 Then
                        DecryptorName = Inputs
                    ElseIf InStr(Inputs, "|") <> 0 Then ' For T3
                        DecryptorName = Inputs.Substring(0, InStr(Inputs, "|") - 1)
                    ElseIf InStr(Inputs, " - ") <> 0 Then
                        DecryptorName = Inputs.Substring(0, InStr(Inputs, "-") - 2)
                    End If
                End If
            End If

            BPDecryptor = SelectDecryptor(DecryptorName)

            If BPTech = 3 Then
                LoadingT3Decryptors = True
                cmbBPT3Decryptor.Text = BPDecryptor.Name
                LoadingT3Decryptors = False
                ' Also load the relic
                LoadingRelics = True
                Dim TempRelic As String = ""
                If InStr(Inputs, "|") <> 0 Then ' For T3
                    TempRelic = Inputs.Substring(InStr(Inputs, "|") - 1)
                ElseIf InStr(Inputs, " - ") <> 0 Then
                    TempRelic = Inputs.Substring(InStr(Inputs, "-") + 1)
                End If
                SQL = "SELECT typeName FROM INVENTORY_TYPES, INDUSTRY_ACTIVITY_PRODUCTS WHERE productTypeID =" & BPID & " "
                SQL = SQL & "and typeID = blueprintTypeID AND typeName LIKE '%" & TempRelic & "%'"

                DBCommand = New SQLiteCommand(SQL, DB)
                readerRelic = DBCommand.ExecuteReader
                readerRelic.Read()
                cmbBPRelic.Items.Clear()
                cmbBPRelic.Text = readerRelic.GetString(0)
                LoadingRelics = False
                RelicsLoaded = False ' Allow reload on drop down

            Else
                LoadingInventionDecryptors = True
                cmbBPInventionDecryptor.Text = BPDecryptor.Name
                LoadingInventionDecryptors = False
            End If

            ' Need to calculate the number of bps based on the bp
            If chkCalcAutoCalcT2NumBPs.Checked Then
                txtBPNumBPs.Text = CStr(GetUsedNumBPs(BPID, BPTech, CInt(SentRuns), TempLines, CInt(NumBPs), BPDecryptor.RunMod))
            End If
        Else
            ' T1
            txtBPNumBPs.Text = NumBPs
        End If

        ' We are always going to load up manufacturing first
        cmbBPFacilityActivities.Text = ActivityManufacturing

        If SentFrom = "Manufacturing Tab" Then
            SentFromManufacturingTab = True
            SentFromShoppingList = False

            ' Set check boxes on bp tab to match selections on manufacturing tab
            chkBPTaxes.Checked = chkCalcTaxes.Checked
            chkBPBrokerFees.Checked = chkCalcFees.Checked

            txtBPAddlCosts.Text = "0.00"
            txtBPRuns.Text = SentRuns
            txtBPLines.Text = txtCalcProdLines.Text

            txtBPInventionLines.Text = txtCalcLabLines.Text
            txtBPRelicLines.Text = txtCalcLabLines.Text

            ' Need to load the team and the facility used
            SelectedBPComponentManufacturingFacility = CType(ComponentFacility.Clone, IndustryFacility)
            If BPTech = 2 Then
                SelectedBPInventionFacility = CType(InventionFacility.Clone, IndustryFacility)
                SelectedBPCopyFacility = CType(CopyFacility.Clone, IndustryFacility)

                chkBPIncludeCopyCosts.Checked = SelectedBPCopyFacility.IncludeActivityCost
                chkBPIncludeCopyTime.Checked = SelectedBPCopyFacility.IncludeActivityTime

                chkBPIncludeInventionCosts.Checked = SelectedBPInventionFacility.IncludeActivityCost
                chkBPIncludeInventionTime.Checked = SelectedBPInventionFacility.IncludeActivityTime

            ElseIf BPTech = 3 Then
                SelectedBPT3InventionFacility = CType(InventionFacility.Clone, IndustryFacility)
                chkBPIncludeT3Costs.Checked = SelectedBPT3InventionFacility.IncludeActivityCost
                chkBPIncludeT3Time.Checked = SelectedBPT3InventionFacility.IncludeActivityTime
            End If

            ' Reset the current bp selection to override what is there
            CurrentBPCategoryID = readerBP.GetInt32(3)
            CurrentBPGroupID = readerBP.GetInt32(2)

            Dim SelectedIndyType As IndustryType = GetProductionType(ActivityManufacturing, CurrentBPGroupID, CurrentBPCategoryID, BuildFacility.FacilityType)

            ' Set the correct facility to match what was sent
            Select Case SelectedIndyType
                Case IndustryType.Manufacturing
                    SelectedBPManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.POSFuelBlockManufacturing
                    SelectedBPPOSFuelBlockFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.POSLargeShipManufacturing
                    SelectedBPPOSLargeShipFacility = CType(BuildFacility.Clone, IndustryFacility)
                    SelectedBPManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility) ' This is also the default POS for everything else, so save
                Case IndustryType.POSModuleManufacturing
                    SelectedBPPOSModuleFacility = CType(BuildFacility.Clone, IndustryFacility)
                    SelectedBPManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility) ' This is also the default POS for everything else, so save
                Case IndustryType.BoosterManufacturing
                    SelectedBPBoosterManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.CapitalManufacturing
                    SelectedBPCapitalManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.SuperManufacturing
                    SelectedBPSuperManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.T3CruiserManufacturing
                    SelectedBPT3CruiserManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.SubsystemManufacturing
                    SelectedBPSubsystemManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.ComponentManufacturing
                    SelectedBPComponentManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.CapitalComponentManufacturing
                    SelectedBPCapitalComponentManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.Invention
                    SelectedBPInventionFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.T3Invention
                    SelectedBPT3InventionFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.Copying
                    SelectedBPCopyFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case IndustryType.NoPOSManufacturing
                    SelectedBPNoPOSFacility = CType(BuildFacility.Clone, IndustryFacility)
                Case Else
                    SelectedBPManufacturingFacility = CType(BuildFacility.Clone, IndustryFacility)
            End Select

            ' Make sure to set they type of facility we are using
            cmbBPFacilityType.Text = BuildFacility.FacilityType

            ' Set the teams
            SelectedBPManufacturingTeam = CType(BuildTeam.Clone, IndustryTeam)
            SelectedBPComponentManufacturingTeam = CType(ComponentTeam.Clone, IndustryTeam)
            SelectedBPCopyTeam = CType(CopyTeam.Clone, IndustryTeam)

            ' Check usage box
            chkBPFacilityIncludeUsage.Checked = BuildFacility.IncludeActivityUsage

            ' Always start with manufacturing team
            cmbBPTeamActivities.Text = ActivityManufacturing
            cmbBPTeam.Text = SelectedBPManufacturingTeam.TeamName & " - " & FormatPercent(SelectedBPManufacturingTeam.CostModifier / 100, 0)

        Else ' just use BP Tab settings with basic stuff
            SentFromManufacturingTab = False
            SentFromShoppingList = True

            chkBPFacilityIncludeUsage.Checked = IncludeUsage
            chkBPTaxes.Checked = IncludeTaxes
            chkBPBrokerFees.Checked = IncludeFees

            txtBPAddlCosts.Text = "0.00"

            txtBPME.Text = MEValue
            txtBPRuns.Text = SentRuns

        End If

        ' Show the BP tab 
        tabMain.SelectedTab = tabBlueprints
        readerBP.Close()

        ' Finally, load the blueprint with data in the row selected like it was just selected
        Call SelectBlueprint(False)

    End Sub

    ' Loads up all the usage for all facilities on this bp into a form
    Private Sub lblBPFacilityUsage_DoubleClick(sender As System.Object, e As System.EventArgs) Handles lblBPFacilityUsage.DoubleClick
        Dim f1 As New frmUsageViewer
        Dim RawCostSplit As UsageSplit

        ' Fill up the array to display
        If Not IsNothing(SelectedBlueprint) Then

            ' Manufacturing Facility usage
            RawCostSplit.UsageName = "Manufacturing Facility Usage"
            RawCostSplit.UsageValue = SelectedBlueprint.GetManufacturingFacilityUsage
            f1.UsageSplits.Add(RawCostSplit)

            If SelectedBlueprint.HasComponents Then
                ' Component Facility Usage
                RawCostSplit.UsageName = "Component Facility Usage"
                RawCostSplit.UsageValue = SelectedBlueprint.GetComponentFacilityUsage
                f1.UsageSplits.Add(RawCostSplit)

                ' Capital Component Facility Usage
                Select Case SelectedBlueprint.GetItemGroupID
                    Case TitanGroupID, SupercarrierGroupID, CarrierGroupID, DreadnoughtGroupID, _
                        JumpFreighterGroupID, FreighterGroupID, IndustrialCommandShipGroupID, CapitalIndustrialShipGroupID
                        ' Only add cap component usage for ships that use them
                        RawCostSplit.UsageName = "Capital Component Facility Usage"
                        RawCostSplit.UsageValue = SelectedBlueprint.GetCapComponentFacilityUsage
                        f1.UsageSplits.Add(RawCostSplit)
                End Select
            End If

            If SelectedBlueprint.GetTechLevel <> BlueprintTechLevel.T1 Then
                ' Invention Facility
                RawCostSplit.UsageName = "Invention Usage"
                RawCostSplit.UsageValue = SelectedBlueprint.GetInventionUsage
                f1.UsageSplits.Add(RawCostSplit)
            End If

            If SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T2 Then
                ' Copy Facility
                RawCostSplit.UsageName = "Copy Usage"
                RawCostSplit.UsageValue = SelectedBlueprint.GetCopyUsage
                f1.UsageSplits.Add(RawCostSplit)
            End If

            f1.Show()
        End If
    End Sub

    ' Loads the popup with all the material break down and usage for invention
    Private Sub lblBPInventionCost_DoubleClick(sender As System.Object, e As System.EventArgs) Handles lblBPInventionCost.DoubleClick
        Dim f1 As New frmInventionMats

        Me.Cursor = Cursors.WaitCursor

        If Not IsNothing(SelectedBlueprint) Then
            If SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T2 Then
                f1.MatType = "T2 Invention Materials needed for enough successful BPCs for " & CStr(SelectedBlueprint.GetUserRuns)
                If SelectedBlueprint.GetUserRuns = 1 Then
                    f1.MatType = f1.MatType & " Run"
                Else
                    f1.MatType = f1.MatType & " Runs"
                End If
                f1.MaterialList = SelectedBlueprint.GetInventionMaterials
                f1.TotalInventedRuns = SelectedBlueprint.GetTotalInventedRuns
                f1.UserRuns = SelectedBlueprint.GetUserRuns
                f1.ListType = "Invention"
            End If
            Me.Cursor = Cursors.Default
            f1.Show()
        End If

    End Sub

    ' Loads the popup with all the copy materials and usage for copy jobs
    Private Sub lblBPCopyCosts_DoubleClick(sender As Object, e As System.EventArgs) Handles lblBPCopyCosts.DoubleClick
        Dim f1 As New frmInventionMats

        If Not IsNothing(SelectedBlueprint) Then
            If SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T2 Then
                f1.MatType = "T2 Copy Materials needed for enough successful BPCs for " & CStr(SelectedBlueprint.GetUserRuns)
                If SelectedBlueprint.GetUserRuns = 1 Then
                    f1.MatType = f1.MatType & " Run"
                Else
                    f1.MatType = f1.MatType & " Runs"
                End If
                f1.MaterialList = SelectedBlueprint.GetCopyMaterials
                f1.TotalInventedRuns = SelectedBlueprint.GetInventionJobs
                f1.ListType = "Copying"
            End If
            f1.Show()
        End If

    End Sub

    ' Loads the popup with all the material break down and usage for T3 invention
    Private Sub lblBPRECost_DoubleClick(sender As System.Object, e As System.EventArgs) Handles lblBPRECost.DoubleClick
        Dim f1 As New frmInventionMats

        If Not IsNothing(SelectedBlueprint) Then
            If SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T3 Then
                f1.MatType = "T3 Invention Materials needed for enough successful BPCs for " & CStr(SelectedBlueprint.GetUserRuns)
                If SelectedBlueprint.GetUserRuns = 1 Then
                    f1.MatType = f1.MatType & " Run"
                Else
                    f1.MatType = f1.MatType & " Runs"
                End If
                f1.MaterialList = SelectedBlueprint.GetInventionMaterials
                f1.TotalInventedRuns = SelectedBlueprint.GetTotalInventedRuns
                f1.UserRuns = SelectedBlueprint.GetUserRuns
                f1.ListType = "T3 Invention"
            End If
            f1.Show()
        End If

    End Sub

    ' Loads the popup with all the costs for total raw
    Private Sub lblBPRawTotalCost_DoubleClick(sender As Object, e As System.EventArgs) Handles lblBPRawTotalCost.DoubleClick
        Call ShowCostSplitViewer(SelectedBlueprint.GetRawMaterials.GetTotalMaterialsCost, "Raw")
    End Sub

    ' Loads the popup with all the costs for total components
    Private Sub lblBPTotalCompCost_DoubleClick(sender As Object, e As System.EventArgs) Handles lblBPTotalCompCost.DoubleClick
        Call ShowCostSplitViewer(SelectedBlueprint.GetComponentMaterials.GetTotalMaterialsCost, "Component")
    End Sub

    ' Loads the popup with all the costs for the material cost sent
    Private Sub ShowCostSplitViewer(MaterialsCost As Double, MaterialType As String)
        Dim f1 As New frmCostSplitViewer
        Dim RawCostSplit As CostSplit

        ' Fill up the array to display
        If Not IsNothing(SelectedBlueprint) Then
            f1.CostSplitType = "Total " & MaterialType & " Material Cost Split"
            ' Mat cost
            RawCostSplit.SplitName = MaterialType & " Materials Cost"
            RawCostSplit.SplitValue = MaterialsCost
            f1.CostSplits.Add(RawCostSplit)

            ' Manufacturing Facility usage
            RawCostSplit.SplitName = "Manufacturing Facility Usage"
            RawCostSplit.SplitValue = SelectedBlueprint.GetManufacturingFacilityUsage
            f1.CostSplits.Add(RawCostSplit)

            If (SelectedBlueprint.HasComponents And chkBPBuildBuy.Checked = True) Or MaterialType = "Raw" Then
                ' Component Facility Usage
                RawCostSplit.SplitName = "Component Facility Usage"
                RawCostSplit.SplitValue = SelectedBlueprint.GetComponentFacilityUsage
                f1.CostSplits.Add(RawCostSplit)

                ' Capital Component Facility Usage
                Select Case SelectedBlueprint.GetItemGroupID
                    Case TitanGroupID, SupercarrierGroupID, CarrierGroupID, DreadnoughtGroupID, _
                        JumpFreighterGroupID, FreighterGroupID, IndustrialCommandShipGroupID, CapitalIndustrialShipGroupID
                        ' Only add cap component usage for ships that use them
                        RawCostSplit.SplitName = "Capital Component Facility Usage"
                        RawCostSplit.SplitValue = SelectedBlueprint.GetCapComponentFacilityUsage
                        f1.CostSplits.Add(RawCostSplit)
                End Select
            End If

            ' Taxes
            RawCostSplit.SplitName = "Taxes"
            RawCostSplit.SplitValue = SelectedBlueprint.GetSalesTaxes
            f1.CostSplits.Add(RawCostSplit)

            ' Broker fees
            RawCostSplit.SplitName = "Broker Fees"
            RawCostSplit.SplitValue = SelectedBlueprint.GetSalesBrokerFees
            f1.CostSplits.Add(RawCostSplit)

            ' Additional Costs the user added
            If SelectedBlueprint.GetAdditionalCosts <> 0 Then
                RawCostSplit.SplitName = "Additional Costs"
                RawCostSplit.SplitValue = SelectedBlueprint.GetAdditionalCosts
                f1.CostSplits.Add(RawCostSplit)
            End If

            If SelectedBlueprint.GetTechLevel <> BlueprintTechLevel.T1 Then
                ' Total Invention Costs
                RawCostSplit.SplitName = "Invention Costs"
                RawCostSplit.SplitValue = SelectedBlueprint.GetInventionCost
                f1.CostSplits.Add(RawCostSplit)

                RawCostSplit.SplitName = "Invention Usage"
                RawCostSplit.SplitValue = SelectedBlueprint.GetInventionUsage
                f1.CostSplits.Add(RawCostSplit)

                ' Total Copy Costs
                RawCostSplit.SplitName = "Copy Costs"
                RawCostSplit.SplitValue = SelectedBlueprint.GetCopyCost
                f1.CostSplits.Add(RawCostSplit)

                RawCostSplit.SplitName = "Copy Usage"
                RawCostSplit.SplitValue = SelectedBlueprint.GetCopyUsage
                f1.CostSplits.Add(RawCostSplit)

            End If

            f1.Show()
        End If

    End Sub

    ' Opens the refinery window from menu
    Private Sub mnuRefinery_Click(sender As System.Object, e As System.EventArgs) Handles mnuRefinery.Click
        Dim f1 As New frmRefinery

        Call f1.Show()

    End Sub

    ' Menu update to show the patch notes
    Private Sub mnuPatchNotes_Click(sender As System.Object, e As System.EventArgs) Handles mnuPatchNotes.Click
        Dim f1 As New frmPatchNotes

        Application.UseWaitCursor = True
        Application.DoEvents()

        f1.Show()

    End Sub

    ' Shows the Invention Success Monitor
    Private Sub mnuInventionSuccessMonitor_Click(sender As System.Object, e As System.EventArgs) Handles mnuInventionSuccessMonitor.Click
        Dim f1 As New frmInventionMonitor

        f1.Show()

    End Sub

    Private Sub mnuIndustryUpgradeBelts_Click(sender As System.Object, e As System.EventArgs) Handles mnuIndustryUpgradeBelts.Click
        Dim f1 As New frmIndustryBeltFlip

        f1.Show()
    End Sub

    ' Full reset - will delete all data downloaded, updated, or otherwise set by the user
    Private Sub mnuResetAllData_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuResetAllData.Click
        Dim Response As MsgBoxResult
        Dim SQL As String

        Response = MsgBox("This will reset all data for the program including API, Blueprints, Assets, Industry Jobs, and Price data." & Environment.NewLine & "Are you sure you want to do this?", vbYesNo, Application.ProductName)

        If Response = vbYes Then
            Application.UseWaitCursor = True
            Application.DoEvents()

            SQL = "DELETE FROM API"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM CHARACTER_STANDINGS"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM CHARACTER_SKILLS"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM OWNED_BLUEPRINTS"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM ITEM_PRICES_CACHE"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM ASSETS"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM INDUSTRY_JOBS"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM CURRENT_RESEARCH_AGENTS"
            ExecuteNonQuerySQL(SQL)

            SQL = "UPDATE ITEM_PRICES SET PRICE = 0"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM EMD_ITEM_PRICE_HISTORY"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM EMD_UPDATE_HISTORY"
            ExecuteNonQuerySQL(SQL)

            ' Reset all the cache dates
            Call ResetCRESTDates()

            ' Reset CREST data
            Call ResetCRESTIndustryFacilities()
            Call ResetCRESTAdjustedMarketPrices()

            CharactersLoaded = False ' Just deleted all the data
            FirstLoad = True ' Temporarily just to get screen to show correctly

            Application.UseWaitCursor = False
            Application.DoEvents()

            MsgBox("All Data Reset", vbInformation, Application.ProductName)

            ' Load the API selection
            Dim f1 As New frmLoadCharacterAPI
            f1.ShowDialog()

            If CharactersLoaded Then
                ' Need to set a default, open that form
                Dim f2 = New frmSetCharacterDefault
                f2.ShowDialog()
                ' If we returned, we got a default character set
                pnlCharacter.Text = "Character Loaded: " & SelectedCharacter.Name
            End If

            ' Reset the tabs
            Call ResetTabs()

            FirstLoad = False

        End If

    End Sub

    Private Sub mnuResetPriceData_Click(sender As System.Object, e As System.EventArgs) Handles mnuResetPriceData.Click
        Dim Response As MsgBoxResult
        Dim SQL As String

        Response = MsgBox("This will reset all stored price data for this character." & Environment.NewLine & "Are you sure you want to do this?", vbYesNo, Application.ProductName)

        If Response = vbYes Then
            Application.UseWaitCursor = True
            Application.DoEvents()

            SQL = "DELETE FROM ITEM_PRICES_CACHE"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM EMD_ITEM_PRICE_HISTORY"
            ExecuteNonQuerySQL(SQL)

            SQL = "DELETE FROM EMD_UPDATE_HISTORY"
            ExecuteNonQuerySQL(SQL)

            SQL = "UPDATE ITEM_PRICES SET PRICE = 0"
            ExecuteNonQuerySQL(SQL)

            Application.UseWaitCursor = False
            Application.DoEvents()

            MsgBox("Prices reset", vbInformation, Application.ProductName)

        End If

        Call UpdateProgramPrices()

    End Sub

    Private Sub mnuResetCRESTDates_Click(sender As System.Object, e As System.EventArgs) Handles mnuResetCRESTDates.Click
        Call ResetCRESTDates()
    End Sub

    Private Sub ResetCRESTDates()
        Dim SQL As String

        ' Simple update, just set all the CREST cache dates to null
        SQL = "DELETE FROM CREST_CACHE_DATES"
        ExecuteNonQuerySQL(SQL)

        MsgBox("CREST cache dates reset", vbInformation, Application.ProductName)

    End Sub

    Private Sub ResetCRESTIndustryFacilities()

        ' Need to delete all outpost data, clear out the industry facilities table and set up for a rebuild
        Call ExecuteNonQuerySQL("DELETE FROM INDUSTRY_FACILITIES")
        Call ExecuteNonQuerySQL("DELETE FROM STATION_FACILITIES WHERE OUTPOST <> 0")

        ' Simple update, just set all the CREST cache dates to null
        Call ExecuteNonQuerySQL("UPDATE CREST_CACHE_DATES SET CREST_INDUSTRY_SYSTEMS_CACHED_UNTIL = NULL")
        Call ExecuteNonQuerySQL("UPDATE CREST_CACHE_DATES SET CREST_INDUSTRY_FACILITIES_CACHED_UNTIL = NULL")

        MsgBox("CREST Industry Facilities reset", vbInformation, Application.ProductName)

    End Sub

    Public Sub ResetCRESTAdjustedMarketPrices()

        ' Simple update, just set all the data back to zero
        Call ExecuteNonQuerySQL("UPDATE ITEM_PRICES SET ADJUSTED_PRICE = 0, AVERAGE_PRICE = 0")
        Call ExecuteNonQuerySQL("UPDATE CREST_CACHE_DATES SET CREST_MARKET_PRICES_CACHED_UNTIL = NULL")

        MsgBox("CREST Adjusted Market Prices reset", vbInformation, Application.ProductName)

    End Sub

    Private Sub mnuResetBlueprintData_Click(sender As System.Object, e As System.EventArgs) Handles mnuResetBlueprintData.Click
        Dim Response As MsgBoxResult

        Response = MsgBox("This will reset all blueprints for this character" & Environment.NewLine & "deleting all scanned data and stored ME/TE values." & Environment.NewLine & Environment.NewLine & "Are you sure you want to do this?", vbYesNo, Application.ProductName)

        If Response = vbYes Then
            Application.UseWaitCursor = True
            Application.DoEvents()

            Call ResetAllBPData()

            Application.UseWaitCursor = False
            Application.DoEvents()

        End If

    End Sub

    Private Sub mnuResetAgents_Click(sender As System.Object, e As System.EventArgs) Handles mnuResetAgents.Click
        Dim Response As MsgBoxResult
        Dim SQL As String

        Response = MsgBox("This will reset all stored Research Agents for this character." & Environment.NewLine & "Are you sure you want to do this?", vbYesNo, Application.ProductName)

        If Response = vbYes Then
            Application.UseWaitCursor = True
            Application.DoEvents()

            SQL = "DELETE FROM CURRENT_RESEARCH_AGENTS WHERE CHARACTER_ID =" & SelectedCharacter.ID
            ExecuteNonQuerySQL(SQL)

            SQL = "UPDATE API SET RESEARCH_AGENTS_CACHED_UNTIL = NULL WHERE CHARACTER_ID =" & SelectedCharacter.ID & " AND API_TYPE NOT IN ('Corporation','Old Key')"
            ExecuteNonQuerySQL(SQL)

            Application.UseWaitCursor = False
            Application.DoEvents()

            MsgBox("Research Agents reset", vbInformation, Application.ProductName)
        End If

    End Sub

    Private Sub mnuResetIndustryJobs_Click(sender As System.Object, e As System.EventArgs) Handles mnuResetIndustryJobs.Click
        Dim Response As MsgBoxResult
        Dim SQL As String

        Response = MsgBox("This will reset all stored Industry Jobs for this character." & Environment.NewLine & "Are you sure you want to do this?", vbYesNo, Application.ProductName)

        If Response = vbYes Then
            Application.UseWaitCursor = True
            Application.DoEvents()

            SQL = "DELETE FROM INDUSTRY_JOBS WHERE InstallerID =" & SelectedCharacter.ID & " AND JobType =" & ScanType.Personal
            ExecuteNonQuerySQL(SQL)

            SQL = "UPDATE API SET INDUSTRY_JOBS_CACHED_UNTIL = NULL WHERE CHARACTER_ID =" & SelectedCharacter.ID & " AND API_TYPE NOT IN ('Corporation','Old Key')"
            ExecuteNonQuerySQL(SQL)

            Application.UseWaitCursor = False
            Application.DoEvents()

            MsgBox("Industry Jobs reset", vbInformation, Application.ProductName)
        End If

    End Sub

    Private Sub mnuResetIgnoredBPs_Click(sender As System.Object, e As System.EventArgs) Handles mnuResetIgnoredBPs.Click
        Dim Response As MsgBoxResult
        Dim SQL As String

        Response = MsgBox("This will reset all blueprints to non-ignored" & Environment.NewLine & "Are you sure you want to do this?", vbYesNo, Application.ProductName)

        If Response = vbYes Then
            Application.UseWaitCursor = True
            Application.DoEvents()

            SQL = "UPDATE ALL_BLUEPRINTS SET IGNORE = 0"
            ExecuteNonQuerySQL(SQL)

            Application.UseWaitCursor = False
            Application.DoEvents()

            MsgBox("Ignored Blueprints reset", vbInformation, Application.ProductName)
        End If
    End Sub

    Private Sub mnuResetAssets_Click(sender As System.Object, e As System.EventArgs) Handles mnuResetAssets.Click
        Dim Response As MsgBoxResult
        Dim SQL As String

        Response = MsgBox("This will reset all stored Assets for this character." & Environment.NewLine & "Are you sure you want to do this?", vbYesNo, Application.ProductName)

        If Response = vbYes Then
            Application.UseWaitCursor = True
            Application.DoEvents()

            ' Personal
            SQL = "DELETE FROM ASSETS WHERE ID =" & SelectedCharacter.ID
            ExecuteNonQuerySQL(SQL)

            SQL = "UPDATE API SET ASSETS_CACHED_UNTIL = NULL WHERE CHARACTER_ID =" & SelectedCharacter.ID & " AND API_TYPE NOT IN ('Corporation','Old Key')"
            ExecuteNonQuerySQL(SQL)

            ' Corp
            SQL = "DELETE FROM ASSETS WHERE ID =" & SelectedCharacter.CharacterCorporation.CorporationID
            ExecuteNonQuerySQL(SQL)

            SQL = "UPDATE API SET ASSETS_CACHED_UNTIL = NULL WHERE CORPORATION_ID =" & SelectedCharacter.CharacterCorporation.CorporationID
            SQL = SQL & " AND API_TYPE = 'Corporation'"
            ExecuteNonQuerySQL(SQL)

            ' Reload the asset variables for the character, which will load nothing but clear the assets out
            Call SelectedCharacter.GetAssets().LoadAssets(ScanType.Personal, UserApplicationSettings.LoadAssetsonStartup)
            Call SelectedCharacter.CharacterCorporation.GetAssets().LoadAssets(ScanType.Corporation, UserApplicationSettings.LoadAssetsonStartup)

            Application.UseWaitCursor = False
            Application.DoEvents()

            MsgBox("Assets reset", vbInformation, Application.ProductName)
        End If

    End Sub

    Private Sub mnuCurrentIndustryJobs_Click(sender As System.Object, e As System.EventArgs) Handles mnuCurrentIndustryJobs.Click
        Dim f1 As New frmIndustryJobsViewer
        f1.Show()
    End Sub

    Private Sub mnuResetCRESTMarketPrices_Click(sender As System.Object, e As System.EventArgs) Handles mnuResetCRESTMarketPrices.Click
        Call ResetCRESTAdjustedMarketPrices()
    End Sub

    Private Sub mnuResetCRESTIndustryFacilities_Click(sender As System.Object, e As System.EventArgs) Handles mnuResetCRESTIndustryFacilities.Click
        Call ResetCRESTIndustryFacilities()
    End Sub

    ' Checks the ME and TE boxes to make sure they are ok and errors if not
    Private Function CorrectMETE(ByVal inME As String, ByVal inTE As String, ByRef METextBox As TextBox, ByRef TETextBox As TextBox) As Boolean

        If Not IsNumeric(inME) Or Trim(inME) = "" Then
            MsgBox("Invalid ME Value", vbExclamation)
            METextBox.SelectAll()
            METextBox.Focus()
            Return False
        End If

        If Not IsNumeric(inTE) Or Trim(inTE) = "" Then
            MsgBox("Invalid TE Value", vbExclamation)
            TETextBox.SelectAll()
            TETextBox.Focus()
            Return False
        End If

        Return True

    End Function

    Private Sub tabMain_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tabMain.Click
        If tabMain.SelectedTab.Name = "tabDatacores" Then
            If FirstShowDatacores Then
                ' Load up the data first
                Me.Cursor = Cursors.WaitCursor

                ' DC Skills and Levels plus the standings
                Call LoadDatacoreTab()

                Me.Cursor = Cursors.Default
                FirstShowDatacores = False ' Don't run this for successive clicks to this tab
            End If
        ElseIf tabMain.SelectedTab.Name = "tabMining" Then
            If FirstShowMining Then
                ' Load up the data first
                Me.Cursor = Cursors.WaitCursor

                ' DC Skills and Levels plus the standings
                Call LoadMiningTab()

                Me.Cursor = Cursors.Default

                FirstShowMining = False ' Don't run for successive clicks
            End If
        End If
    End Sub

    Private Sub mnuInventionResultsTracking_Click(sender As System.Object, e As System.EventArgs)
        Dim f1 As New frmInventionMonitor
        f1.ShowDialog()
    End Sub

    Private Sub mnuCurrentResearchAgents_Click(sender As System.Object, e As System.EventArgs) Handles mnuCurrentResearchAgents.Click
        Dim f1 As New frmResearchAgents
        f1.Show()
    End Sub

    Private Sub mnuSelectionAddChar_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuSelectionAddChar.Click
        Dim f1 = New frmLoadCharacterAPI
        f1.ShowDialog()

        If CharactersLoaded Then
            ' Open up the default select box here
            Dim f2 = New frmSetCharacterDefault
            f2.ShowDialog()
            ' If we returned, we got a default character set
            pnlCharacter.Text = "Character Loaded: " & SelectedCharacter.Name

            ' Only allow selecting a default if there are accounts to set it to
            If NonDummyAccountsLoaded() Then
                mnuSelectDefaultChar.Enabled = True
            Else
                mnuSelectDefaultChar.Enabled = False
            End If
        End If

        ' Reinit form
        Call ResetTabs()
    End Sub

    Private Sub mnuSelectionManageAPI_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuSelectionManageAPI.Click
        Dim f1 As New frmManageAccounts

        frmManageAccounts.ShowDialog()

        ' Only allow selecting a default if there are accounts to set it to
        If NonDummyAccountsLoaded() Then
            mnuSelectDefaultChar.Enabled = True
        Else
            mnuSelectDefaultChar.Enabled = False
        End If

        ' Default character set, now set the panel if it changed
        If SelectedCharacter.Name <> pnlCharacter.Text.Substring(pnlCharacter.Text.IndexOf(":") + 2) Then
            ' If we returned, we got a default character set
            pnlCharacter.Text = "Character Loaded: " & SelectedCharacter.Name
            Call ResetTabs()
        End If

    End Sub

    Private Sub mnuItemUpdatePrices_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuItemUpdatePrices.Click
        Dim f1 = New frmManualPriceUpdate
        f1.ShowDialog()
        Call ResetRefresh()
    End Sub

    Private Sub mnuCheckforUpdates_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuCheckforUpdates.Click
        Me.Cursor = Cursors.WaitCursor
        Application.DoEvents()
        Call CheckForUpdates(True, Me.Icon)
        Me.Cursor = Cursors.Default
    End Sub

    Private Sub btnEnterPrices_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnEnterPrices.Click
        Dim f1 = New frmManualPriceUpdate
        f1.ShowDialog()
        ' Reset the calc button
        Call ResetRefresh()
    End Sub

    Private Sub mnuSelectionExit_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuSelectionExit.Click
        End
    End Sub

    Private Sub mnuSelectionShoppingList_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuSelectionShoppingList.Click
        Call ShowShoppingList()
    End Sub

    Private Sub mnuManageBlueprintsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuManageBlueprintsToolStripMenuItem.Click
        Dim f1 = New frmBlueprintManagement
        f1.ShowDialog()
        Call ResetRefresh()
        ' Reload the bp if there is one loaded so we get the most updated bps
        If Not IsNothing(SelectedBlueprint) Then
            Call SelectBlueprint(False)
        End If
    End Sub

    Private Sub mnuSelectDefaultChar_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuSelectDefaultChar.Click
        Dim f1 = New frmSetCharacterDefault
        Dim PreviousChar As String

        PreviousChar = SelectedCharacter.Name

        f1.ShowDialog()
        ' If we returned, we got a default character set
        pnlCharacter.Text = "Character Loaded: " & SelectedCharacter.Name

        ' If they cancel or choose the same one, don't re load everything
        If PreviousChar <> SelectedCharacter.Name Then
            Call ResetTabs()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub pnlShoppingList_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlShoppingList.Click
        Call ShowShoppingList()
    End Sub

    Private Sub mnuSelectionShoppingList_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ShowShoppingList()
    End Sub

    Private Sub mnuSelectionAbout_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuSelectionAbout.Click
        Dim f1 = New frmAbout
        ' Open the Shopping List
        f1.ShowDialog()
    End Sub

    Private Sub mnuCharacterSkills_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuCharacterSkills.Click
        Dim f1 = New frmCharacterSkills
        ' Open the character screen
        SkillsUpdated = False
        f1.ShowDialog()

        If SkillsUpdated Then
            Call UpdateSkillPanel()
            ' Need to reload screens that have skills displayed on it
            Call InitDatacoreTab()

            ' Refresh the BP Tab if there is a blueprint selected since skills could affect build
            If Not IsNothing(SelectedBlueprint) Then
                Call RefreshBP()
            End If
        End If

    End Sub

    Private Sub pnlSkills_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles pnlSkills.Click
        Dim f1 = New frmCharacterSkills
        ' Open the character screen
        f1.ShowDialog()
        Call UpdateSkillPanel()
    End Sub

    Private Sub mnuCharacterStandings_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuCharacterStandings.Click
        Dim f1 = New frmCharacterStandings
        ' Open the character screen
        f1.ShowDialog()
    End Sub

    Private Sub mnuUserSettings_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuUserSettings.Click
        Dim f1 = New frmSettings
        ' Open the settings form
        f1.ShowDialog()



    End Sub

    Private Sub ShowShoppingList()

        ' Make sure it's not disposed
        If frmShop.IsDisposed Then
            ' Make new form
            frmShop = New frmShoppingList
        End If

        ' First refresh the lists
        frmShop.RefreshLists()

        ' Now open the Shopping List
        frmShop.Show()
        frmShop.Focus()

        Application.DoEvents()

    End Sub

    Private Sub mnuViewAssets_Click(sender As System.Object, e As System.EventArgs) Handles mnuViewAssets.Click

        ' Make sure it's not disposed
        If IsNothing(frmDefaultAssets) Then
            ' Make new form
            frmDefaultAssets = New frmAssetsViewer(AssetWindow.ProgramDefault)
        Else
            If frmDefaultAssets.IsDisposed Then
                ' Make new form
                frmDefaultAssets = New frmAssetsViewer(AssetWindow.ProgramDefault)
            End If
        End If

        ' Now open the Asset List
        frmDefaultAssets.Show()
        frmDefaultAssets.Focus()

        Application.DoEvents()

    End Sub

    Private Sub UpdateSkillPanel()
        If UserApplicationSettings.AllowSkillOverride Then
            pnlSkills.ForeColor = Color.Red
            pnlSkills.Text = "Skills Overridden"
        Else
            pnlSkills.ForeColor = Color.Black
            pnlSkills.Text = "Skills Loaded"
        End If
    End Sub

    Public Sub ResetTabs()
        ' Init all forms
        Me.Cursor = Cursors.WaitCursor
        Call InitBPTab()
        Call InitDatacoreTab()
        Call InitManufacturingTab()
        Call InitReactionsTab()
        Call InitUpdatePricesTab()
        Call InitMiningTab()

        ' Update skill override
        Call UpdateSkillPanel()

        ' New Char so load the max lines
        If Not IsNothing(SelectedCharacter.Skills) Then ' 3387 mass production, 24625 adv mass production, 3406 laboratory efficiency, 24524 adv laboratory operation
            MaximumProductionLines = SelectedCharacter.Skills.GetSkillLevel(3387) + SelectedCharacter.Skills.GetSkillLevel(24525) + 1
            MaximumLaboratoryLines = SelectedCharacter.Skills.GetSkillLevel(3406) + SelectedCharacter.Skills.GetSkillLevel(24524) + 1
        Else
            MaximumProductionLines = 1
            MaximumLaboratoryLines = 1
        End If

        Me.Cursor = Cursors.Default
    End Sub

    Private Sub mnuRestoreDefaultBP_Click(sender As System.Object, e As System.EventArgs) Handles mnuRestoreDefaultBP.Click
        Call AllSettings.SetDefaultBPSettings()

        ' Also need to reset the shared variables
        UserApplicationSettings.CheckBuildBuy = DefaultSettings.DefaultCheckBuildBuy

        ' Save them
        Call AllSettings.SaveBPSettings(AllSettings.GetBPSettings)
        Call AllSettings.SaveApplicationSettings(UserApplicationSettings)

        ' Load them again
        UserBPTabSettings = AllSettings.LoadBPSettings()
        UserApplicationSettings = AllSettings.LoadApplicationSettings()

        ' Reload the tab
        Call InitBPTab()

        MsgBox("BP Tab Default Settings Restored", vbInformation, Application.ProductName)

    End Sub

    Private Sub mnuRestoreDefaultBPFacilities_Click(sender As System.Object, e As System.EventArgs) Handles mnuRestoreDefaultBPFacilities.Click

        ' BP 
        Call SelectedBPManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.Manufacturing), True)
        DefaultBPManufacturingFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)
        Call SelectedBPCapitalManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.CapitalManufacturing), True)
        DefaultBPCapitalManufacturingFacility = CType(SelectedBPCapitalManufacturingFacility.Clone, IndustryFacility)
        Call SelectedBPSuperManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.SuperManufacturing), True)
        DefaultBPSuperManufacturingFacility = CType(SelectedBPSuperManufacturingFacility.Clone, IndustryFacility)
        Call SelectedBPT3CruiserManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.T3CruiserManufacturing), True)
        DefaultBPT3CruiserManufacturingFacility = CType(SelectedBPT3CruiserManufacturingFacility.Clone, IndustryFacility)
        Call SelectedBPT3DestroyerManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.T3DestroyerManufacturing), True)
        DefaultBPT3DestroyerManufacturingFacility = CType(SelectedBPT3DestroyerManufacturingFacility.Clone, IndustryFacility)
        Call SelectedBPBoosterManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.BoosterManufacturing), True)
        DefaultBPBoosterManufacturingFacility = CType(SelectedBPBoosterManufacturingFacility.Clone, IndustryFacility)
        Call SelectedBPSubsystemManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.SubsystemManufacturing), True)
        DefaultBPSubsystemManufacturingFacility = CType(SelectedBPSubsystemManufacturingFacility.Clone, IndustryFacility)
        Call SelectedBPComponentManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.ComponentManufacturing), True)
        DefaultBPComponentManufacturingFacility = CType(SelectedBPComponentManufacturingFacility.Clone, IndustryFacility)
        Call SelectedBPCapitalComponentManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.CapitalComponentManufacturing), True)
        DefaultBPCapitalComponentManufacturingFacility = CType(SelectedBPCapitalComponentManufacturingFacility.Clone, IndustryFacility)
        Call SelectedBPCopyFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.Copying), True)
        DefaultBPCopyFacility = CType(SelectedBPCopyFacility.Clone, IndustryFacility)
        Call SelectedBPInventionFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.Invention), True)
        DefaultBPInventionFacility = CType(SelectedBPInventionFacility.Clone, IndustryFacility)
        Call SelectedBPT3InventionFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.T3Invention), True)
        DefaultBPT3InventionFacility = CType(SelectedBPT3InventionFacility.Clone, IndustryFacility)
        Call SelectedBPNoPOSFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.NoPOSManufacturing), True)
        DefaultBPNoPOSFacility = CType(SelectedBPNoPOSFacility.Clone, IndustryFacility)

        ' Load these as special cases
        Call SelectedBPPOSFuelBlockFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.POSFuelBlockManufacturing), True)
        DefaultBPPOSFuelBlockFacility = CType(SelectedBPPOSFuelBlockFacility.Clone, IndustryFacility)
        Call SelectedBPPOSLargeShipFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.POSLargeShipManufacturing), True)
        DefaultBPPOSLargeShipFacility = CType(SelectedBPPOSLargeShipFacility.Clone, IndustryFacility)
        Call SelectedBPPOSModuleFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.POSModuleManufacturing), True)
        DefaultBPPOSModuleFacility = CType(SelectedBPPOSModuleFacility.Clone, IndustryFacility)

        ' Load all
        Call InitBPTab()

        ' Instead of saving, just load these locally and the next time they restart it will do the same until saved
        Call AllSettings.DeleteAllFacilitySettingsFiles(BPTab)

        MsgBox("BP Tab Default Facilities Restored", vbInformation, Application.ProductName)

    End Sub

    Private Sub mnuRestoreDefaultCalcFacilities_Click(sender As System.Object, e As System.EventArgs) Handles mnuRestoreDefaultCalcFacilities.Click

        ' Load up the Manufacturing Tab facilities
        Call SelectedCalcBaseManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.Manufacturing), True)
        DefaultCalcBaseManufacturingFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)
        Call SelectedCalcCapitalManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.CapitalManufacturing), True)
        DefaultCalcCapitalManufacturingFacility = CType(SelectedCalcCapitalManufacturingFacility.Clone, IndustryFacility)
        Call SelectedCalcSuperManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.SuperManufacturing), True)
        DefaultCalcSuperManufacturingFacility = CType(SelectedCalcSuperManufacturingFacility.Clone, IndustryFacility)
        Call SelectedCalcT3CruiserManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.T3CruiserManufacturing), True)
        DefaultCalcT3CruiserManufacturingFacility = CType(SelectedCalcT3CruiserManufacturingFacility.Clone, IndustryFacility)
        Call SelectedCalcT3DestroyerManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.T3DestroyerManufacturing), True)
        DefaultCalcT3DestroyerManufacturingFacility = CType(SelectedCalcT3DestroyerManufacturingFacility.Clone, IndustryFacility)
        Call SelectedCalcBoosterManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.BoosterManufacturing), True)
        DefaultCalcBoosterManufacturingFacility = CType(SelectedCalcBoosterManufacturingFacility.Clone, IndustryFacility)
        Call SelectedCalcSubsystemManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.SubsystemManufacturing), True)
        DefaultCalcSubsystemManufacturingFacility = CType(SelectedCalcSubsystemManufacturingFacility.Clone, IndustryFacility)
        Call SelectedCalcComponentManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.ComponentManufacturing), True)
        DefaultCalcComponentManufacturingFacility = CType(SelectedCalcComponentManufacturingFacility.Clone, IndustryFacility)
        Call SelectedCalcCapitalComponentManufacturingFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.CapitalComponentManufacturing), True)
        DefaultCalcCapitalComponentManufacturingFacility = CType(SelectedCalcCapitalComponentManufacturingFacility.Clone, IndustryFacility)
        Call SelectedCalcCopyFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.Copying), True)
        DefaultCalcCopyFacility = CType(SelectedCalcCopyFacility.Clone, IndustryFacility)
        Call SelectedCalcInventionFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.Invention), True)
        DefaultCalcInventionFacility = CType(SelectedCalcInventionFacility.Clone, IndustryFacility)
        Call SelectedCalcT3InventionFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.T3Invention), True)
        DefaultCalcT3InventionFacility = CType(SelectedCalcT3InventionFacility.Clone, IndustryFacility)
        Call SelectedCalcNoPOSFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.NoPOSManufacturing), True)
        DefaultCalcNoPOSFacility = CType(SelectedCalcNoPOSFacility.Clone, IndustryFacility)
        Call SelectedCalcPOSFuelBlockFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.POSFuelBlockManufacturing), True)
        DefaultCalcPOSFuelBlockFacility = CType(SelectedCalcPOSFuelBlockFacility.Clone, IndustryFacility)
        Call SelectedCalcPOSLargeShipFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.POSLargeShipManufacturing), True)
        DefaultCalcPOSLargeShipFacility = CType(SelectedCalcPOSLargeShipFacility.Clone, IndustryFacility)
        Call SelectedCalcPOSModuleFacility.LoadFacility(AllSettings.SetFacilityDefaultSettings(IndustryType.POSModuleManufacturing), True)
        DefaultCalcPOSModuleFacility = CType(SelectedCalcPOSModuleFacility.Clone, IndustryFacility)

        ' Load all
        Call InitManufacturingTab()

        ' Instead of saving, just load these locally and the next time they restart it will do the same until saved
        Call AllSettings.DeleteAllFacilitySettingsFiles(BPTab)

        MsgBox("Manufacturing Tab Default Facilities Restored", vbInformation, Application.ProductName)

    End Sub

    Private Sub mnuRestoreDefaultUpdatePrices_Click(sender As System.Object, e As System.EventArgs) Handles mnuRestoreDefaultUpdatePrices.Click
        Call AllSettings.SetDefaultUpdatePriceSettings()
        ' Save them
        Call AllSettings.SaveUpdatePricesSettings(AllSettings.GetUpdatePricesSettings)
        ' Load them again
        UserUpdatePricesTabSettings = AllSettings.LoadUpdatePricesSettings()

        ' Reload the tab
        Call InitUpdatePricesTab()

        MsgBox("Update Prices Tab Default Settings Restored", vbInformation, Application.ProductName)

    End Sub

    Private Sub mnuRestoreDefaultReactions_Click(sender As System.Object, e As System.EventArgs) Handles mnuRestoreDefaultReactions.Click
        Call AllSettings.SetDefaultReactionSettings()
        ' Save them
        Call AllSettings.SaveReactionSettings(AllSettings.GetReactionSettings)
        ' Load them again
        UserReactionTabSettings = AllSettings.LoadReactionSettings()

        ' Reload the tab
        Call InitReactionsTab()

        MsgBox("Reactions Tab Default Settings Restored", vbInformation, Application.ProductName)

    End Sub

    Private Sub mnuRestoreDefaultDatacores_Click(sender As System.Object, e As System.EventArgs) Handles mnuRestoreDefaultDatacores.Click
        Call AllSettings.SetDefaultDatacoreSettings()
        ' Save them
        Call AllSettings.SaveDatacoreSettings(AllSettings.GetDatacoreSettings)
        ' Load them again
        UserDCTabSettings = AllSettings.LoadDatacoreSettings()

        ' Reload the tab
        Call InitDatacoreTab()

        MsgBox("Datacores Tab Default Settings Restored", vbInformation, Application.ProductName)

    End Sub

    Private Sub mnuRestoreDefaultManufacturing_Click(sender As System.Object, e As System.EventArgs) Handles mnuRestoreDefaultManufacturing.Click
        Call AllSettings.SetDefaultManufacturingSettings()

        ' Also need to reset the shared variables
        UserApplicationSettings.DefaultBPME = DefaultSettings.DefaultSettingME
        UserApplicationSettings.DefaultBPTE = DefaultSettings.DefaultSettingTE

        ' Save them
        Call AllSettings.SaveManufacturingSettings(AllSettings.GetManufacturingSettings)
        Call AllSettings.SaveApplicationSettings(UserApplicationSettings)

        ' Load them again
        UserManufacturingTabSettings = AllSettings.LoadManufacturingSettings()
        UserApplicationSettings = AllSettings.LoadApplicationSettings()

        ' Reload the tab
        Call InitManufacturingTab()
        ' Also update these shared form variables
        'cmbBPBuildMod.Text = DefaultSettings.DefaultBuildSlotModifier

        MsgBox("Manufacturing Tab Default Settings Restored", vbInformation, Application.ProductName)

    End Sub

    Private Sub mnuRestoreDefaultMining_Click(sender As System.Object, e As System.EventArgs) Handles mnuRestoreDefaultMining.Click
        Call AllSettings.SetDefaultMiningSettings()
        ' Save them
        Call AllSettings.SaveMiningSettings(AllSettings.GetMiningSettings)
        ' Load them again
        UserMiningTabSettings = AllSettings.LoadMiningSettings()

        ' Reload the tab
        Call InitMiningTab()

        MsgBox("Minings Tab Default Settings Restored", vbInformation, Application.ProductName)
    End Sub

    Private Sub chkBPIncludeCopyTime_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIncludeCopyTime.CheckedChanged
        If Not FirstLoad And Not UpdatingInventionChecks Then
            ' Set the copy time check
            SelectedBPCopyFacility.IncludeActivityTime = chkBPIncludeCopyTime.Checked
            If Not IsNothing(SelectedBlueprint) Then
                ' Use the original ME and TE values when they change the meta level
                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)

            End If
        End If
    End Sub

    Private Sub chkBPIncludeCopyCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIncludeCopyCosts.CheckedChanged
        If Not FirstLoad And Not UpdatingInventionChecks Then
            ' Include copy costs
            SelectedBPCopyFacility.IncludeActivityCost = chkBPIncludeCopyCosts.Checked
            If Not IsNothing(SelectedBlueprint) Then
                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
            End If
        End If
    End Sub

    Private Sub chkBPIncludeInventionTime_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIncludeInventionTime.CheckedChanged
        If Not FirstLoad And Not UpdatingInventionChecks Then
            ' Include invention time
            SelectedBPInventionFacility.IncludeActivityTime = chkBPIncludeInventionTime.Checked
            If Not IsNothing(SelectedBlueprint) Then
                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
            End If
        End If
    End Sub

    Private Sub chkBPIncludeInventionCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIncludeInventionCosts.CheckedChanged
        If Not FirstLoad And Not UpdatingInventionChecks Then
            ' Include cost for invention
            SelectedBPInventionFacility.IncludeActivityCost = chkBPIncludeInventionCosts.Checked
            ' Use the original ME and TE values when they change the meta level
            If Not IsNothing(SelectedBlueprint) Then
                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
            End If
        End If
    End Sub

    Private Sub chkBPIncludeT3Time_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIncludeT3Time.CheckedChanged
        If Not FirstLoad And Not UpdatingInventionChecks Then
            ' Set the time for T3 invention
            SelectedBPT3InventionFacility.IncludeActivityTime = chkBPIncludeT3Time.Checked
            If Not IsNothing(SelectedBlueprint) Then
                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
            End If
        End If
    End Sub

    Private Sub chkBPIncludeT3Costs_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIncludeT3Costs.CheckedChanged
        If Not FirstLoad And Not UpdatingInventionChecks Then
            ' Set the usage for T3 invention
            SelectedBPT3InventionFacility.IncludeActivityCost = chkBPIncludeT3Costs.Checked
            If Not IsNothing(SelectedBlueprint) Then
                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
            End If
        End If
    End Sub

    Private Sub UpdateTeamsToolStripMenuItem_Click(sender As System.Object, e As System.EventArgs) Handles mnuUpdateCRESTTeams.Click
        Call UpdateCRESTTeams()
    End Sub

    Private Sub UpdateIndustryFacilitiesToolStripMenuItem_Click(sender As System.Object, e As System.EventArgs) Handles mnuUpdateIndustryFacilities.Click
        Call UpdateCRESTIndustrySystemIndicies()
    End Sub

    Private Sub UpdateMarketPricesToolStripMenuItem_Click(sender As System.Object, e As System.EventArgs) Handles mnuUpdateCRESTMarketPrices.Click
        Call UpdateCRESTMarketPrices()
    End Sub

    ' Function runs the CREST update for system indicies
    Private Sub UpdateCRESTIndustrySystemIndicies()
        Dim CREST As New EVECREST
        Dim f1 As New frmCRESTStatus

        Application.UseWaitCursor = True
        Call f1.Show()
        Application.DoEvents()
        ' Always do indicies first since facilities has a field it uses
        If CREST.UpdateIndustrySystemsCostIndex(f1.lblCRESTStatus, f1.pgCREST) And CREST.UpdateIndustryFacilties(f1.lblCRESTStatus, f1.pgCREST) Then
            ' Reset all facility combos
            CalcBaseFacilityRegionsLoaded = False
            CalcBaseFacilitySystemsLoaded = False
            CalcBaseFacilitiesLoaded = False
            CalcComponentFacilityRegionsLoaded = False
            CalcComponentFacilitySystemsLoaded = False
            CalcComponentFacilitiesLoaded = False
            CalcInventionFacilityRegionsLoaded = False
            CalcInventionFacilitySystemsLoaded = False
            CalcInventionFacilitiesLoaded = False
            CalcCopyFacilityRegionsLoaded = False
            CalcCopyFacilitySystemsLoaded = False
            CalcCopyFacilitiesLoaded = False
            CalcNoPOSFacilityRegionsLoaded = False
            CalcNoPOSFacilitySystemsLoaded = False
            CalcNoPOSFacilitiesLoaded = False
            CalcCapitalFacilityRegionsLoaded = False
            CalcCapitalFacilitySystemsLoaded = False
            CalcCapitalFacilitiesLoaded = False
            CalcSuperFacilityRegionsLoaded = False
            CalcSuperFacilitySystemsLoaded = False
            CalcSuperFacilitiesLoaded = False
            CalcT3FacilityRegionsLoaded = False
            CalcT3FacilitySystemsLoaded = False
            CalcT3FacilitiesLoaded = False
            CalcSubsystemFacilityRegionsLoaded = False
            CalcSubsystemFacilitySystemsLoaded = False
            CalcSubsystemFacilitiesLoaded = False
            CalcBoosterFacilityRegionsLoaded = False
            CalcBoosterFacilitySystemsLoaded = False
            CalcBoosterFacilitiesLoaded = False

            LoadingFacilityActivities = False
            LoadingFacilityTypes = False
            LoadingFacilityRegions = False
            LoadingFacilitySystems = False
            LoadingFacilities = False

            ' Reload the industry facilities now
            Call SetAllFacilities(False)

            ' Refresh the BP Tab if there is a blueprint selected
            If Not IsNothing(SelectedBlueprint) Then
                Call RefreshBP(True)
            End If

            MsgBox("Industry System Indicies Updated", vbInformation, Application.ProductName)
        End If

        f1.Dispose()
        Application.UseWaitCursor = False

    End Sub

    ' Function runs the CREST update for teams
    Private Sub UpdateCRESTTeams()
        Dim CREST As New EVECREST
        Dim f1 As New frmCRESTStatus

        Application.UseWaitCursor = True
        Call f1.Show()
        Application.DoEvents()
        If CREST.UpdateIndustryTeams(f1.lblCRESTStatus, f1.pgCREST) And CREST.UpdateIndustryTeamAuctions(f1.lblCRESTStatus, f1.pgCREST) And CREST.UpdateIndustrySpecialties(f1.lblCRESTStatus, f1.pgCREST) Then
            ' Reset Team Combos
            BPTeamComboLoaded = False
            CalcManufacturingTeamComboLoaded = False
            CalcComponentManufacturingTeamComboLoaded = False
            CalcInventionTeamComboLoaded = False
            CalcCopyTeamComboLoaded = False

            ' Reload all the teams
            Call SetAllTeams(False)

            MsgBox("Industry Teams Updated", vbInformation, Application.ProductName)

        End If

        f1.Dispose()
        Application.UseWaitCursor = False

    End Sub

    ' Function runs the CREST update for market prices
    Private Sub UpdateCRESTMarketPrices()
        Dim CREST As New EVECREST
        Dim f1 As New frmCRESTStatus

        Application.UseWaitCursor = True
        Call f1.Show()
        Application.DoEvents()
        If CREST.UpdateMarketPrices(f1.lblCRESTStatus, f1.pgCREST) Then

            ' Update all the prices in the program
            Call UpdateProgramPrices()

            MsgBox("Market Prices Updated", vbInformation, Application.ProductName)
        End If

        f1.Dispose()
        Application.UseWaitCursor = False

    End Sub

#End Region

#Region "InlineListUpdate"

    ' Determines where to show the text box when clicking on the list sent
    Private Sub ListClicked(ListRef As ListView, sender As Object, e As System.Windows.Forms.MouseEventArgs)
        Dim iSubIndex As Integer = 0

        ' Hide the text box when a new line is selected
        txtListEdit.Hide()

        CurrentRow = ListRef.GetItemAt(e.X, e.Y) ' which listviewitem was clicked
        SelectedGrid = ListRef

        If CurrentRow Is Nothing Then
            Exit Sub
        End If

        CurrentCell = CurrentRow.GetSubItemAt(e.X, e.Y)  ' which subitem was clicked

        ' Determine where the previous and next item boxes will be based on what they clicked - used in tab event handling
        Call SetNextandPreviousCells(ListRef)

        ' See which column has been clicked
        iSubIndex = CurrentRow.SubItems.IndexOf(CurrentCell)

        If ListRef.Name <> lstPricesView.Name And ListRef.Name <> lstMineGrid.Name Then
            ' Set the columns that can be edited, just ME and Price
            If iSubIndex = 2 Or iSubIndex = 3 Then

                If iSubIndex = 2 Then
                    MEUpdate = True
                Else
                    MEUpdate = False
                End If

                If iSubIndex = 3 Then
                    PriceUpdate = True
                Else
                    PriceUpdate = False
                End If

                ' For the update grids in the Blueprint Tab, only show the box if
                ' 1 - If the ME is clicked and it has something other than a '-' in it (meaning no BP)
                ' 2 - If the Price is clicked and the ME box has '-' in it
                If (CurrentRow.SubItems(2).Text <> "-" And MEUpdate) Or (CurrentRow.SubItems(2).Text = "-" And PriceUpdate) Then
                    Call ShowMEPETextBox(ListRef)
                End If

            End If

        Else ' Price update

            ' Only process the price box logic on rows that are unrefined and compressed ore on mining tab
            If ListRef.Name = lstMineGrid.Name And CurrentRow.SubItems(2).Text = "Refined" Then
                Exit Sub
            End If

            ' Set the columns that can be edited, just Price
            If iSubIndex = 3 Then
                Call ShowMEPETextBox(ListRef)
                PriceUpdate = True
            End If

        End If

    End Sub

    ' For updating the items in the list by clicking on them
    Private Sub ProcessKeyDownEdit(SentKey As Keys, ListRef As ListView)
        Dim SQL As String
        Dim readerBP As SQLiteDataReader

        Dim MEValue As String = ""
        Dim PriceValue As Double = 0
        Dim PriceUpdated As Boolean = False

        ' Change blank entry to 0
        If Trim(txtListEdit.Text) = "" Then
            txtListEdit.Text = "0"
        End If

        ' If they hit enter or tab away, mark the BP as owned in the DB with the values entered
        If (SentKey = Keys.Enter Or SentKey = Keys.ShiftKey Or SentKey = Keys.Tab) And DataEntered Then

            ' Check the input first
            If Not IsNumeric(txtListEdit.Text) And MEUpdate Then
                MsgBox("Invalid ME Value", vbExclamation)
                Exit Sub
            End If

            If Not IsNumeric(txtListEdit.Text) And PriceUpdate Then
                MsgBox("Invalid Price Value", vbExclamation)
                Exit Sub
            End If

            ' Save the data depending on what we are updating
            If MEUpdate Then
                MEValue = txtListEdit.Text
            End If

            If PriceUpdate Then
                PriceValue = CDbl(txtListEdit.Text)
            End If

            ' Now do the update for the grids
            If ListRef.Name <> lstPricesView.Name And ListRef.Name <> lstMineGrid.Name Then
                ' BP Grid update

                ' Check the numbers, if the same then don't update
                If MEValue = CurrentRow.SubItems(2).Text And PriceValue = CDbl(CurrentRow.SubItems(3).Text) Then
                    ' Skip down
                    GoTo Tabs
                End If

                ' First, see if we are updating an ME or a price, then deal with each separately
                If MEUpdate Then
                    ' First we need to look up the Blueprint ID
                    SQL = "SELECT BLUEPRINT_ID, BLUEPRINT_NAME FROM ALL_BLUEPRINTS WHERE ITEM_NAME = '" & CurrentRow.SubItems(0).Text & "'"
                    DBCommand = New SQLiteCommand(SQL, DB)
                    readerBP = DBCommand.ExecuteReader
                    readerBP.Read()

                    ' If they update the ME of the blueprint, then we mark it as Owned and a 0 for TE value, but set the type depending on the bp loaded
                    Dim TempBPType As BPType
                    Dim AdditionalCost As Double

                    If (SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T2 And chkBPIgnoreInvention.Checked = True) _
                        Or SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T1 Then
                        ' T2 BPO or T1 BPO
                        TempBPType = BPType.Original
                    Else
                        ' Remaining T2 and T3 must be invited
                        TempBPType = BPType.InventedBPC
                    End If

                    ' Check additional costs for saving with this bp
                    If IsNumeric(txtBPAddlCosts.Text) Then
                        AdditionalCost = CDbl(txtBPAddlCosts.Text)
                    Else
                        AdditionalCost = 0
                    End If

                    Call UpdateBPinDB(readerBP.GetInt64(0), readerBP.GetString(1), CInt(MEValue), 0, TempBPType, CInt(MEValue), 0, 0, False, False, AdditionalCost)

                    ' Mark the line with white color since it's no longer going to be unowned
                    CurrentRow.BackColor = Color.White

                Else ' Price per unit update

                    SQL = "UPDATE ITEM_PRICES SET PRICE = " & CStr(CDbl(txtListEdit.Text)) & ", PRICE_TYPE = 'User' WHERE ITEM_NAME = '" & CurrentRow.SubItems(0).Text & "'"
                    Call ExecuteNonQuerySQL(SQL)

                    ' Mark the line text with black incase it is red for no price
                    CurrentRow.ForeColor = Color.Black

                    PriceUpdated = True

                End If

                ' Update the data in the current row
                CurrentRow.SubItems(2).Text = CStr(MEValue)
                CurrentRow.SubItems(3).Text = FormatNumber(PriceValue, 2)

                ' For both ME and Prices, we need to re-calculate the blueprint (hit the Refresh Button) to reflect the new numbers
                ' First save the current grid for locations
                RefreshingGrid = True
                Call RefreshBP()
                RefreshingGrid = False

            Else
                ' Price List Update
                SQL = "UPDATE ITEM_PRICES SET PRICE = " & CStr(CDbl(txtListEdit.Text)) & ", PRICE_TYPE = 'User' WHERE ITEM_ID = " & CurrentRow.SubItems(0).Text
                Call ExecuteNonQuerySQL(SQL)

                ' Change the value in the price grid, but don't update the grid
                CurrentRow.SubItems(3).Text = FormatNumber(txtListEdit.Text, 2)

                PriceUpdated = True

            End If

            ' If we updated a price, then update the program everywhere to be consistent
            If PriceUpdated Then
                IgnoreFocus = True
                Call UpdateProgramPrices()
                IgnoreFocus = False
            End If

            ' Play sound to indicate update complete
            Call PlayNotifySound()

            ' Reset text they entered if tabbed
            If SentKey = Keys.ShiftKey Or SentKey = Keys.Tab Then
                txtListEdit.Text = ""
            End If

            If SentKey = Keys.Enter Then
                ' Just refresh and select the current row
                CurrentRow.Selected = True
                txtListEdit.Visible = False
            End If

            ' Data updated, so reset
            DataEntered = False

        End If

Tabs:
        ' If they hit tab, then tab to the next cell
        If SentKey = Keys.Tab Then
            If CurrentRow.Index = -1 Then
                ' Reset the current row based on the original click
                CurrentRow = ListRef.GetItemAt(SavedListClickLoc.X, SavedListClickLoc.Y)
                CurrentCell = CurrentRow.GetSubItemAt(SavedListClickLoc.X, SavedListClickLoc.Y)
                ' Reset the next and previous cells
                SetNextandPreviousCells(ListRef)
            End If

            CurrentCell = NextCell
            ' Reset these each time
            Call SetNextandPreviousCells(ListRef, "Next")
            If CurrentRow.Index = 0 Then
                ' Scroll to top
                ListRef.Items.Item(0).Selected = True
                ListRef.EnsureVisible(0)
                ListRef.Update()
            Else
                ' Make sure the row is visible
                ListRef.EnsureVisible(CurrentRow.Index)
            End If

            ' Show the text box
            Call ShowMEPETextBox(ListRef)
        End If

        ' If shift+tab, then go to the previous cell 
        If SentKey = Keys.ShiftKey Then
            If CurrentRow.Index = -1 Then
                ' Reset the current row based on the original click
                CurrentRow = ListRef.GetItemAt(SavedListClickLoc.X, SavedListClickLoc.Y)
                CurrentCell = CurrentRow.GetSubItemAt(SavedListClickLoc.X, SavedListClickLoc.Y)
                ' Reset the next and previous cells
                SetNextandPreviousCells(ListRef)
            End If

            CurrentCell = PreviousCell
            ' Reset these each time
            Call SetNextandPreviousCells(ListRef, "Previous")
            If CurrentRow.Index = ListRef.Items.Count - 1 Then
                ' Scroll to bottom
                ListRef.Items.Item(ListRef.Items.Count - 1).Selected = True
                ListRef.EnsureVisible(ListRef.Items.Count - 1)
                ListRef.Update()
            Else
                ' Make sure the row is visible
                ListRef.EnsureVisible(CurrentRow.Index)
            End If

            ' Show the text box
            Call ShowMEPETextBox(ListRef)
        End If

    End Sub

    ' Determines where the previous and next item boxes will be based on what they clicked - used in tab event handling
    Private Sub SetNextandPreviousCells(ListRef As ListView, Optional CellType As String = "")
        Dim iSubIndex As Integer = 0

        ' Normal Row
        If CellType = "Next" Then
            CurrentRow = NextCellRow
        ElseIf CellType = "Previous" Then
            CurrentRow = PreviousCellRow
        End If

        ' Get index of column
        iSubIndex = CurrentRow.SubItems.IndexOf(CurrentCell)

        ' Get next and previous rows. If at end, wrap to top. If at top, wrap to bottom
        If ListRef.Items.Count = 1 Then
            NextRow = CurrentRow
            PreviousRow = CurrentRow
        ElseIf CurrentRow.Index <> ListRef.Items.Count - 1 And CurrentRow.Index <> 0 Then
            ' Not the last line, so set the next and previous
            NextRow = ListRef.Items.Item(CurrentRow.Index + 1)
            PreviousRow = ListRef.Items.Item(CurrentRow.Index - 1)
        ElseIf CurrentRow.Index = 0 Then
            NextRow = ListRef.Items.Item(CurrentRow.Index + 1)
            ' Wrap to bottom
            PreviousRow = ListRef.Items.Item(ListRef.Items.Count - 1)
        ElseIf CurrentRow.Index = ListRef.Items.Count - 1 Then
            ' Need to wrap up to top
            NextRow = ListRef.Items.Item(0)
            PreviousRow = ListRef.Items.Item(CurrentRow.Index - 1)
        End If

        If ListRef.Name <> lstPricesView.Name And ListRef.Name <> lstMineGrid.Name Then

            ' For the update grids in the Blueprint Tab, only show the box if
            ' 1 - If the ME is clicked and it has something other than a '-' in it (meaning no BP)
            ' 2 - If the Price is clicked and the ME box has '-' in it

            ' The next row must be an ME or Price box on the next row 
            ' or a previous ME or price box on the previous row
            If iSubIndex = 2 Or iSubIndex = 3 Then
                ' Set the next and previous ME boxes (subitems)
                ' If the next row ME box is a '-' then the next row cell is Price
                If NextRow.SubItems(2).Text = "-" Then
                    NextCell = NextRow.SubItems.Item(3) ' Next row price box
                Else ' It can be the ME box in the next row
                    NextCell = NextRow.SubItems.Item(2) ' Next row ME box
                End If

                NextCellRow = NextRow

                'If the previous row ME box is a '-' then the previous row is Price
                If PreviousRow.SubItems(2).Text = "-" Then
                    PreviousCell = PreviousRow.SubItems.Item(3) ' Next row price box
                Else ' It can be the ME box in the next row
                    PreviousCell = PreviousRow.SubItems.Item(2) ' Next row ME box
                End If

                PreviousCellRow = PreviousRow

                If iSubIndex = 2 Then
                    MEUpdate = True
                    PriceUpdate = False
                Else
                    MEUpdate = False
                    PriceUpdate = True
                End If

            Else
                NextCell = Nothing
                PreviousCell = Nothing
                CurrentCell = Nothing
            End If

        Else ' Price list 
            ' For this, just go up and down the rows
            NextCell = NextRow.SubItems.Item(3)
            NextCellRow = NextRow
            PreviousCell = PreviousRow.SubItems.Item(3)
            PreviousCellRow = PreviousRow
            PriceUpdate = True
            MEUpdate = False
        End If

    End Sub

    ' Shows the text box on the grid where clicked if enabled
    Private Sub ShowMEPETextBox(ListRef As ListView)
        Dim lLeft As Integer = 0
        Dim lWidth As Integer = 0

        ' Get size of column and location
        lLeft = CurrentCell.Bounds.Left + 2
        lWidth = CurrentCell.Bounds.Width

        ' Save the center location of the edit box
        SavedListClickLoc.X = CurrentCell.Bounds.Left + CInt(CurrentCell.Bounds.Width / 2)
        SavedListClickLoc.Y = CurrentCell.Bounds.Top + CInt(CurrentCell.Bounds.Height / 2)

        With txtListEdit
            .Hide()
            .SetBounds(lLeft + ListRef.Left + 4, CurrentCell.Bounds.Top + ListRef.Top + 48, _
                       lWidth, CurrentCell.Bounds.Height)
            .Text = CurrentCell.Text
            .Show()
            If CurrentRow.SubItems(2).Text = txtListEdit.Text Then
                .TextAlign = HorizontalAlignment.Center
            Else
                .TextAlign = HorizontalAlignment.Right
            End If

            .Focus()
        End With

    End Sub

    ' Processes the tab function in the text box for the grid. This overrides the default tabbing between controls
    Protected Overrides Function ProcessTabKey(ByVal TabForward As Boolean) As Boolean
        Dim ac As Control = Me.ActiveControl

        If TabForward Then
            If ac Is txtListEdit Then
                Call ProcessKeyDownEdit(Keys.Tab, SelectedGrid)
                Return True
            End If
        Else
            If ac Is txtListEdit Then
                ' This is Shift + Tab but just send Shift for ease of processing
                Call ProcessKeyDownEdit(Keys.ShiftKey, SelectedGrid)
                Return True
            End If
        End If

        Return MyBase.ProcessTabKey(TabForward)

    End Function

    Private Sub txtListEdit_GotFocus(sender As Object, e As System.EventArgs) Handles txtListEdit.GotFocus
        Call txtListEdit.SelectAll()
    End Sub

    Private Sub txtListEdit_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtListEdit.KeyDown
        If Not DataEntered Then ' If data already entered, then they didn't do it through paste
            DataEntered = ProcessCutCopyPasteSelect(txtListEdit, e)
        End If

        If e.KeyCode = Keys.Enter Then
            IgnoreFocus = True
            Call ProcessKeyDownEdit(Keys.Enter, SelectedGrid)
            IgnoreFocus = False
        End If
    End Sub

    Private Sub txtListEdit_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtListEdit.KeyPress
        ' Make sure it's the right format for ME or Price update
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If MEUpdate Then
                If allowedMETEChars.IndexOf(e.KeyChar) = -1 Then
                    ' Invalid Character
                    e.Handled = True
                Else
                    DataEntered = True
                End If
            ElseIf PriceUpdate Then
                If allowedPriceChars.IndexOf(e.KeyChar) = -1 Then
                    ' Invalid Character
                    e.Handled = True
                Else
                    DataEntered = True
                End If
            End If

        End If

    End Sub

    Private Sub txtListEdit_LostFocus(sender As Object, e As System.EventArgs) Handles txtListEdit.LostFocus
        If Not RefreshingGrid And DataEntered And Not IgnoreFocus Then
            Call ProcessKeyDownEdit(Keys.Enter, SelectedGrid)
        End If
        txtListEdit.Visible = False
    End Sub

    Private Sub txtListEdit_TextChanged(sender As Object, e As System.EventArgs) Handles txtListEdit.TextChanged
        If MEUpdate Then ' make sure they only enter 0-10 for values
            Call VerifyMETEEntry(txtListEdit, "ME")
        End If
    End Sub

    Private Sub lstBPComponentMats_DoubleClick(sender As Object, e As System.EventArgs) Handles lstBPComponentMats.DoubleClick
        Dim rsBP As SQLiteDataReader
        Dim SQL As String
        Dim BuildType As String = ""
        Dim BuildFacility As IndustryFacility

        ' If the item doesn't have an ME (set to "-") then don't load
        If lstBPComponentMats.SelectedItems(0).SubItems(2).Text <> "-" Then
            SQL = "SELECT BLUEPRINT_ID FROM ALL_BLUEPRINTS WHERE ITEM_NAME ="
            SQL = SQL & "'" & lstBPComponentMats.SelectedItems(0).SubItems(0).Text & "'"

            DBCommand = New SQLiteCommand(SQL, DB)
            rsBP = DBCommand.ExecuteReader()

            If chkBPBuildBuy.Checked Then
                BuildType = "Build/Buy"
            End If

            ' Set the type build facility
            BuildFacility = GetManufacturingFacility(GetProductionType(ActivityManufacturing, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, cmbBPFacilityType.Text), BPTab)

            Call LoadBPfromDoubleClick(CLng(rsBP.GetValue(0)), BuildType, "Raw", "Blueprint Tab", _
                                       SelectedBPManufacturingTeam, SelectedBPComponentManufacturingTeam, SelectedBPCopyTeam, _
                                       BuildFacility, SelectedBPComponentManufacturingFacility, SelectedBPInventionFacility, SelectedBPCopyFacility,
                                       chkBPTaxes.Checked, chkBPBrokerFees.Checked, chkBPFacilityIncludeUsage.Checked, _
                                       lstBPComponentMats.SelectedItems(0).SubItems(2).Text, lstBPComponentMats.SelectedItems(0).SubItems(1).Text, txtBPLines.Text, "1") ' Use 1 bp for now
        End If

    End Sub

    ' Detects Scroll event and hides boxes
    Private Sub lstBPComponentMats_ProcMsg(ByVal m As System.Windows.Forms.Message) Handles lstBPComponentMats.ProcMsg
        txtListEdit.Hide()
    End Sub

    ' Detects Scroll event and hides boxes
    Private Sub lstBPRawMats_ProcMsg(ByVal m As System.Windows.Forms.Message) Handles lstBPRawMats.ProcMsg
        txtListEdit.Hide()
    End Sub

    Private Sub lstPricesView_ColumnWidthChanging(sender As Object, e As System.Windows.Forms.ColumnWidthChangingEventArgs) Handles lstPricesView.ColumnWidthChanging
        If e.ColumnIndex = 0 Or e.ColumnIndex >= 4 Then
            e.Cancel = True
            e.NewWidth = lstPricesView.Columns(e.ColumnIndex).Width
        End If
    End Sub

    ' Detects Scroll event and hides boxes
    Private Sub lstPricesView_ProcMsg(ByVal m As System.Windows.Forms.Message) Handles lstPricesView.ProcMsg
        txtListEdit.Hide()
    End Sub

#End Region

#Region "Blueprints Tab"

#Region "Blueprints Tab User Objects (Check boxes, Text, Buttons) Functions/Procedures "

    ' Facility functions
    Private Sub cmbBPFacilityActivities_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbBPFacilityActivities.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbBPFacilityActivities_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbBPFacilityActivities.SelectedIndexChanged

        If Not LoadingFacilityActivities And Not FirstLoad Then
            CurrentIndustryType = GetProductionType(cmbBPFacilityActivities.Text, CurrentBPGroupID, CurrentBPCategoryID, cmbBPFacilityType.Text)

            ' If they switch the activity and it changed from the previous, then load the selected facility for this activity
            If CurrentIndustryType <> PreviousIndustryType Then
                Dim CostCheck As CheckBox
                Dim TimeCheck As CheckBox

                Select Case CurrentIndustryType
                    Case IndustryType.Invention, IndustryType.T3Invention
                        CostCheck = chkBPIncludeInventionCosts
                        TimeCheck = chkBPIncludeInventionTime
                    Case IndustryType.Copying
                        CostCheck = chkBPIncludeCopyCosts
                        TimeCheck = chkBPIncludeCopyTime
                    Case IndustryType.T3Invention
                        CostCheck = chkBPIncludeT3Costs
                        TimeCheck = chkBPIncludeT3Time
                    Case Else
                        CostCheck = Nothing
                        TimeCheck = Nothing
                End Select

                Call LoadFacility(CurrentIndustryType, False, True, _
                                  cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                                  lblBPFacilityBonus, lblBPFacilityDefault, lblBPFacilityManualME, txtBPFacilityManualME, _
                                  lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, _
                                  btnBPFacilitySave, lblBPFacilityTaxRate, BPTab, _
                                  chkBPFacilityIncludeUsage, Nothing, CostCheck, TimeCheck, FullyLoadedBPFacility,
                                  cmbBPFacilityActivities, SelectedBlueprint.GetTechLevel, CurrentBPGroupID, CurrentBPCategoryID, False)
                PreviousIndustryType = CurrentIndustryType
                ' Reset all previous to current list, since all the combos should be loaded
                PreviousFacilityType = cmbBPFacilityType.Text
                PreviousFacilityEquipment = cmbBPFacilityorArray.Text
                PreviousFacilityRegion = cmbBPFacilityRegion.Text
                PreviousFacilitySystem = cmbBPFacilitySystem.Text
            End If

            Call cmbBPFacilityType.Focus()

        End If
    End Sub

    Private Sub cmbBPFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbBPFacilityType.DropDown
        PreviousFacilityType = cmbBPFacilityType.Text
    End Sub

    Private Sub cmbBPFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbBPFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbBPFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbBPFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousFacilityType <> cmbBPFacilityType.Text Then
            ' Might not want to set a facility for copy or invention
            If Not LoadingFacilityTypes And Not FirstLoad And cmbBPFacilityType.Text <> None Then
                Call LoadFacilityRegions(SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, True, _
                                         cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                                         lblBPFacilityBonus, lblBPFacilityDefault, lblBPFacilityManualME, txtBPFacilityManualME, _
                                         lblBPFacilityManualTax, txtBPFacilityManualTax, _
                                         lblBPFacilityManualTE, txtBPFacilityManualTE, btnBPFacilitySave, lblBPFacilityTaxRate, BPTab, _
                                         chkBPFacilityIncludeUsage, lblBPFacilityUsage)
                Call cmbBPFacilityRegion.Focus()
            ElseIf cmbBPFacilityType.Text = None Then
                Call SetNoFacility(cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, chkBPFacilityIncludeUsage)
                Call tabBPInventionEquip.Focus()
                ' Allow this to be saved as a default though
                btnBPFacilitySave.Enabled = True
                ' changed so not the default
                lblBPFacilityDefault.ForeColor = SystemColors.ButtonShadow
                ' Save the facility locally
                ' For a pos, need to display the results and reload the bp
                Dim Defaults As New ProgramSettings
                Dim CostCheck As CheckBox
                Dim TimeCheck As CheckBox
                Dim TempIndustryType As IndustryType = GetProductionType(cmbBPFacilityActivities.Text, CurrentBPGroupID, CurrentBPCategoryID, cmbBPFacilityType.Text)

                Select Case TempIndustryType
                    Case IndustryType.Invention, IndustryType.T3Invention
                        CostCheck = chkBPIncludeInventionCosts
                        TimeCheck = chkBPIncludeInventionTime
                    Case IndustryType.Copying
                        CostCheck = chkBPIncludeCopyCosts
                        TimeCheck = chkBPIncludeCopyTime
                    Case IndustryType.T3Invention
                        CostCheck = chkBPIncludeT3Costs
                        TimeCheck = chkBPIncludeT3Time
                    Case Else
                        CostCheck = Nothing
                        TimeCheck = Nothing
                End Select
                Call DisplayFacilityBonus(TempIndustryType, _
                              Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, CurrentBPGroupID, CurrentBPCategoryID, _
                              cmbBPFacilityActivities.Text, cmbBPFacilityType.Text, cmbBPFacilityorArray.Text, _
                              cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                              lblBPFacilityBonus, lblBPFacilityDefault, _
                              lblBPFacilityManualME, txtBPFacilityManualME, _
                              lblBPFacilityManualTE, txtBPFacilityManualTE, _
                              lblBPFacilityManualTax, txtBPFacilityManualTax, _
                              btnBPFacilitySave, lblBPFacilityTaxRate, _
                              chkBPFacilityIncludeUsage, CostCheck, TimeCheck, BPTab, FullyLoadedBPFacility, chkBPFacilityIncludeUsage.Checked)
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblBPFacilityBonus, lblBPFacilityTaxRate, lblBPFacilityManualME, _
                                        lblBPFacilityManualTE, txtBPFacilityManualME, txtBPFacilityManualTE, _
                                        lblBPFacilityManualTax, txtBPFacilityManualTax, lblBPFacilityUsage)
            FullyLoadedBPFacility = False
            PreviousFacilityType = cmbBPFacilityType.Text
            ' Reset the previous records
            PreviousFacilityEquipment = ""
            PreviousFacilityRegion = ""
            PreviousFacilitySystem = ""
        End If
    End Sub

    Private Sub cmbBPFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbBPFacilityRegion.DropDown
        If Not FirstLoad And Not BPFacilityRegionsLoaded Then
            PreviousFacilityRegion = cmbBPFacilityRegion.Text
            ' Save the current
            PreviousFacilityRegion = cmbBPFacilityRegion.Text
            Call LoadFacilityRegions(SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, False, _
                                     cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                                     lblBPFacilityBonus, lblBPFacilityDefault, lblBPFacilityManualME, txtBPFacilityManualME, _
                                     lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, _
                                     btnBPFacilitySave, lblBPFacilityTaxRate, BPTab, _
                                     chkBPFacilityIncludeUsage, lblBPFacilityUsage)
        End If
    End Sub

    Private Sub cmbBPFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbBPFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbBPFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbBPFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousFacilityRegion <> cmbBPFacilityRegion.Text Then
            Call LoadFacilitySystems(SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, True, _
                                     cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                                     lblBPFacilityBonus, lblBPFacilityTaxRate, lblBPFacilityManualME, txtBPFacilityManualME, _
                                     lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, _
                                     lblBPFacilityDefault, btnBPFacilitySave, BPTab, chkBPFacilityIncludeUsage, lblBPFacilityUsage)
            Call cmbBPFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblBPFacilityBonus, lblBPFacilityTaxRate, lblBPFacilityManualME, _
                                        lblBPFacilityManualTE, txtBPFacilityManualME, txtBPFacilityManualTE, _
                                        lblBPFacilityManualTax, txtBPFacilityManualTax, lblBPFacilityUsage)
            FullyLoadedBPFacility = False
            PreviousFacilityRegion = cmbBPFacilityRegion.Text
        End If
    End Sub

    Private Sub cmbBPFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbBPFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbBPFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbBPFacilitySystem.DropDown
        If Not BPFacilitySystemsLoaded And Not FirstLoad Then
            PreviousFacilitySystem = cmbBPFacilitySystem.Text
            Call LoadFacilitySystems(SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, False, _
                                     cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                                     lblBPFacilityBonus, lblBPFacilityTaxRate, lblBPFacilityManualME, txtBPFacilityManualME, _
                                     lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, _
                                     lblBPFacilityDefault, btnBPFacilitySave, BPTab, chkBPFacilityIncludeUsage, lblBPFacilityUsage)
        End If
    End Sub

    Private Sub cmbBPFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbBPFacilitySystem.SelectedIndexChanged
        Dim OverrideFacilityName As String = ""
        Dim Autoload As Boolean = False

        If Not IsNothing(SelectedBlueprint) Then
            If Not LoadingFacilitySystems And Not FirstLoad And PreviousFacilitySystem <> cmbBPFacilitySystem.Text Then

                If cmbBPFacilityType.Text = OutpostFacility Then
                    OverrideFacilityName = ""
                    Autoload = True
                ElseIf cmbBPFacilityType.Text = POSFacility Then
                    OverrideFacilityName = GetPOSManufacturingFacility(SelectedBPManufacturingFacility, _
                                    SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, BPTab).FacilityName
                End If

                ' Load the facility
                Call LoadFacilities(SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, False, _
                                    cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                                    lblBPFacilityBonus, lblBPFacilityDefault, lblBPFacilityManualME, txtBPFacilityManualME, _
                                    lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, btnBPFacilitySave, lblBPFacilityTaxRate, BPTab, _
                                    chkBPFacilityIncludeUsage, Nothing, Nothing, Autoload, chkBPFacilityIncludeUsage.Checked, OverrideFacilityName, lblBPFacilityUsage)


                If Autoload Then
                    ' reload bp Use the original ME and TE values when they change the meta level
                    Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
                    FullyLoadedBPFacility = True
                Else
                    Call HideFacilityBonusBoxes(lblBPFacilityBonus, lblBPFacilityTaxRate, lblBPFacilityManualME, lblBPFacilityManualTE, _
                                                txtBPFacilityManualME, txtBPFacilityManualTE, _
                                                lblBPFacilityManualTax, txtBPFacilityManualTax, lblBPFacilityUsage)
                    FullyLoadedBPFacility = False
                End If

                Call cmbBPFacilityorArray.Focus()

                PreviousFacilitySystem = cmbBPFacilitySystem.Text

            End If
        End If

    End Sub

    Private Sub cmbBPFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbBPFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbBPFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbBPFacilityorArray.DropDown
        If Not BPFacilitiesLoaded And Not FirstLoad Then
            PreviousFacilityEquipment = cmbBPFacilityorArray.Text
            Call LoadFacilities(SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, False, _
                                cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                                lblBPFacilityBonus, lblBPFacilityDefault, lblBPFacilityManualME, txtBPFacilityManualME, _
                                lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, _
                                btnBPFacilitySave, lblBPFacilityTaxRate, BPTab, chkBPFacilityIncludeUsage, _
                                Nothing, Nothing, Nothing, chkBPFacilityIncludeUsage.Checked, "", lblBPFacilityUsage)
        End If
    End Sub

    Private Sub cmbBPFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbBPFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousFacilityEquipment <> cmbBPFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(GetProductionType(cmbBPFacilityActivities.Text, CurrentBPGroupID, CurrentBPCategoryID, cmbBPFacilityType.Text), _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, CurrentBPGroupID, CurrentBPCategoryID, _
                                      cmbBPFacilityActivities.Text, cmbBPFacilityType.Text, cmbBPFacilityorArray.Text, _
                                      cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                                      lblBPFacilityBonus, lblBPFacilityDefault, _
                                      lblBPFacilityManualME, txtBPFacilityManualME, _
                                      lblBPFacilityManualTE, txtBPFacilityManualTE, _
                                      lblBPFacilityManualTax, txtBPFacilityManualTax, _
                                      btnBPFacilitySave, lblBPFacilityTaxRate, _
                                      chkBPFacilityIncludeUsage, Nothing, Nothing, BPTab, FullyLoadedBPFacility, chkBPFacilityIncludeUsage.Checked)

            If txtBPFacilityManualME.Visible Then
                Call txtBPFacilityManualME.Focus()
            Else
                Call tabBPInventionEquip.Focus()
            End If

            PreviousFacilityEquipment = cmbBPFacilityorArray.Text

            If Not IsNothing(SelectedBlueprint) Then
                ' Load the bp again - Use the original ME and TE values when they change the meta level
                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
            End If
        End If
    End Sub

    Private Sub btnBPFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnBPFacilitySave.Click
        Dim BPGroupID As Long = SelectedBlueprint.GetItemGroupID
        Dim BPCategoryID As Long = SelectedBlueprint.GetItemCategoryID

        Select Case cmbBPFacilityActivities.Text
            Case ActivityManufacturing
                Select Case BPGroupID
                    Case SuperCarrierGroupID, TitanGroupID
                        SelectedBPManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                        Call SelectedBPSuperManufacturingFacility.SaveFacility(BPTab)
                        Call UpdateMMTMTaxDataforOutpost(SelectedBPSuperManufacturingFacility, IndustryActivities.Manufacturing)
                        DefaultBPSuperManufacturingFacility = CType(SelectedBPSuperManufacturingFacility.Clone, IndustryFacility)
                    Case BoosterGroupID
                        SelectedBPBoosterManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                        Call SelectedBPBoosterManufacturingFacility.SaveFacility(BPTab)
                        Call UpdateMMTMTaxDataforOutpost(SelectedBPBoosterManufacturingFacility, IndustryActivities.Manufacturing)
                        DefaultBPBoosterManufacturingFacility = CType(SelectedBPBoosterManufacturingFacility.Clone, IndustryFacility)
                    Case CarrierGroupID, DreadnoughtGroupID, CapitalIndustrialShipGroupID
                        SelectedBPCapitalManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                        Call SelectedBPCapitalManufacturingFacility.SaveFacility(BPTab)
                        Call UpdateMMTMTaxDataforOutpost(SelectedBPCapitalManufacturingFacility, IndustryActivities.Manufacturing)
                        DefaultBPCapitalManufacturingFacility = CType(SelectedBPCapitalManufacturingFacility.Clone, IndustryFacility)
                    Case StrategicCruiserGroupID
                        SelectedBPT3CruiserManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                        Call SelectedBPT3CruiserManufacturingFacility.SaveFacility(BPTab)
                        Call UpdateMMTMTaxDataforOutpost(SelectedBPT3CruiserManufacturingFacility, IndustryActivities.Manufacturing)
                        DefaultBPT3CruiserManufacturingFacility = CType(SelectedBPT3CruiserManufacturingFacility.Clone, IndustryFacility)
                    Case TacticalDestroyerGroupID
                        SelectedBPT3DestroyerManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                        Call SelectedBPT3DestroyerManufacturingFacility.SaveFacility(BPTab)
                        Call UpdateMMTMTaxDataforOutpost(SelectedBPT3DestroyerManufacturingFacility, IndustryActivities.Manufacturing)
                        DefaultBPT3DestroyerManufacturingFacility = CType(SelectedBPT3DestroyerManufacturingFacility.Clone, IndustryFacility)
                    Case Else
                        If cmbBPFacilityType.Text = POSFacility Then

                            Dim TempFacility As New IndustryFacility

                            ' Determine the pos facility if needed
                            Dim IndyType As IndustryType = GetProductionType(cmbBPFacilityActivities.Text, BPGroupID, BPCategoryID, POSFacility)

                            ' Save all three types of POS facilities and the main manufacturing POS as the same so it's all consistent (assume only one pos for this stuff)
                            Select Case IndyType
                                Case IndustryType.POSFuelBlockManufacturing
                                    TempFacility = CType(SelectedBPPOSFuelBlockFacility.Clone, IndustryFacility)
                                Case IndustryType.POSLargeShipManufacturing
                                    TempFacility = CType(SelectedBPPOSLargeShipFacility.Clone, IndustryFacility)
                                Case IndustryType.POSModuleManufacturing
                                    TempFacility = CType(SelectedBPPOSModuleFacility.Clone, IndustryFacility)
                                Case Else
                                    TempFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)
                            End Select

                            TempFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked

                            ' Now using the temp, save all 4 types (manufacturing doesn't really matter)
                            TempFacility.FacilityName = SelectedBPPOSFuelBlockFacility.FacilityName
                            TempFacility.FacilityType = SelectedBPPOSFuelBlockFacility.FacilityType
                            TempFacility.ProductionType = IndustryType.POSFuelBlockManufacturing
                            SelectedBPPOSFuelBlockFacility = CType(TempFacility.Clone, IndustryFacility)
                            Call SelectedBPPOSFuelBlockFacility.SaveFacility(BPTab)
                            DefaultBPPOSFuelBlockFacility = CType(SelectedBPPOSFuelBlockFacility.Clone, IndustryFacility)

                            TempFacility.FacilityName = SelectedBPPOSLargeShipFacility.FacilityName
                            TempFacility.FacilityType = SelectedBPPOSLargeShipFacility.FacilityType
                            TempFacility.ProductionType = IndustryType.POSLargeShipManufacturing
                            SelectedBPPOSLargeShipFacility = CType(TempFacility.Clone, IndustryFacility)
                            Call SelectedBPPOSLargeShipFacility.SaveFacility(BPTab)
                            DefaultBPPOSLargeShipFacility = CType(SelectedBPPOSLargeShipFacility.Clone, IndustryFacility)

                            TempFacility.FacilityName = SelectedBPPOSModuleFacility.FacilityName
                            TempFacility.FacilityType = SelectedBPPOSModuleFacility.FacilityType
                            TempFacility.ProductionType = IndustryType.POSModuleManufacturing
                            SelectedBPPOSModuleFacility = CType(TempFacility.Clone, IndustryFacility)
                            Call SelectedBPPOSModuleFacility.SaveFacility(BPTab)
                            DefaultBPPOSModuleFacility = CType(SelectedBPPOSModuleFacility.Clone, IndustryFacility)

                            ' It's a pos, so always save the facility as well for all other manufacturing
                            TempFacility.FacilityName = SelectedBPManufacturingFacility.FacilityName
                            TempFacility.FacilityType = SelectedBPManufacturingFacility.FacilityType
                            TempFacility.ProductionType = IndustryType.Manufacturing
                            SelectedBPManufacturingFacility = CType(TempFacility.Clone, IndustryFacility)
                            Call SelectedBPManufacturingFacility.SaveFacility(BPTab)
                            DefaultBPManufacturingFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)

                        Else
                            If BPCategoryID = SubsystemCategoryID Then
                                SelectedBPSubsystemManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                                Call SelectedBPSubsystemManufacturingFacility.SaveFacility(BPTab)
                                Call UpdateMMTMTaxDataforOutpost(SelectedBPSubsystemManufacturingFacility, IndustryActivities.Manufacturing)
                                DefaultBPSubsystemManufacturingFacility = CType(SelectedBPSubsystemManufacturingFacility.Clone, IndustryFacility)
                            ElseIf BPCategoryID = ComponentCategoryID Then
                                If BPGroupID = AdvCapitalComponentGroupID Or BPGroupID = CapitalComponentGroupID Then
                                    SelectedBPCapitalComponentManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                                    Call SelectedBPCapitalComponentManufacturingFacility.SaveFacility(BPTab)
                                    Call UpdateMMTMTaxDataforOutpost(SelectedBPCapitalComponentManufacturingFacility, IndustryActivities.Manufacturing)
                                    DefaultBPCapitalComponentManufacturingFacility = CType(SelectedBPCapitalComponentManufacturingFacility.Clone, IndustryFacility)
                                Else
                                    SelectedBPComponentManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                                    Call SelectedBPComponentManufacturingFacility.SaveFacility(BPTab)
                                    Call UpdateMMTMTaxDataforOutpost(SelectedBPComponentManufacturingFacility, IndustryActivities.Manufacturing)
                                    DefaultBPComponentManufacturingFacility = CType(SelectedBPComponentManufacturingFacility.Clone, IndustryFacility)
                                End If
                            Else
                                SelectedBPManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                                Call SelectedBPManufacturingFacility.SaveFacility(BPTab)
                                Call UpdateMMTMTaxDataforOutpost(SelectedBPManufacturingFacility, IndustryActivities.Manufacturing)
                                DefaultBPManufacturingFacility = CType(SelectedBPManufacturingFacility.Clone, IndustryFacility)
                            End If
                        End If
                End Select
            Case ActivityComponentManufacturing
                SelectedBPComponentManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                Call SelectedBPComponentManufacturingFacility.SaveFacility(BPTab)
                Call UpdateMMTMTaxDataforOutpost(SelectedBPComponentManufacturingFacility, IndustryActivities.Manufacturing)
                DefaultBPComponentManufacturingFacility = CType(SelectedBPComponentManufacturingFacility.Clone, IndustryFacility)
            Case ActivityCapComponentManufacturing
                SelectedBPCapitalComponentManufacturingFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                Call SelectedBPCapitalComponentManufacturingFacility.SaveFacility(BPTab)
                Call UpdateMMTMTaxDataforOutpost(SelectedBPCapitalComponentManufacturingFacility, IndustryActivities.Manufacturing)
                DefaultBPCapitalComponentManufacturingFacility = CType(SelectedBPCapitalComponentManufacturingFacility.Clone, IndustryFacility)
            Case ActivityCopying
                SelectedBPCopyFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                Call SelectedBPCopyFacility.SaveFacility(BPTab)
                Call UpdateMMTMTaxDataforOutpost(SelectedBPCopyFacility, IndustryActivities.Copying)
                DefaultBPCopyFacility = CType(SelectedBPCopyFacility.Clone, IndustryFacility)
            Case ActivityInvention
                If SelectedBlueprint.GetItemGroupID = StrategicCruiserGroupID Or SelectedBlueprint.GetItemCategoryID = SubsystemCategoryID Then
                    SelectedBPT3InventionFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                    Call SelectedBPT3InventionFacility.SaveFacility(BPTab)
                    Call UpdateMMTMTaxDataforOutpost(SelectedBPT3InventionFacility, IndustryActivities.Invention)
                    DefaultBPT3InventionFacility = CType(SelectedBPT3InventionFacility.Clone, IndustryFacility)
                Else
                    SelectedBPInventionFacility.IncludeActivityUsage = chkBPFacilityIncludeUsage.Checked
                    Call SelectedBPInventionFacility.SaveFacility(BPTab)
                    Call UpdateMMTMTaxDataforOutpost(SelectedBPInventionFacility, IndustryActivities.Invention)
                    DefaultBPInventionFacility = CType(SelectedBPInventionFacility.Clone, IndustryFacility)
                End If
        End Select

        lblBPFacilityDefault.ForeColor = SystemColors.Highlight
        ' They just saved it
        btnBPFacilitySave.Enabled = False

        MsgBox("Default " & cmbBPFacilityActivities.Text & " Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub lblBPFacilityDefault_DoubleClick(sender As System.Object, e As System.EventArgs) Handles lblBPFacilityDefault.DoubleClick
        ' Load the default facility for the selected activity if it's not already the default
        If lblBPFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            LoadingFacilityActivities = True ' Don't trigger a combo load yet
            chkBPFacilityIncludeUsage.Checked = DefaultBPManufacturingFacility.IncludeActivityUsage ' Make sure this is set before loading

            Dim SetActivity As IndustryType

            Select Case cmbBPFacilityActivities.Text
                Case ActivityManufacturing
                    SetActivity = IndustryType.Manufacturing
                Case ActivityCapComponentManufacturing
                    SetActivity = IndustryType.CapitalComponentManufacturing
                Case ActivityComponentManufacturing
                    SetActivity = IndustryType.ComponentManufacturing
                Case ActivityCopying
                    SetActivity = IndustryType.Copying
                Case ActivityInvention
                    SetActivity = IndustryType.Invention
            End Select

            Call LoadFacility(SetActivity, True, False, _
                              cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                              lblBPFacilityBonus, lblBPFacilityDefault, lblBPFacilityManualME, txtBPFacilityManualME, _
                              lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, btnBPFacilitySave, lblBPFacilityTaxRate, _
                              BPTab, chkBPFacilityIncludeUsage, Nothing, Nothing, Nothing, FullyLoadedBPFacility, cmbBPFacilityActivities, 1, 0, 0, True, False)
            LoadingFacilityActivities = False
        End If
    End Sub

    ' For outposts, save the ME/TE/Tax data since this is specific to the user's input
    Private Sub UpdateMMTMTaxDataforOutpost(ByRef SentFacility As IndustryFacility, Activity As IndustryActivities)
        Dim SQL As String

        If IsNothing(SentFacility) Then
            Exit Sub
        End If

        ' See if this is an outpost, if not leave
        If SentFacility.FacilityType <> OutpostFacility Then
            Exit Sub
        End If

        ' Update only the outpost values for the activity type 
        SQL = "UPDATE STATION_FACILITIES SET MATERIAL_MULTIPLIER = " & CStr(SentFacility.MaterialMultiplier)
        SQL = SQL & ", TIME_MULTIPLIER = " & CStr(SentFacility.TimeMultiplier)
        SQL = SQL & ", FACILITY_TAX = " & CStr(SentFacility.TaxRate) ' Change to a percent (double)
        SQL = SQL & ", OUTPOST = " & CStr(StationType.Outpost) & " "
        SQL = SQL & "WHERE FACILITY_NAME = '" & FormatDBString(SentFacility.FacilityName) & "' "
        SQL = SQL & "AND ACTIVITY_ID = " & CStr(Activity)

        Call ExecuteNonQuerySQL(SQL)

    End Sub

    Private Sub txtBPFacilityManualME_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPFacilityManualME.KeyDown
        Call EnterKeyRunBP(e)
    End Sub

    Private Sub txtBPFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtBPFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtBPFacilityManualME, _
                                      GetManufacturingFacility(GetProductionType(cmbBPFacilityActivities.Text, SelectedBlueprint.GetItemGroupID, _
                                                                                 SelectedBlueprint.GetItemCategoryID, cmbBPFacilityType.Text), BPTab, False), _
                                      cmbBPFacilityType, btnBPFacilitySave, lblBPFacilityDefault)
    End Sub

    Private Sub txtBPFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtBPFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtBPFacilityManualME, cmbBPFacilityType, _
                                      GetManufacturingFacility(GetProductionType(cmbBPFacilityActivities.Text, SelectedBlueprint.GetItemGroupID, _
                                                                                 SelectedBlueprint.GetItemCategoryID, cmbBPFacilityType.Text), BPTab, False).MaterialMultiplier, True)
    End Sub

    Private Sub txtBPFacilityManualTE_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPFacilityManualTE.KeyDown
        Call EnterKeyRunBP(e)
    End Sub

    Private Sub txtBPFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtBPFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtBPFacilityManualTE, _
                                      GetManufacturingFacility(GetProductionType(cmbBPFacilityActivities.Text, SelectedBlueprint.GetItemGroupID, _
                                                                                 SelectedBlueprint.GetItemCategoryID, cmbBPFacilityType.Text), BPTab, False), _
                                      cmbBPFacilityType, btnBPFacilitySave, lblBPFacilityDefault)
    End Sub

    Private Sub txtBPFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtBPFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtBPFacilityManualTE, cmbBPFacilityType, _
                                      GetManufacturingFacility(GetProductionType(cmbBPFacilityActivities.Text, SelectedBlueprint.GetItemGroupID, _
                                                                                 SelectedBlueprint.GetItemCategoryID, cmbBPFacilityType.Text), BPTab, False).MaterialMultiplier, True)
    End Sub

    Private Sub txtBPFacilityManualTax_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPFacilityManualTax.KeyDown
        Call EnterKeyRunBP(e)
    End Sub

    Private Sub txtBPFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtBPFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtBPFacilityManualTax, _
                                      GetManufacturingFacility(GetProductionType(cmbBPFacilityActivities.Text, SelectedBlueprint.GetItemGroupID, _
                                                                                 SelectedBlueprint.GetItemCategoryID, cmbBPFacilityType.Text), BPTab, False), _
                                      cmbBPFacilityType, btnBPFacilitySave, lblBPFacilityDefault)
    End Sub

    Private Sub txtBPFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtBPFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtBPFacilityManualTax, cmbBPFacilityType, _
                                      GetManufacturingFacility(GetProductionType(cmbBPFacilityActivities.Text, SelectedBlueprint.GetItemGroupID, _
                                                                                 SelectedBlueprint.GetItemCategoryID, cmbBPFacilityType.Text), BPTab, False).MaterialMultiplier, True)
    End Sub

    ' Team functions
    Private Sub btnBPSaveTeam_Click(sender As System.Object, e As System.EventArgs) Handles btnBPSaveTeam.Click

        Select Case cmbBPTeamActivities.Text
            Case ActivityManufacturing
                SelectedBPManufacturingTeam.SaveTeam(TeamType.Manufacturing, BPTab)
            Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                SelectedBPComponentManufacturingTeam.SaveTeam(TeamType.ComponentManufacturing, BPTab)
            Case ActivityCopying
                SelectedBPCopyTeam.SaveTeam(TeamType.Copy, BPTab)
            Case ActivityInvention
                SelectedBPInventionTeam.SaveTeam(TeamType.Invention, BPTab)
        End Select

        lblBPDefaultTeam.Visible = True
        btnBPSaveTeam.Enabled = False

        MsgBox(cmbBPTeamActivities.Text & " Team Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub cmbBPTeamActivities_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbBPTeamActivities.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbBPTeamActivity_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbBPTeamActivities.SelectedIndexChanged
        If PreviousTeamActivity <> cmbBPTeamActivities.Text And Not FirstLoad Then
            BPTeamComboLoaded = False ' Always load combo on changing of the activity
            Call LoadTeamCombo(True, cmbBPTeam, cmbBPTeamActivities.Text, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab, GetTeamGroupIDList)
            ' Load the default team for this activity
            Call LoadDefaultTeam(True, cmbBPTeamActivities.Text, False, cmbBPTeam, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab)
            PreviousTeamActivity = cmbBPTeamActivities.Text
            BPTeamComboLoaded = True
        End If
    End Sub

    Private Sub cmbBPTeam_DropDown(sender As Object, e As System.EventArgs) Handles cmbBPTeam.DropDown
        ' If you drop down, don't show the text window
        cmbBPTeam.AutoCompleteMode = AutoCompleteMode.None
        cmbBPTeam.AutoCompleteSource = AutoCompleteSource.None
        ComboMenuDown = True

        If Not BPTeamComboLoaded Then ' TODO don't reload if not needed
            Call LoadTeamCombo(False, cmbBPTeam, cmbBPTeamActivities.Text, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab, GetTeamGroupIDList)
            If cmbBPTeam.Items.Contains(cmbBPTeam.Text) Then
                Dim TempTeam As New IndustryTeam
                Select Case cmbBPTeamActivities.Text
                    Case ActivityManufacturing
                        TempTeam = SelectedBPManufacturingTeam
                    Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                        TempTeam = SelectedBPComponentManufacturingTeam
                    Case ActivityCopying
                        TempTeam = SelectedBPCopyTeam
                End Select
                Call DisplayTeamBonus(GetTeamGroupIDList(), TempTeam, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveBP, BPTab)
            End If
            BPTeamComboLoaded = True
        End If

    End Sub

    Private Sub cmbBPTeam_DropDownClosed(sender As Object, e As System.EventArgs) Handles cmbBPTeam.DropDownClosed
        ' If it closes up, re-enable autocomplete
        cmbBPTeam.AutoCompleteMode = AutoCompleteMode.SuggestAppend
        cmbBPTeam.AutoCompleteSource = AutoCompleteSource.ListItems
        ComboMenuDown = False
    End Sub

    Private Sub cmbBPTeam_GotFocus(sender As Object, e As System.EventArgs) Handles cmbBPTeam.GotFocus
        Call cmbBPTeam.SelectAll()
    End Sub

    Private Sub cmbBPTeam_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cmbBPTeam.KeyDown
        ' If they hit the arrow keys when the combo is dropped down (just in the combo it won't throw this)
        If e.KeyValue = Keys.Up Or e.KeyValue = Keys.Down Then
            ComboBoxArrowKeys = True
        Else
            ComboBoxArrowKeys = False
        End If

        ' If they select enter, then load the team if the text is in the combo
        If e.KeyValue = Keys.Enter Then
            Call LoadTeam(cmbBPTeam.SelectedItem.ToString, cmbBPTeamActivities.Text, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab, GetTeamGroupIDList)
        End If
    End Sub

    Private Sub cmbBPTeam_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles cmbBPTeam.MouseWheel
        ' Only set mouse boolean when the combo isn't dropped down since users might want to use the wheel and click to select
        If ComboMenuDown Then
            MouseWheelSelection = False
        Else
            MouseWheelSelection = True
        End If
    End Sub

    Private Sub cmbBPTeam_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbBPTeam.SelectedIndexChanged
        If Not IsNothing(SelectedBlueprint) And LoadTeambyCombo Then
            Call LoadTeam(cmbBPTeam.SelectedItem.ToString, cmbBPTeamActivities.Text, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab, GetTeamGroupIDList)
            If Not FirstLoad Then
                ' Use the original ME and TE values when they change the meta level
                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, False)
            End If
        End If
    End Sub

    Private Sub cmbBPTeam_SelectionChangeCommitted(sender As Object, e As System.EventArgs) Handles cmbBPTeam.SelectionChangeCommitted
        If Not MouseWheelSelection And Not ComboBoxArrowKeys And LoadTeambyCombo Then
            Call LoadTeam(cmbBPTeam.SelectedItem.ToString, cmbBPTeamActivities.Text, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab, GetTeamGroupIDList)
            ' Use the original ME and TE values when they change the meta level
            Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, False)
        End If
    End Sub

    Private Sub chkPerUnit_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPPricePerUnit.CheckedChanged
        If Not FirstLoad Then
            Call UpdateBPPriceLabels()
        End If
    End Sub

    Private Sub txtBPLines_DoubleClick(sender As Object, e As System.EventArgs) Handles txtBPLines.DoubleClick
        ' Enter the max lines we have
        txtBPLines.Text = CStr(MaximumProductionLines)
    End Sub

    Private Sub txtBPLines_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPLines.KeyDown
        Call ProcessCutCopyPasteSelect(txtBPLines, e)
        Call EnterKeyRunBP(e)
    End Sub

    Private Sub txtBPLines_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPLines.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub txtBPInventionLines_DoubleClick(sender As Object, e As System.EventArgs) Handles txtBPInventionLines.DoubleClick
        ' Enter the max lines we have
        txtBPInventionLines.Text = CStr(MaximumLaboratoryLines)
    End Sub

    Private Sub txtBPInventionLines_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPInventionLines.KeyDown
        Call ProcessCutCopyPasteSelect(txtBPInventionLines, e)
        Call EnterKeyRunBP(e)
    End Sub

    Private Sub txtBPInventionLines_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPInventionLines.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub txtBPRelicLines_DoubleClick(sender As Object, e As System.EventArgs)
        ' Enter the max lines we have
        txtBPRelicLines.Text = CStr(MaximumLaboratoryLines)
    End Sub

    Private Sub txtBPRelicLines_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs)
        Call ProcessCutCopyPasteSelect(txtBPRelicLines, e)
        Call EnterKeyRunBP(e)
    End Sub

    Private Sub txtBPRelicLines_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs)
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub lblBPCanMakeBP_DoubleClick(sender As Object, e As System.EventArgs) Handles lblBPCanMakeBP.DoubleClick
        ' Only allow if items in list
        If lstBPComponentMats.Items.Count > 0 Then
            Dim f1 As New frmReqSkills(SkillType.BPReqSkills)
            f1.Show()
        End If
    End Sub

    Private Sub lblBPCanMakeBPAll_DoubleClick(sender As Object, e As System.EventArgs) Handles lblBPCanMakeBPAll.DoubleClick
        ' Don't allow popup if buying all
        If lblBPCanMakeBPAll.Text = "Buying all Materials" Then
            Exit Sub
        End If

        ' Only update the make all label if we have something to make, else use the bp data
        If SelectedBlueprint.HasComponents Then
            Dim f1 As New frmReqSkills(SkillType.BPComponentSkills)
            f1.Show()
        Else
            Dim f1 As New frmReqSkills(SkillType.BPReqSkills)
            f1.Show()
        End If
    End Sub

    Private Sub lblBPInventStatus_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblBPT2InventStatus.DoubleClick
        Dim f1 As New frmReqSkills(SkillType.InventionReqSkills)
        f1.Show()
    End Sub

    Private Sub lblReverseEngineerStatus_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblT3InventStatus.DoubleClick
        Dim f1 As New frmReqSkills(SkillType.REReqSkills)
        f1.Show()
    End Sub

    Private Sub txtBPCCosts_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedPriceChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub chkBPBuildBuy_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBPBuildBuy.CheckedChanged
        ' Disable the choice for raw or components for shopping list and just add components
        If Not FirstLoad Then
            If chkBPBuildBuy.Checked Then
                rbtnBPComponentCopy.Enabled = True
                rbtnBPRawmatCopy.Enabled = False
            Else
                If Not IsNothing(SelectedBlueprint) Then
                    If SelectedBlueprint.HasComponents Then
                        rbtnBPComponentCopy.Enabled = True
                        rbtnBPRawmatCopy.Enabled = True
                    Else
                        rbtnBPComponentCopy.Enabled = False
                        rbtnBPRawmatCopy.Enabled = False
                    End If
                End If
            End If

            ' Refresh
            If Not IsNothing(SelectedBlueprint) Then
                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
            End If

        End If

    End Sub

    Private Sub lstBPComponentMats_ColumnClick(ByVal sender As Object, ByVal e As System.Windows.Forms.ColumnClickEventArgs) Handles lstBPComponentMats.ColumnClick

        ' Set the sort order options
        Call SetLstVwColumnSortOrder(e, compBPMatsColumnSorter)

        ' Perform the sort with these new sort options.
        lstBPComponentMats.Sort()
    End Sub

    Private Sub lstBPRawMats_ColumnClick(ByVal sender As Object, ByVal e As System.Windows.Forms.ColumnClickEventArgs) Handles lstBPRawMats.ColumnClick

        ' Set the sort order options
        Call SetLstVwColumnSortOrder(e, rawBPMatsColumnSorter)

        ' Perform the sort with these new sort options.
        lstBPRawMats.Sort()
    End Sub

    Private Sub ResetBlueprintCombo(ByVal T1 As Boolean, ByVal T2 As Boolean, ByVal T3 As Boolean, ByVal Storyline As Boolean, ByVal NavyFaction As Boolean, ByVal PirateFaction As Boolean)
        cmbBPsLoaded = False
        cmbBPBlueprintSelection.Text = "Select Blueprint"
        chkBPT1.Enabled = T1
        chkBPT2.Enabled = T2
        chkBPT3.Enabled = T3
        chkBPNavyFaction.Enabled = NavyFaction
        chkBPPirateFaction.Enabled = PirateFaction
        chkBPStoryline.Enabled = Storyline

        ComboMenuDown = False
        MouseWheelSelection = False
        ComboBoxArrowKeys = False

        ' Make sure we have something checked
        Call EnsureBPTechCheck()
        ' Load the new data
        Call LoadBlueprintCombo()

        cmbBPBlueprintSelection.Focus()

    End Sub

    Private Sub ResetInventionBoxes()
        ' Reset Decrytpor
        ResetDecryptorCombos(0)

        lblBPInventionCost.Text = "0.00"
        lblBPRECost.Text = "0.00"
        lblBPInventionChance.Text = "0%"
        lblBPDecryptorStats.Text = "ME: 0, TE: 0," & vbCrLf & "BP Runs: 0"

    End Sub

    Private Sub ResetDecryptorCombos(InventionTech As Integer)
        LoadingInventionDecryptors = True
        LoadingT3Decryptors = True
        InventionDecryptorsLoaded = False
        T3DecryptorsLoaded = False

        Dim TempDecryptors As New DecryptorList

        ' Auto load the decryptor if they want
        If InventionTech = 2 Then
            If UserApplicationSettings.SaveBPRelicsDecryptors And UserBPTabSettings.T2DecryptorType <> "" Then
                cmbBPInventionDecryptor.Text = UserBPTabSettings.T2DecryptorType
                SelectedDecryptor = TempDecryptors.GetDecryptor(cmbBPInventionDecryptor.Text)
            Else
                cmbBPInventionDecryptor.Text = None
                SelectedDecryptor = NoDecryptor ' Reset the selected decryptor too
            End If
        ElseIf InventionTech = 3 Then
            ' Load for T3
            If UserApplicationSettings.SaveBPRelicsDecryptors And UserBPTabSettings.T3DecryptorType <> "" Then
                cmbBPT3Decryptor.Text = UserBPTabSettings.T3DecryptorType
                SelectedDecryptor = TempDecryptors.GetDecryptor(cmbBPT3Decryptor.Text)
            Else
                cmbBPT3Decryptor.Text = None
                SelectedDecryptor = NoDecryptor ' Reset the selected decryptor too
            End If

            ' Reset both
        Else
            cmbBPInventionDecryptor.Text = None
            cmbBPT3Decryptor.Text = None
            SelectedDecryptor = NoDecryptor ' Reset the selected decryptor too
        End If

        LoadingInventionDecryptors = False
        LoadingT3Decryptors = False

    End Sub

    Private Sub ResetfromTechSizeCheck()
        cmbBPsLoaded = False

        ComboMenuDown = False
        MouseWheelSelection = False
        ComboBoxArrowKeys = False

        cmbBPBlueprintSelection.Text = "Select Blueprint"
        cmbBPBlueprintSelection.Focus()
        Call LoadBlueprintCombo()

    End Sub

    Private Sub btnReset_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnClearItemFilter.Click
        txtPriceItemFilter.Text = ""
        Call UpdatePriceList()
    End Sub

    Private Sub txtBPRuns_GotFocus(sender As Object, e As System.EventArgs) Handles txtBPRuns.GotFocus
        Call txtBPRuns.SelectAll()
    End Sub

    Private Sub txtBPRuns_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtBPRuns.KeyDown
        Call ProcessCutCopyPasteSelect(txtBPRuns, e)
        Call EnterKeyRunBP(e)
    End Sub

    Private Sub txtBPRuns_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPRuns.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub txtBPRuns_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPRuns.KeyUp
        If Not EnterKeyPressed Then
            EnterKeyPressed = False
        End If
    End Sub

    Private Sub txtBPRuns_LostFocus(sender As Object, e As System.EventArgs) Handles txtBPRuns.LostFocus
        If Not IgnoreFocus Then
            Call UpdateBPLinesandBPs()
            IgnoreFocus = True
        End If
    End Sub

    Private Sub txtBPAddlCosts_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtBPAddlCosts.KeyDown
        Call ProcessCutCopyPasteSelect(txtBPAddlCosts, e)
        Call EnterKeyRunBP(e)
    End Sub

    Private Sub txtBPAddlCosts_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPAddlCosts.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedPriceChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub txtBPAddlCosts_LostFocus(sender As Object, e As System.EventArgs) Handles txtBPAddlCosts.LostFocus
        If IsNumeric(txtBPAddlCosts.Text) Then
            txtBPAddlCosts.Text = FormatNumber(txtBPAddlCosts.Text, 2)
        ElseIf Trim(txtBPAddlCosts.Text) = "" Then
            txtBPAddlCosts.Text = "0.00"
        End If
    End Sub

    Private Sub txtBPME_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtBPME.KeyDown
        Call ProcessCutCopyPasteSelect(txtBPME, e)
        If e.KeyCode = Keys.Enter Then
            Call EnterKeyRunBP(e)
        End If
    End Sub

    Private Sub txtBPME_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPME.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedMETEChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub txtBPME_TextChanged(sender As Object, e As System.EventArgs) Handles txtBPME.TextChanged
        Call VerifyMETEEntry(txtBPME, "ME")
    End Sub

    Private Sub txtBPME_LostFocus(sender As Object, e As System.EventArgs) Handles txtBPME.LostFocus
        If Trim(txtBPME.Text) = "" Then
            txtBPME.Text = "0"
        End If
    End Sub

    Private Sub txtBPTE_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtBPTE.KeyDown
        Call ProcessCutCopyPasteSelect(txtBPTE, e)
        If e.KeyCode = Keys.Enter Then
            Call EnterKeyRunBP(e)
        End If
    End Sub

    Private Sub txtBPTE_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPTE.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedMETEChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub txtBPTE_TextChanged(sender As Object, e As System.EventArgs) Handles txtBPTE.TextChanged
        Call VerifyMETEEntry(txtBPTE, "TE")
    End Sub

    Private Sub txtBPTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtBPTE.LostFocus
        If Trim(txtBPTE.Text) = "" Then
            txtBPTE.Text = "0"
        End If
    End Sub

    Private Sub chkBPFacilityIncludeUsage_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBPFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad And Not ChangingUsageChecks Then
            If Not IsNothing(SelectedBlueprint) Then
                Call SetDefaultFacilitybyCheck(GetProductionType(cmbBPFacilityActivities.Text, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID, cmbBPFacilityType.Text), _
                        chkBPFacilityIncludeUsage, BPTab, cmbBPFacilityType.Text, cmbBPFacilityorArray, _
                        lblBPFacilityDefault, btnBPFacilitySave)

                Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
            End If
        End If
    End Sub

    Private Sub chkBPTaxesFees_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBPTaxes.CheckedChanged
        If Not FirstLoad And SetTaxFeeChecks Then
            If Not IsNothing(SelectedBlueprint) Then
                Call SelectedBlueprint.SetPriceData(chkBPTaxes.Checked, chkBPBrokerFees.Checked)
                Call UpdateBPPriceLabels()
            End If
        End If
    End Sub

    Private Sub chkBPBrokerFees_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPBrokerFees.CheckedChanged
        If Not FirstLoad And SetTaxFeeChecks Then
            If Not IsNothing(SelectedBlueprint) Then
                Call SelectedBlueprint.SetPriceData(chkBPTaxes.Checked, chkBPBrokerFees.Checked)
                Call UpdateBPPriceLabels()
            End If
        End If
    End Sub

    Private Sub txtBPNumBPs_DoubleClick(sender As Object, e As System.EventArgs) Handles txtBPNumBPs.DoubleClick
        If Not IsNothing(SelectedBlueprint) Then
            txtBPNumBPs.Text = CStr(GetUsedNumBPs(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, CInt(txtBPRuns.Text), _
                                                  CInt(txtBPLines.Text), CInt(txtBPNumBPs.Text), SelectedDecryptor.RunMod))
        End If
    End Sub

    Private Sub txtBPNumBPs_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtBPNumBPs.KeyDown
        Call ProcessCutCopyPasteSelect(txtBPNumBPs, e)
        Call EnterKeyRunBP(e)
    End Sub

    Private Sub txtBPNumBPs_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPNumBPs.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub cmbBPInventionDecryptor_DropDown(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmbBPInventionDecryptor.DropDown

        If Not InventionDecryptorsLoaded Then
            ' Clear anything that was there
            cmbBPInventionDecryptor.Items.Clear()

            ' Add NONE
            cmbBPInventionDecryptor.Items.Add(None)

            Dim Decryptors As New DecryptorList

            For i = 0 To Decryptors.GetDecryptorList.Count - 1
                cmbBPInventionDecryptor.Items.Add(Decryptors.GetDecryptorList(i).Name)
            Next

            InventionDecryptorsLoaded = True

        End If
    End Sub

    Private Sub cmbBPInventionDecryptor_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbBPInventionDecryptor.SelectedIndexChanged

        ' Only load when the user selects a new decryptor from the list, not when changing the text
        If Not LoadingInventionDecryptors Then
            Call SelectDecryptor(cmbBPInventionDecryptor.Text)

            ' Reload the number of bps you need etc
            ' If the runs changed, update the lines data based on decryptor, need to update it first before running
            Call UpdateBPLinesandBPs()

            ' Use the original ME and TE values when they change the decryptor
            Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)

        End If

    End Sub

    Private Sub cmbBPT3Decryptor_DropDown(sender As Object, e As System.EventArgs) Handles cmbBPT3Decryptor.DropDown

        If Not T3DecryptorsLoaded Then
            ' Clear anything that was there
            cmbBPT3Decryptor.Items.Clear()

            ' Add NONE
            cmbBPT3Decryptor.Items.Add(None)

            Dim Decryptors As New DecryptorList

            For i = 0 To Decryptors.GetDecryptorList.Count - 1
                cmbBPT3Decryptor.Items.Add(Decryptors.GetDecryptorList(i).Name)
            Next

            T3DecryptorsLoaded = True

        End If
    End Sub

    Private Sub cmbBPREDecryptor_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbBPT3Decryptor.SelectedIndexChanged

        ' Only load when the user selects a new decryptor from the list, not when changing the text
        If Not LoadingT3Decryptors Then
            Call SelectDecryptor(cmbBPT3Decryptor.Text)

            ' Reload the number of bps you need etc
            ' If the runs changed, update the lines data based on decryptor, need to update it first before running
            Call UpdateBPLinesandBPs()

            ' Use the original ME and TE values when they change the decryptor
            Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)

        End If
    End Sub

    Private Sub cmbBPRelic_DropDown(sender As Object, e As System.EventArgs) Handles cmbBPRelic.DropDown

        If Not RelicsLoaded Then
            Call LoadRelicTypes(SelectedBlueprint.GetTypeID)
        End If

    End Sub

    Private Sub cmbBPRelic_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbBPRelic.SelectedIndexChanged

        If Not LoadingRelics Then
            ' Use the original values when selecting a new relic
            Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
        End If

    End Sub

    Private Sub SetInventionEnabled(InventionType As String, Enable As Boolean)
        If InventionType = "T2" Then
            chkBPIncludeCopyCosts.Enabled = Enable
            chkBPIncludeCopyTime.Enabled = Enable
            chkBPIncludeInventionCosts.Enabled = Enable
            chkBPIncludeInventionTime.Enabled = Enable

            txtBPInventionLines.Enabled = Enable
            cmbBPInventionDecryptor.Enabled = Enable
        Else
            chkBPIncludeT3Costs.Enabled = Enable
            chkBPIncludeT3Time.Enabled = Enable
            txtBPRelicLines.Enabled = Enable
            cmbBPT3Decryptor.Enabled = Enable
            cmbBPRelic.Enabled = Enable
        End If
    End Sub

    Private Sub chkBPIgnoreInvention_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIgnoreInvention.CheckedChanged
        UpdatingInventionChecks = True

        If chkBPIgnoreInvention.Checked Then
            If tabBPInventionEquip.Contains(tabInventionCalcs) Then
                ' Disable all first
                Call SetInventionEnabled("T2", False)

                If cmbBPFacilityActivities.Text = ActivityInvention Then
                    ' Save the current facility value since we are changing the usage value
                    Dim TempUsage As Boolean = SelectedBPInventionFacility.IncludeActivityUsage
                    Dim TempDefault As Boolean = SelectedBPInventionFacility.IsDefault
                    chkBPFacilityIncludeUsage.Checked = False
                    SelectedBPInventionFacility.IncludeActivityUsage = TempUsage
                    SelectedBPInventionFacility.IsDefault = TempDefault
                End If

            ElseIf tabBPInventionEquip.Contains(tabT3Calcs) Then
                ' Disable all first
                Call SetInventionEnabled("T3", False)

                ' If the facility is visible, then uncheck
                If cmbBPFacilityActivities.Text = ActivityInvention Then
                    ' Save the current facility value since we are changing the usage value
                    Dim TempUsage As Boolean = SelectedBPInventionFacility.IncludeActivityUsage
                    Dim TempDefault As Boolean = SelectedBPInventionFacility.IsDefault
                    chkBPFacilityIncludeUsage.Checked = False
                    SelectedBPInventionFacility.IncludeActivityUsage = TempUsage
                    SelectedBPInventionFacility.IsDefault = TempDefault
                End If
            End If

            ' In both cases, disable the num bps box
            txtBPNumBPs.Enabled = False

        Else ' Set it on the user settings
            If tabBPInventionEquip.Contains(tabInventionCalcs) Then
                ' Enable all first
                Call SetInventionEnabled("T2", True)

                If cmbBPFacilityActivities.Text = ActivityInvention Then
                    chkBPFacilityIncludeUsage.Checked = SelectedBPInventionFacility.IncludeActivityUsage
                End If

            ElseIf tabBPInventionEquip.Contains(tabT3Calcs) Then
                ' Enable all first
                Call SetInventionEnabled("T3", True)

                ' If the facility is visible, then uncheck
                If cmbBPFacilityActivities.Text = ActivityInvention Then
                    chkBPFacilityIncludeUsage.Checked = SelectedBPT3InventionFacility.IncludeActivityUsage
                End If
            End If

            txtBPNumBPs.Enabled = True

        End If

        UpdatingInventionChecks = False

        ' If we are inventing, make sure we add or remove the activity based on the check
        If tabBPInventionEquip.Contains(tabInventionCalcs) Or tabBPInventionEquip.Contains(tabT3Calcs) Then
            If chkBPIgnoreInvention.Checked Then
                ' Remove the invention and copy activity
                cmbBPFacilityActivities.Items.Remove(ActivityInvention)
                cmbBPFacilityActivities.Items.Remove(ActivityCopying)
                ' Enable updates to these boxes
                txtBPME.Enabled = True
                txtBPTE.Enabled = True
            Else
                ' Add the invention and copy activity
                If Not cmbBPFacilityActivities.Items.Contains(ActivityInvention) Then
                    cmbBPFacilityActivities.Items.Add(ActivityInvention)
                End If
                If Not cmbBPFacilityActivities.Items.Contains(ActivityCopying) Then
                    cmbBPFacilityActivities.Items.Add(ActivityCopying)
                End If

                txtBPME.Enabled = False
                txtBPTE.Enabled = False
            End If
        End If

        If Not FirstLoad Then
            Call RefreshBP()
        End If

    End Sub

    Private Sub chkBPIgnoreMinerals_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIgnoreMinerals.CheckedChanged
        If Not FirstLoad Then
            Call RefreshBP()
        End If
    End Sub

    Private Sub chkBPIgnoreT1Item_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIgnoreT1Item.CheckedChanged
        If Not FirstLoad Then
            Call RefreshBP()
        End If
    End Sub

    ' Loads the T3 Relic types into the combo box based on BP Selected
    Private Sub LoadRelicTypes(ByVal BPID As Long)
        Dim SQL As String
        Dim readerRelic As SQLiteDataReader
        Dim RelicName As String
        Dim UserRelicType As String = ""

        LoadingRelics = True

        SQL = "SELECT typeName FROM INVENTORY_TYPES, INDUSTRY_ACTIVITY_PRODUCTS WHERE productTypeID =" & BPID & " "
        SQL = SQL & "AND typeID = blueprintTypeID"

        DBCommand = New SQLiteCommand(SQL, DB)
        readerRelic = DBCommand.ExecuteReader

        If UserBPTabSettings.RelicType <> "" Then
            If UserBPTabSettings.RelicType.Contains(WreckedRelic) Then
                UserRelicType = WreckedRelic
            ElseIf UserBPTabSettings.RelicType.Contains(MalfunctioningRelic) Then
                UserRelicType = MalfunctioningRelic
            ElseIf UserBPTabSettings.RelicType.Contains(IntactRelic) Then
                UserRelicType = IntactRelic
            End If
        End If

        cmbBPRelic.Items.Clear()

        While readerRelic.Read
            RelicName = readerRelic.GetString(0)
            cmbBPRelic.Items.Add(RelicName)
            ' Load the name of the Wrecked Relic or base tactical destroyer relic in the combo when found 
            If RelicName.Contains(WreckedRelic) And UserBPTabSettings.RelicType = "" Then
                cmbBPRelic.Text = RelicName
            ElseIf UserRelicType <> "" Then
                If RelicName.Contains(UserRelicType) Then
                    cmbBPRelic.Text = RelicName
                End If
            End If
        End While

        readerRelic.Close()

        readerRelic = Nothing
        DBCommand = Nothing

        LoadingRelics = False
        RelicsLoaded = True

    End Sub

    Private Sub btnCopyMatstoClip_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnBPCopyMatstoClip.Click
        Dim ClipboardData = New DataObject
        Dim OutputText As String
        Dim DecryptorText As String = ""
        Dim RelicText As String = ""
        Dim AddlText As String = ""

        If cmbBPInventionDecryptor.Text <> None Then
            DecryptorText = "Decryptor: " & cmbBPInventionDecryptor.Text
        End If

        If cmbBPRelic.Text <> None Then
            RelicText = "Relic: " & cmbBPRelic.Text
        End If

        If RelicText <> "" Then
            AddlText = ", " & RelicText
        Else
            ' Decryptor
            If DecryptorText <> "" Then
                AddlText = ", " & DecryptorText
            End If
        End If

        AddlText = ")" & Environment.NewLine & Environment.NewLine

        If rbtnBPRawmatCopy.Checked Or chkBPBuildBuy.Checked Then
            OutputText = "Raw Material List for " & txtBPRuns.Text & " Units of '" & cmbBPBlueprintSelection.Text & "' (ME: " & CStr(txtBPME.Text) & AddlText
            OutputText = OutputText & SelectedBlueprint.GetRawMaterials.GetClipboardList(UserApplicationSettings.DataExportFormat, False, False, False)
        Else
            OutputText = "Component Material List for " & txtBPRuns.Text & " Units of '" & cmbBPBlueprintSelection.Text & "' (ME: " & CStr(txtBPME.Text) & AddlText
            OutputText = OutputText & SelectedBlueprint.GetComponentMaterials.GetClipboardList(UserApplicationSettings.DataExportFormat, False, False, False)
        End If

        If UserApplicationSettings.ShopListIncludeInventMats Then
            If Not IsNothing(SelectedBlueprint.GetInventionMaterials.GetMaterialList) Then
                OutputText = OutputText & Environment.NewLine & Environment.NewLine & "Invention Materials" & Environment.NewLine & Environment.NewLine
                OutputText = OutputText & SelectedBlueprint.GetInventionMaterials.GetClipboardList(UserApplicationSettings.DataExportFormat, False, False, False)
            End If
        End If

        ' Paste to clipboard
        Call CopyTextToClipboard(OutputText)

    End Sub

    Private Sub cmbBPInventionDecryptor_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cmbBPInventionDecryptor.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbBPREDecryptor_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbBPT3Decryptor.KeyPress
        e.Handled = True
    End Sub

    Private Sub rbtnAllBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPAllBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, True, True, True, True, True)
    End Sub

    Private Sub rbBPOwned_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPOwnedBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, True, True, True, True, True)
    End Sub

    Private Sub chkBPIncludeIgnoredBPs_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPIncludeIgnoredBPs.CheckedChanged
        Call ResetBlueprintCombo(True, True, True, True, True, True)
    End Sub

    Private Sub rbtnShipBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPShipBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, True, True, False, True, True)
    End Sub

    Private Sub rbtnModuleBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPModuleBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, True, False, True, True, False)
    End Sub

    Private Sub rbtnDroneBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPDroneBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, True, False, False, False, True)
    End Sub

    Private Sub rbtnComponentBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPComponentBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, False, False, False, False, False)
    End Sub

    Private Sub rbtnSubsystemBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPSubsystemBlueprints.CheckedChanged
        Call ResetBlueprintCombo(False, False, True, False, False, False)
    End Sub

    Private Sub rbtnToolBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPMiscBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, False, False, False, False, False)
    End Sub

    Private Sub rbtnAmmoChargeBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPAmmoChargeBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, True, False, False, False, False)
    End Sub

    Private Sub rbtnRigBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPRigBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, True, False, False, False, False)
    End Sub

    Private Sub rbtnStructureBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPStructureBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, False, False, False, False, True)
    End Sub

    Private Sub rbtnBoosterBlueprints_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnBPBoosterBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, False, False, False, False, False)
    End Sub

    Private Sub rbtnBPDeployableBlueprints_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbtnBPDeployableBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, True, False, False, False, False)
    End Sub

    Private Sub rbtnBPStationPartsBlueprints_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbtnBPStationPartsBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, False, False, False, False, False)
    End Sub

    Private Sub rbtnBPCelestialBlueprints_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbtnBPCelestialsBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, False, False, False, False, False)
    End Sub

    Private Sub rbtnBPFavoriteBlueprints_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbtnBPFavoriteBlueprints.CheckedChanged
        Call ResetBlueprintCombo(True, True, True, True, True, True)
    End Sub

    Private Sub chkbpT1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBPT1.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub chkbpT2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBPT2.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub chkbpT3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBPT3.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub chkBPNavyFaction_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBPNavyFaction.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub chkBPPirateFaction_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBPPirateFaction.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub chkBPStoryline_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBPStoryline.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub chkBPSmall_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPSmall.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub CheckBox7_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPMedium.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub CheckBox8_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPLarge.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub CheckBox9_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPXL.CheckedChanged
        If Not FirstLoad Then
            Call ResetfromTechSizeCheck()
        End If
    End Sub

    Private Sub cmbBlueprintSelection_GotFocus(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbBPBlueprintSelection.GotFocus
        Call cmbBPBlueprintSelection.SelectAll()
    End Sub

    Private Sub cmbBPBlueprintSelection_DropDown(sender As Object, e As System.EventArgs) Handles cmbBPBlueprintSelection.DropDown
        ' If you drop down, don't show the text window
        cmbBPBlueprintSelection.AutoCompleteMode = AutoCompleteMode.None
        ComboMenuDown = True
    End Sub

    Private Sub cmbBPBlueprintSelection_DropDownClosed(sender As Object, e As System.EventArgs) Handles cmbBPBlueprintSelection.DropDownClosed
        ' If it closes up, re-enable autocomplete
        cmbBPBlueprintSelection.AutoCompleteMode = AutoCompleteMode.SuggestAppend
        ComboMenuDown = False
    End Sub

    Private Sub cmbBPBlueprintSelection_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles cmbBPBlueprintSelection.MouseWheel
        ' Only set mouse boolean when the combo isn't dropped down since users might want to use the wheel and click to select
        If ComboMenuDown Then
            MouseWheelSelection = False
        Else
            MouseWheelSelection = True
        End If

    End Sub

    Private Sub cmbBPBlueprintSelection_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cmbBPBlueprintSelection.KeyDown

        ' If they hit the arrow keys when the combo is dropped down (just in the combo it won't throw this)
        If e.KeyValue = Keys.Up Or e.KeyValue = Keys.Down Then
            ComboBoxArrowKeys = True
        Else
            ComboBoxArrowKeys = False
        End If

        ' If they select enter, then load the BP
        If e.KeyValue = Keys.Enter Then
            Call LoadBPFromCombo()
        End If

    End Sub

    ' Thrown when the user changes the value in the combo box
    Private Sub cmbBPBlueprintSelection_SelectionChangeCommitted(sender As Object, e As System.EventArgs) Handles cmbBPBlueprintSelection.SelectionChangeCommitted

        If Not MouseWheelSelection And Not ComboBoxArrowKeys Then
            Call LoadBPFromCombo()
        End If

    End Sub

    ' Loads a blueprint if selected in the combo box by different methods
    Private Sub LoadBPFromCombo()

        If Not IsNothing(cmbBPBlueprintSelection.SelectedItem) Then
            SelectedBPText = cmbBPBlueprintSelection.SelectedItem.ToString
            cmbBPBlueprintSelection.Text = SelectedBPText
            SentFromManufacturingTab = False

            Call SelectBlueprint()

            ComboMenuDown = False
            MouseWheelSelection = False
            ComboBoxArrowKeys = False

            SelectedBPText = ""
        End If

    End Sub

    Private Sub btnRefreshBP_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnBPRefreshBP.Click
        Call RefreshBP()
    End Sub

    Public Sub RefreshBP(Optional IgnoreFocus As Boolean = False)
        If CorrectMETE(txtBPME.Text, txtBPTE.Text, txtBPME, txtBPTE) Then
            If Not IsNothing(SelectedBlueprint) Then
                If SelectedBlueprint.GetTechLevel = 2 And cmbBPInventionDecryptor.Text <> None Then
                    ' They have a decryptor, so use original
                    Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
                Else
                    Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
                End If
                txtBPRuns.SelectAll()
                If Not IgnoreFocus Then
                    txtBPRuns.Focus()
                End If
            End If
        End If
    End Sub

    Private Sub lstBPComponentMats_MouseClick(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles lstBPComponentMats.MouseClick
        Call ListClicked(lstBPComponentMats, sender, e)
    End Sub

    Private Sub lstBPRawMats_MouseClick(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles lstBPRawMats.MouseClick
        Call ListClicked(lstBPRawMats, sender, e)
    End Sub

    Private Sub EnterKeyRunBP(ByVal e As System.Windows.Forms.KeyEventArgs)
        If CorrectMETE(txtBPME.Text, txtBPTE.Text, txtBPME, txtBPTE) Then
            If e.KeyCode = Keys.Enter Then
                EnterKeyPressed = True
                If SelectedBlueprint.GetTechLevel = 2 And cmbBPInventionDecryptor.Text <> None Then
                    ' They have a decryptor, so use original
                    Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
                Else
                    Call UpdateBPGrids(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, False, SelectedBlueprint.GetItemGroupID, SelectedBlueprint.GetItemCategoryID)
                End If
                txtBPRuns.SelectAll()
                IgnoreFocus = True
                txtBPRuns.Focus()
                IgnoreFocus = False
            End If
        End If
    End Sub

    Private Sub btnBPBack_Click(sender As System.Object, e As System.EventArgs) Handles btnBPBack.Click
        Call LoadPreviousBlueprint()
    End Sub

    Private Sub btnBPForward_Click(sender As System.Object, e As System.EventArgs) Handles btnBPForward.Click
        Call LoadNextBlueprint()
    End Sub

    Private Sub tabBPInventionEquip_Click(sender As System.Object, e As System.EventArgs) Handles tabBPInventionEquip.Click
        SelectedBPTabIndex = tabBPInventionEquip.SelectedIndex
    End Sub

#End Region

    ' Initializes all the boxes on the BP tab
    Private Sub InitBPTab()

        pictBP.Image = Nothing
        pictBP.BackgroundImage = Nothing
        pictBP.Update()

        cmbBPBlueprintSelection.Text = "Select Blueprint"

        ' Exort type (might change with build buy selection
        Select Case UserBPTabSettings.ExporttoShoppingListType
            Case rbtnBPComponentCopy.Text
                rbtnBPComponentCopy.Checked = True
            Case rbtnBPCopyInvREMats.Text
                rbtnBPCopyInvREMats.Checked = True
            Case rbtnBPRawmatCopy.Text
                rbtnBPRawmatCopy.Checked = True
        End Select

        ' Default build/buy
        chkBPBuildBuy.Checked = UserApplicationSettings.CheckBuildBuy

        cmbBPsLoaded = False
        InventionDecryptorsLoaded = False

        ' Set BP Lines to run production on
        txtBPNumBPs.Text = "1"

        ' Set the runs to 1
        txtBPRuns.Text = "1"

        ' Production time label
        lblBPProductionTime.Text = "00:00:00"
        lblBPTotalItemPT.Text = "00:00:00"

        ' Cost labels
        lblBPRawMatCost.Text = "0.00"
        lblBPComponentMatCost.Text = "0.00"
        txtBPAddlCosts.Text = "0.00"

        ' Total
        lblBPRawTotalCost.Text = "0.00"
        lblBPTotalCompCost.Text = "0.00"

        lblBPRawIPH.Text = "0.00"
        lblBPRawIPH.ForeColor = Color.Black
        lblBPCompIPH.Text = "0.00"
        lblBPCompIPH.ForeColor = Color.Black

        lblBPCompProfit.Text = "0.00"
        lblBPCompProfit.ForeColor = Color.Black
        lblBPRawProfit.Text = "0.00"
        lblBPRawProfit.ForeColor = Color.Black

        lblBPMarketCost.Text = "0.00"

        ' Don't show labels to make
        lblBPCanMakeBP.Visible = False
        lblBPCanMakeBPAll.Visible = False

        ' Saved settings
        Select Case UserBPTabSettings.BlueprintTypeSelection
            Case rbtnBPAllBlueprints.Text
                rbtnBPAllBlueprints.Checked = True
            Case rbtnBPOwnedBlueprints.Text
                rbtnBPOwnedBlueprints.Checked = True
            Case rbtnBPFavoriteBlueprints.Text
                rbtnBPFavoriteBlueprints.Checked = True
            Case rbtnBPShipBlueprints.Text
                rbtnBPShipBlueprints.Checked = True
            Case rbtnBPDroneBlueprints.Text
                rbtnBPDroneBlueprints.Checked = True
            Case rbtnBPAmmoChargeBlueprints.Text
                rbtnBPAmmoChargeBlueprints.Checked = True
            Case rbtnBPModuleBlueprints.Text
                rbtnBPModuleBlueprints.Checked = True
            Case rbtnBPComponentBlueprints.Text
                rbtnBPComponentBlueprints.Checked = True
            Case rbtnBPStructureBlueprints.Text
                rbtnBPStructureBlueprints.Checked = True
            Case rbtnBPSubsystemBlueprints.Text
                rbtnBPSubsystemBlueprints.Checked = True
            Case rbtnBPRigBlueprints.Text
                rbtnBPRigBlueprints.Checked = True
            Case rbtnBPBoosterBlueprints.Text
                rbtnBPBoosterBlueprints.Checked = True
            Case rbtnBPMiscBlueprints.Text
                rbtnBPMiscBlueprints.Checked = True
            Case rbtnBPDeployableBlueprints.Text
                rbtnBPDeployableBlueprints.Checked = True
            Case rbtnBPCelestialsBlueprints.Text
                rbtnBPCelestialsBlueprints.Checked = True
            Case rbtnBPStationPartsBlueprints.Text
                rbtnBPStationPartsBlueprints.Checked = True
        End Select

        chkBPT1.Checked = UserBPTabSettings.Tech1Check
        chkBPT2.Checked = UserBPTabSettings.Tech2Check
        chkBPT3.Checked = UserBPTabSettings.Tech3Check
        chkBPNavyFaction.Checked = UserBPTabSettings.TechFactionCheck
        chkBPStoryline.Checked = UserBPTabSettings.TechStorylineCheck
        chkBPPirateFaction.Checked = UserBPTabSettings.TechPirateCheck

        chkBPIncludeIgnoredBPs.Checked = UserBPTabSettings.IncludeIgnoredBPs

        chkBPSmall.Checked = UserBPTabSettings.SmallCheck
        chkBPMedium.Checked = UserBPTabSettings.MediumCheck
        chkBPLarge.Checked = UserBPTabSettings.LargeCheck
        chkBPXL.Checked = UserBPTabSettings.XLCheck

        SetTaxFeeChecks = False
        chkBPFacilityIncludeUsage.Checked = UserBPTabSettings.IncludeUsage
        chkBPTaxes.Checked = UserBPTabSettings.IncludeTaxes
        chkBPBrokerFees.Checked = UserBPTabSettings.IncludeFees
        SetTaxFeeChecks = True

        chkBPPricePerUnit.Checked = UserBPTabSettings.PricePerUnit

        ' Invention checks
        UpdatingInventionChecks = True
        chkBPIncludeInventionCosts.Checked = UserBPTabSettings.IncludeInventionCost
        chkBPIncludeInventionTime.Checked = UserBPTabSettings.IncludeInventionTime
        chkBPIncludeCopyCosts.Checked = UserBPTabSettings.IncludeCopyCost
        chkBPIncludeCopyTime.Checked = UserBPTabSettings.IncludeCopyTime
        chkBPIncludeT3Costs.Checked = UserBPTabSettings.IncludeT3Cost
        chkBPIncludeT3Time.Checked = UserBPTabSettings.IncludeT3Time
        UpdatingInventionChecks = False

        ' These facilities use the same include checks
        SelectedBPInventionFacility.IncludeActivityCost = UserBPTabSettings.IncludeInventionCost
        SelectedBPInventionFacility.IncludeActivityTime = UserBPTabSettings.IncludeInventionTime
        SelectedBPCopyFacility.IncludeActivityCost = UserBPTabSettings.IncludeCopyCost
        SelectedBPCopyFacility.IncludeActivityTime = UserBPTabSettings.IncludeCopyTime

        SelectedBPSubsystemManufacturingFacility.IncludeActivityCost = UserBPTabSettings.IncludeT3Cost
        SelectedBPSubsystemManufacturingFacility.IncludeActivityTime = UserBPTabSettings.IncludeT3Time
        SelectedBPT3CruiserManufacturingFacility.IncludeActivityCost = UserBPTabSettings.IncludeT3Cost
        SelectedBPT3CruiserManufacturingFacility.IncludeActivityTime = UserBPTabSettings.IncludeT3Time
        SelectedBPT3InventionFacility.IncludeActivityCost = UserBPTabSettings.IncludeT3Cost
        SelectedBPT3InventionFacility.IncludeActivityTime = UserBPTabSettings.IncludeT3Time

        ' Enter the max lines we have regardless
        txtBPLines.Text = CStr(UserBPTabSettings.ProductionLines)
        ' Set Max Invention Lines
        txtBPInventionLines.Text = CStr(UserBPTabSettings.LaboratoryLines)
        txtBPRelicLines.Text = CStr(UserBPTabSettings.T3Lines)

        ' Facility combos
        cmbBPFacilitySystem.Enabled = False
        cmbBPFacilityRegion.Enabled = False
        cmbBPFacilityorArray.Enabled = False

        ' Ignore settings
        chkBPIgnoreInvention.Checked = UserBPTabSettings.IgnoreInvention
        chkBPIgnoreMinerals.Checked = UserBPTabSettings.IgnoreMinerals
        chkBPIgnoreT1Item.Checked = UserBPTabSettings.IgnoreT1Item

        ' Only show the facility and options tab first
        tabBPInventionEquip.TabPages.Remove(tabInventionCalcs)
        tabBPInventionEquip.TabPages.Remove(tabT3Calcs)
        tabBPInventionEquip.SelectTab(0)
        ' Disable it and teams until BP selected
        gbBPTeam.Enabled = False
        tabBPInventionEquip.Enabled = False

        ' Default team
        BPTeamComboLoaded = True ' Don't trigger a combo load yet
        cmbBPTeamActivities.Text = ActivityManufacturing
        Call LoadDefaultTeam(True, ActivityManufacturing, False, cmbBPTeam, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab)
        ' Enable default label and disable save since just loaded the default
        lblBPDefaultTeam.Visible = True
        btnBPSaveTeam.Enabled = False
        BPTeamComboLoaded = False

        ' Default facility
        LoadingFacilityActivities = True ' Don't trigger a combo load yet
        cmbBPFacilityActivities.Text = ActivityManufacturing ' Always load the default manufacturing facility
        chkBPFacilityIncludeUsage.Checked = DefaultBPManufacturingFacility.IncludeActivityUsage ' Make sure this is set before loading
        Call LoadFacility(IndustryType.Manufacturing, True, False, _
                          cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                          lblBPFacilityBonus, lblBPFacilityDefault, lblBPFacilityManualME, txtBPFacilityManualME, _
                          lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, btnBPFacilitySave, lblBPFacilityTaxRate, _
                          BPTab, chkBPFacilityIncludeUsage, Nothing, Nothing, Nothing, FullyLoadedBPFacility, cmbBPFacilityActivities, 1, 0, 0, True, False)
        LoadingFacilityActivities = False

        CurrentBPCategoryID = 0
        CurrentBPGroupID = 0
        CurrentIndustryType = IndustryType.Manufacturing

        BPFacilityRegionsLoaded = False
        BPFacilitySystemsLoaded = False
        BPFacilitiesLoaded = False

        ' Disable all entry areas until a blueprint is selected
        btnBPRefreshBP.Enabled = False
        btnBPCopyMatstoClip.Enabled = False
        btnBPAddBPMatstoShoppingList.Enabled = False
        txtBPME.Enabled = False
        txtBPTE.Enabled = False
        txtBPRuns.Enabled = False
        txtBPNumBPs.Enabled = False
        txtBPLines.Enabled = False
        chkBPPricePerUnit.Enabled = False
        txtBPAddlCosts.Enabled = False
        chkBPBuildBuy.Enabled = False
        chkBPFacilityIncludeUsage.Enabled = False
        chkBPTaxes.Enabled = False
        chkBPBrokerFees.Enabled = False

        ' Copy Labels
        rbtnBPComponentCopy.Enabled = False
        rbtnBPRawmatCopy.Enabled = False
        rbtnBPCopyInvREMats.Enabled = False

        ' Color Labels
        lblBPBuyColor.Visible = False
        lblBPBuildColor.Visible = False

        ' BP Combo selection booleans
        ComboMenuDown = False
        MouseWheelSelection = False
        ComboBoxArrowKeys = False

        ' BP History
        BPHistory = New List(Of Blueprint)
        CurrentBPHistoryIndex = -1 ' Nothing added yet
        btnBPBack.Enabled = False
        btnBPForward.Enabled = False

        ' Clear grids
        lstBPComponentMats.Items.Clear()
        lstBPRawMats.Items.Clear()

        ResetBPTab = True
        EnterKeyPressed = False

        ' Load the combo
        Call LoadBlueprintCombo()

    End Sub

    ' Saves the settings on the form for default later
    Private Sub btnBPSaveSettings_Click(sender As System.Object, e As System.EventArgs) Handles btnBPSaveSettings.Click
        Dim TempSettings As BPTabSettings = Nothing
        Dim Settings As New ProgramSettings

        If Trim(txtBPLines.Text) <> "" Then
            If Not IsNumeric(txtBPLines.Text) Then
                MsgBox("Invalid BP Lines value", vbExclamation, Application.ProductName)
                txtBPLines.Focus()
                Exit Sub
            End If
        End If

        If Trim(txtBPInventionLines.Text) <> "" Then
            If Not IsNumeric(txtBPInventionLines.Text) Then
                MsgBox("Invalid Invention Lines value", vbExclamation, Application.ProductName)
                txtBPInventionLines.Focus()
                Exit Sub
            End If
        End If

        If Trim(txtBPRelicLines.Text) <> "" Then
            If Not IsNumeric(txtBPRelicLines.Text) Then
                MsgBox("Invalid T3 Invention Lines value", vbExclamation, Application.ProductName)
                txtBPRelicLines.Focus()
                Exit Sub
            End If
        End If

        ' Prod/Lab Lines
        TempSettings.ProductionLines = CInt(txtBPLines.Text)
        TempSettings.LaboratoryLines = CInt(txtBPInventionLines.Text)
        TempSettings.T3Lines = CInt(txtBPRelicLines.Text)

        If rbtnBPAllBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPAllBlueprints.Text
        ElseIf rbtnBPOwnedBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPOwnedBlueprints.Text
        ElseIf rbtnBPFavoriteBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPFavoriteBlueprints.Text
        ElseIf rbtnBPShipBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPShipBlueprints.Text
        ElseIf rbtnBPDroneBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPDroneBlueprints.Text
        ElseIf rbtnBPAmmoChargeBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPAmmoChargeBlueprints.Text
        ElseIf rbtnBPModuleBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPModuleBlueprints.Text
        ElseIf rbtnBPComponentBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPComponentBlueprints.Text
        ElseIf rbtnBPStructureBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPStructureBlueprints.Text
        ElseIf rbtnBPSubsystemBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPSubsystemBlueprints.Text
        ElseIf rbtnBPRigBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPRigBlueprints.Text
        ElseIf rbtnBPBoosterBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPBoosterBlueprints.Text
        ElseIf rbtnBPMiscBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPMiscBlueprints.Text
        ElseIf rbtnBPCelestialsBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPCelestialsBlueprints.Text
        ElseIf rbtnBPDeployableBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPDeployableBlueprints.Text
        ElseIf rbtnBPStationPartsBlueprints.Checked Then
            TempSettings.BlueprintTypeSelection = rbtnBPStationPartsBlueprints.Text
        End If

        If rbtnBPComponentCopy.Checked Then
            TempSettings.ExporttoShoppingListType = rbtnBPComponentCopy.Text
        ElseIf rbtnBPRawmatCopy.Checked Then
            TempSettings.ExporttoShoppingListType = rbtnBPRawmatCopy.Text
        ElseIf rbtnBPCopyInvREMats.Checked Then
            TempSettings.ExporttoShoppingListType = rbtnBPCopyInvREMats.Text
        End If

        TempSettings.Tech1Check = chkBPT1.Checked
        TempSettings.Tech2Check = chkBPT2.Checked
        TempSettings.Tech3Check = chkBPT3.Checked
        TempSettings.TechStorylineCheck = chkBPStoryline.Checked
        TempSettings.TechFactionCheck = chkBPNavyFaction.Checked
        TempSettings.TechPirateCheck = chkBPPirateFaction.Checked

        TempSettings.IncludeIgnoredBPs = chkBPIncludeIgnoredBPs.Checked

        TempSettings.SmallCheck = chkBPSmall.Checked
        TempSettings.MediumCheck = chkBPMedium.Checked
        TempSettings.LargeCheck = chkBPLarge.Checked
        TempSettings.XLCheck = chkBPXL.Checked

        TempSettings.IncludeUsage = chkBPFacilityIncludeUsage.Checked
        TempSettings.IncludeTaxes = chkBPTaxes.Checked
        TempSettings.IncludeFees = chkBPBrokerFees.Checked

        TempSettings.IncludeInventionCost = chkBPIncludeInventionCosts.Checked
        TempSettings.IncludeInventionTime = chkBPIncludeInventionTime.Checked
        SelectedBPInventionFacility.IncludeActivityCost = chkBPIncludeInventionCosts.Checked
        SelectedBPInventionFacility.IncludeActivityTime = chkBPIncludeInventionTime.Checked

        TempSettings.IncludeCopyCost = chkBPIncludeCopyCosts.Checked
        TempSettings.IncludeCopyTime = chkBPIncludeCopyTime.Checked
        SelectedBPCopyFacility.IncludeActivityCost = chkBPIncludeCopyCosts.Checked
        SelectedBPCopyFacility.IncludeActivityTime = chkBPIncludeCopyTime.Checked

        ' For T3 on the BP tab, save both facility data
        TempSettings.IncludeT3Cost = chkBPIncludeT3Costs.Checked
        TempSettings.IncludeT3Time = chkBPIncludeT3Time.Checked

        ' Ignore settings
        TempSettings.IgnoreInvention = chkBPIgnoreInvention.Checked
        TempSettings.IgnoreMinerals = chkBPIgnoreMinerals.Checked
        TempSettings.IgnoreT1Item = chkBPIgnoreT1Item.Checked

        SelectedBPSubsystemManufacturingFacility.IncludeActivityCost = chkBPIncludeT3Costs.Checked
        SelectedBPSubsystemManufacturingFacility.IncludeActivityTime = chkBPIncludeT3Time.Checked
        SelectedBPT3CruiserManufacturingFacility.IncludeActivityCost = chkBPIncludeT3Costs.Checked
        SelectedBPT3CruiserManufacturingFacility.IncludeActivityTime = chkBPIncludeT3Time.Checked
        SelectedBPT3InventionFacility.IncludeActivityCost = chkBPIncludeT3Costs.Checked
        SelectedBPT3InventionFacility.IncludeActivityTime = chkBPIncludeT3Time.Checked

        TempSettings.PricePerUnit = chkBPPricePerUnit.Checked

        ' Save the relic and decryptor if they have the setting set
        If UserApplicationSettings.SaveBPRelicsDecryptors Then
            ' See if the T2 window is open and has a decryptor then save, only will be open if they have a t2 bp loaded
            If SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T2 Then
                TempSettings.T2DecryptorType = cmbBPInventionDecryptor.Text
                TempSettings.RelicType = UserBPTabSettings.RelicType
                TempSettings.T3DecryptorType = UserBPTabSettings.T3DecryptorType ' Save the old one
            End If

            ' See if the T3 window is open and has a decryptor then save, only will be open if they have a t3 bp loaded
            If SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T3 Then
                TempSettings.T2DecryptorType = UserBPTabSettings.T2DecryptorType ' Save the old one
                TempSettings.RelicType = cmbBPRelic.Text
                TempSettings.T3DecryptorType = cmbBPT3Decryptor.Text
            End If
        End If

        ' Save these here too
        UserApplicationSettings.CheckBuildBuy = chkBPBuildBuy.Checked
        Call Settings.SaveApplicationSettings(UserApplicationSettings)

        ' Save the data in the XML file
        Call Settings.SaveBPSettings(TempSettings)

        ' Save the data to the local variable
        UserBPTabSettings = TempSettings

        MsgBox("Settings Saved", vbInformation, Application.ProductName)

    End Sub

    ' Saves the BP data
    Private Sub btnBPSaveBP_Click(sender As System.Object, e As System.EventArgs) Handles btnBPSaveBP.Click
        Dim AdditionalCost As Double
        Dim SaveBPType As BPType

        ' Check additional costs for saving with this bp
        If IsNumeric(txtBPAddlCosts.Text) Then
            AdditionalCost = CDbl(txtBPAddlCosts.Text)
        Else
            AdditionalCost = 0
        End If

        ' Save the BP
        If CorrectMETE(txtBPME.Text, txtBPTE.Text, txtBPME, txtBPTE) Then
            If SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T2 And chkBPIgnoreInvention.Checked = True Then
                ' T2 BPO 
                SaveBPType = BPType.Original
            ElseIf SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T2 Or SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T3 Then
                ' Save T2/T3 an invented BPC, since if they aren't ignoring invention they have to use a decryptor or invention to get it
                SaveBPType = BPType.InventedBPC
            Else ' Everything else is a copy
                SaveBPType = BPType.Copy
            End If

            Call UpdateBPinDB(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetName, CInt(txtBPME.Text), CInt(txtBPTE.Text), SaveBPType, _
                              CInt(txtBPME.Text), CInt(txtBPTE.Text), 0, False, False, AdditionalCost)

            Call RefreshBP()

        End If

        MsgBox("BP Saved", vbInformation, Application.ProductName)

    End Sub

    ' Selects the blueprint from the combo and loads it into the grids
    Private Sub SelectBlueprint(Optional ByVal NewBP As Boolean = True)
        Dim SQL As String
        Dim readerBP As SQLiteDataReader
        Dim BPTypeID As Long
        Dim TempTech As Integer
        Dim ItemType As Integer
        Dim ItemGroupID As Integer
        Dim ItemCategoryID As Integer
        Dim AddlCost As Double

        Dim SelectedIndyType As IndustryType

        ' Set the number of runs to 1 if it's blank
        If Trim(txtBPRuns.Text) = "" Then
            txtBPRuns.Text = "1"
        End If

        ' Check the quantity
        If Not IsNumeric(txtBPRuns.Text) Then
            MsgBox("You must enter a valid number of runs", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPRuns.Focus()
            Exit Sub
        End If

        ' Check the num bps
        If Not IsNumeric(txtBPNumBPs.Text) Or Trim(txtBPNumBPs.Text) = "" Then
            MsgBox("You must enter a valid number of BPs", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPNumBPs.Focus()
            Exit Sub
        End If

        ' Additional costs
        If Not IsNumeric(txtBPAddlCosts.Text) Or Trim(txtBPAddlCosts.Text) = "" Then
            MsgBox("You must enter a valid additional cost value", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPAddlCosts.Focus()
            Exit Sub
        End If

        txtBPME.Enabled = True
        txtBPTE.Enabled = True

        ' We are loading a new blueprint, always save the previous blueprint in the history whenever they select a new one
        If Not IsNothing(SelectedBlueprint) Then
            Call BPHistory.Add(SelectedBlueprint)
            CurrentBPHistoryIndex = BPHistory.Count - 1
        End If

        SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_ID, TECH_LEVEL, ITEM_TYPE, ITEM_GROUP_ID, ITEM_CATEGORY_ID "
        SQL = SQL & "FROM ALL_BLUEPRINTS "
        SQL = SQL & "WHERE ALL_BLUEPRINTS.BLUEPRINT_NAME = "

        If SelectedBPText <> "" Then
            SQL = SQL & "'" & FormatDBString(SelectedBPText) & "'"
        Else
            SQL = SQL & "'" & FormatDBString(cmbBPBlueprintSelection.Text) & "'"
        End If

        DBCommand = New SQLiteCommand(SQL, DB)
        readerBP = DBCommand.ExecuteReader

        If readerBP.Read() Then
            BPTypeID = readerBP.GetInt64(0)
            TempTech = readerBP.GetInt32(1)
            ItemType = readerBP.GetInt32(2)
            ItemGroupID = readerBP.GetInt32(3)
            ItemCategoryID = readerBP.GetInt32(4)
        Else
            Exit Sub
        End If

        readerBP.Close()

        ' Load the image
        Call LoadBlueprintPicture(BPTypeID, ItemType)

        ' Set for max production lines
        If Not SentFromManufacturingTab And Not SentFromShoppingList Then ' We might have different values there and they set on double click
            ' Reset the entry boxes
            txtBPRuns.Text = "1"
            txtBPNumBPs.Text = "1"

            txtBPLines.Text = CStr(UserBPTabSettings.ProductionLines)
            txtBPInventionLines.Text = CStr(UserBPTabSettings.LaboratoryLines)
            txtBPRelicLines.Text = CStr(UserBPTabSettings.T3Lines)

            Call ResetDecryptorCombos(TempTech)

        Else
            ' Set up for Reloading the decryptor combo on T2/T3
            ' Allow reloading of Decryptors
            InventionDecryptorsLoaded = False
            T3DecryptorsLoaded = False
            If TempTech = 2 Then
                cmbBPInventionDecryptor.Text = SelectedDecryptor.Name
            Else
                cmbBPT3Decryptor.Text = SelectedDecryptor.Name
            End If
            ' Allow loading decryptors on drop down
            LoadingInventionDecryptors = False
            LoadingT3Decryptors = False
            ' Allow reloading of relics
            RelicsLoaded = False
        End If

        ' Finally set the ME and TE in the display (need to allow the user to choose different BP's and play with ME/TE) - Search user bps first
        SQL = "SELECT ME, TE, ADDITIONAL_COSTS, RUNS, BP_TYPE"
        SQL = SQL & " FROM OWNED_BLUEPRINTS WHERE USER_ID =" & SelectedCharacter.ID
        SQL = SQL & " AND BLUEPRINT_ID = " & BPTypeID & " AND OWNED <> 0 " ' Only load user or api owned bps

        DBCommand = New SQLiteCommand(SQL, DB)
        readerBP = DBCommand.ExecuteReader()

        Dim HasOwnedBP As Boolean = False

        If readerBP.Read() Then
            HasOwnedBP = True
        Else
            ' Try again with corp
            readerBP.Close()
            SQL = "SELECT ME, TE, ADDITIONAL_COSTS, RUNS, BP_TYPE"
            SQL = SQL & " FROM OWNED_BLUEPRINTS WHERE USER_ID =" & SelectedCharacter.CharacterCorporation.CorporationID
            SQL = SQL & " AND BLUEPRINT_ID = " & BPTypeID & " AND SCANNED = 2 AND OWNED <> 0 "

            DBCommand = New SQLiteCommand(SQL, DB)
            readerBP = DBCommand.ExecuteReader()

            If readerBP.Read() Then
                HasOwnedBP = True
            End If
        End If

        Dim OwnedBPRuns As Integer

        If HasOwnedBP Then
            txtBPME.Text = CStr(readerBP.GetInt32(0))
            OwnedBPME = txtBPME.Text
            txtBPTE.Text = CStr(readerBP.GetInt32(1))
            OwnedBPPE = txtBPTE.Text
            OwnedBP = True
            AddlCost = readerBP.GetDouble(2)
            OwnedBPRuns = readerBP.GetInt32(3)
        Else
            OwnedBP = False
            AddlCost = 0
            OwnedBPRuns = 1

            If TempTech = 1 Then ' All T1
                If Not SentFromManufacturingTab Then
                    txtBPME.Text = CStr(UserApplicationSettings.DefaultBPME)
                    txtBPTE.Text = CStr(UserApplicationSettings.DefaultBPTE)
                ElseIf SentFromShoppingList Then
                    ' Will be set already or use default
                    If Trim(txtBPME.Text) = "" Then
                        txtBPME.Text = CStr(UserApplicationSettings.DefaultBPME)
                    End If
                    txtBPTE.Text = CStr(UserApplicationSettings.DefaultBPTE)
                Else ' use the defaults set there instead of settings (manufacturing tab)
                    txtBPME.Text = txtCalcTempME.Text
                    txtBPTE.Text = txtCalcTempTE.Text
                End If
            Else ' Default T2/T3 BPCs are going to be copies
                If NewBP Then
                    txtBPME.Text = CStr(BaseT2T3ME + SelectedDecryptor.MEMod)
                    txtBPTE.Text = CStr(BaseT2T3TE + SelectedDecryptor.TEMod)
                End If
            End If
        End If

        Dim TempBPType As BPType

        If OwnedBP Then
            TempBPType = GetBPType(readerBP.GetInt32(4))
        Else
            TempBPType = BPType.NotOwned
        End If

        If TempTech <> 1 And TempBPType <> BPType.Original Then
            Call SetInventionEnabled("T" & CStr(TempTech), True) ' First enable then let the ignore invention check override if needed
            chkBPIgnoreInvention.Checked = UserBPTabSettings.IgnoreInvention

            ' disable the me/te boxes since these are invented
            If chkBPIgnoreInvention.Checked Then
                txtBPME.Enabled = True
                txtBPTE.Enabled = True
            Else
                txtBPME.Enabled = False
                txtBPTE.Enabled = False
            End If

        Else ' Check the ignore invention, they own this BPO and don't need to invent it (if T2)
            If TempTech = 2 Then
                chkBPIgnoreInvention.Checked = True
            End If
            ' enable the me/te boxes
            txtBPME.Enabled = True
            txtBPTE.Enabled = True
        End If

        If TempTech <> 2 Then
            chkBPIgnoreInvention.Enabled = False ' can't invent t1, and T3 are always invented - so don't allow toggle
        Else
            chkBPIgnoreInvention.Enabled = True ' All T2 options need the toggle
        End If

        BPTeamComboLoaded = True  ' Dont' trigger a reload  yet

        ' Add any additional costs
        txtBPAddlCosts.Text = FormatNumber(AddlCost, 2)

        ' Teams
        Select Case TempTech
            Case BlueprintTechLevel.T1
                ' Add only T1 or T3 activities to team
                cmbBPTeamActivities.Items.Clear()
                cmbBPTeamActivities.Items.Add(ActivityManufacturing)
            Case BlueprintTechLevel.T2
                ' Add only T2 activities to team
                cmbBPTeamActivities.Items.Clear()
                cmbBPTeamActivities.Items.Add(ActivityManufacturing)
                cmbBPTeamActivities.Items.Add(ActivityCopying)
                'cmbBPTeamActivities.Items.Add(ActivityInvention) ' Remove until they implement invention teams
                cmbBPTeamActivities.Items.Add(ActivityComponentManufacturing)
            Case BlueprintTechLevel.T3
                cmbBPTeamActivities.Items.Clear()
                cmbBPTeamActivities.Items.Add(ActivityManufacturing)
                cmbBPTeamActivities.Items.Add(ActivityComponentManufacturing)
        End Select

        ' Make sure the current option matches what's in the team combo or set to manufacturing
        If Not cmbBPTeamActivities.Items.Contains(cmbBPTeamActivities.Text) Then
            cmbBPTeamActivities.Text = ActivityManufacturing
        End If

        BPTeamComboLoaded = False

        ' Load the facility activity types for this setup
        Call LoadFacilityActivities(TempTech, True, cmbBPFacilityActivities, ItemGroupID, ItemCategoryID)

        ' Make sure the selection is in the list of options, set to manufacturing if not
        If Not cmbBPFacilityActivities.Items.Contains(cmbBPFacilityActivities.Text) Then
            cmbBPFacilityActivities.Text = ActivityManufacturing
        End If

        SelectedIndyType = GetProductionType(cmbBPFacilityActivities.Text, ItemGroupID, ItemCategoryID, cmbBPFacilityType.Text)

        Dim CostCheck As CheckBox
        Dim TimeCheck As CheckBox

        Select Case SelectedIndyType
            Case IndustryType.Invention, IndustryType.T3Invention
                CostCheck = chkBPIncludeInventionCosts
                TimeCheck = chkBPIncludeInventionTime
            Case IndustryType.Copying
                CostCheck = chkBPIncludeCopyCosts
                TimeCheck = chkBPIncludeCopyTime
            Case IndustryType.T3Invention
                CostCheck = chkBPIncludeT3Costs
                TimeCheck = chkBPIncludeT3Time
            Case Else
                CostCheck = Nothing
                TimeCheck = Nothing
        End Select

        ' Load the facility based on what was selected, if not in the list then load manufacturing - basically don't change the facility unless we have to
        If SelectedIndyType <> PreviousIndustryType Or cmbBPFacilityType.Text = POSFacility Then  ' always load with POS so we can load the correct array
            Call LoadFacility(SelectedIndyType, False, True, _
                            cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                            lblBPFacilityBonus, lblBPFacilityDefault, lblBPFacilityManualME, txtBPFacilityManualME, _
                            lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, _
                            btnBPFacilitySave, lblBPFacilityTaxRate, BPTab, _
                            chkBPFacilityIncludeUsage, Nothing, CostCheck, TimeCheck, FullyLoadedBPFacility, cmbBPFacilityActivities, _
                            TempTech, ItemGroupID, ItemCategoryID, False, False) ' Don't load activites again
        End If

        cmbBPBlueprintSelection.Focus()

        ' Reset the combo for invention, and Load the relic types for BP selected for T3
        If NewBP Then
            Dim TempDName As String = ""
            If TempBPType = BPType.InventedBPC Or TempBPType = BPType.Copy Then
                ' Load the decryptor based on ME/TE
                Dim TempD As New DecryptorList
                LoadingInventionDecryptors = True
                LoadingT3Decryptors = True
                InventionDecryptorsLoaded = False
                T3DecryptorsLoaded = False
                ' Load up the decryptor based on data entered or BP data from an owned bp
                SelectedDecryptor = TempD.GetDecryptor(CInt(txtBPME.Text), CInt(txtBPTE.Text), OwnedBPRuns, TempTech)
                If SelectedDecryptor.Name = None And CInt(txtBPME.Text) <> BaseT2T3ME And CInt(txtBPTE.Text) <> BaseT2T3TE And TempBPType = BPType.Copy Then
                    TempDName = Unknown
                Else
                    TempDName = SelectedDecryptor.Name
                End If

                If TempTech = 2 Then
                    cmbBPInventionDecryptor.Text = TempDName
                ElseIf TempTech = 3 Then
                    cmbBPT3Decryptor.Text = TempDName
                End If

                LoadingInventionDecryptors = False
                LoadingT3Decryptors = False
            Else
                Call ResetDecryptorCombos(TempTech)
            End If

            If TempTech = 3 Then
                ' Load up the relic based on the bp data
                Call LoadRelicTypes(BPTypeID)
                Dim Tempstring As String
                Tempstring = GetRelicfromInputs(SelectedDecryptor, BPTypeID, OwnedBPRuns)
                If Tempstring <> "" Then
                    LoadingRelics = True
                    ' if found, set it else
                    cmbBPRelic.Text = Tempstring
                    LoadingRelics = False
                End If
            End If

            ' Turn off the invention calcs if unknown
            UpdatingInventionChecks = True
            If TempDName = Unknown Then
                chkBPIncludeCopyCosts.Checked = False
                chkBPIncludeCopyTime.Checked = False
                chkBPIncludeInventionCosts.Checked = False
                chkBPIncludeInventionTime.Checked = False
            Else
                chkBPIncludeCopyCosts.Checked = UserBPTabSettings.IncludeCopyCost
                chkBPIncludeCopyTime.Checked = UserBPTabSettings.IncludeCopyTime
                chkBPIncludeInventionCosts.Checked = UserBPTabSettings.IncludeInventionCost
                chkBPIncludeInventionTime.Checked = UserBPTabSettings.IncludeInventionTime
            End If
            UpdatingInventionChecks = False

        End If

        ' Make sure everything is enabled on first BP load
        If ResetBPTab Then
            btnBPRefreshBP.Enabled = True
            btnBPCopyMatstoClip.Enabled = True
            btnBPAddBPMatstoShoppingList.Enabled = True
            txtBPRuns.Enabled = True
            txtBPAddlCosts.Enabled = True
            chkBPBuildBuy.Enabled = True
            txtBPNumBPs.Enabled = True
            txtBPLines.Enabled = True
            chkBPFacilityIncludeUsage.Enabled = True
            chkBPTaxes.Enabled = True
            chkBPBrokerFees.Enabled = True
            chkBPPricePerUnit.Enabled = True

            btnBPBack.Enabled = True
            btnBPForward.Enabled = True

            ResetBPTab = False ' Reset
        End If

        readerBP.Close()
        readerBP = Nothing
        DBCommand = Nothing

        Application.DoEvents()

        ' Update the grid
        Call UpdateBPGrids(BPTypeID, TempTech, NewBP, ItemGroupID, ItemCategoryID)
        txtBPRuns.SelectAll()
        txtBPRuns.Focus()

    End Sub

    ' Updates the lists with the correct materials for the selected item
    Private Sub UpdateBPGrids(ByVal BPID As Long, ByVal BPTech As Integer, ByVal NewBPSelection As Boolean, _
                              BPGroupID As Integer, BPCategoryID As Integer, Optional UpdateTeamBonusLabel As Boolean = True)
        Dim IndustrySkill As Integer = 0
        Dim i As Integer = 0
        Dim BPRawMats As List(Of Material)
        Dim BPComponentMats As List(Of Material)
        Dim rawlstViewRow As ListViewItem
        Dim complstViewRow As ListViewItem
        Dim TempME As String = "0"
        Dim TempPrice As Double = 0
        Dim BPCName As String = ""

        Dim SelectedRuns As Integer
        Dim ZeroCostToolTipText As String = ""

        Dim InventionFacility As IndustryFacility
        Dim IndyType As IndustryType

        ' For Invention Copy data - set defaults here
        Dim T1CopyRuns As Integer = 0
        Dim CopyCostPerSecond As Double = 0
        Dim SQL As String = ""
        Dim AdditionalCosts As Double

        ' T2/T3 variables
        Dim RelicName As String = ""

        Dim BPME As Integer = 0
        Dim BPTE As Integer = 0

        ' Set the number of runs to 1 if it's blank
        If Trim(txtBPRuns.Text) = "" Then
            txtBPRuns.Text = "1"
        End If

        ' Check the quantity
        If Not IsNumeric(txtBPRuns.Text) Or Val(txtBPRuns.Text) <= 0 Then
            MsgBox("You must enter a valid number of runs", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPRuns.Focus()
            Exit Sub
        Else
            SelectedRuns = CInt(txtBPRuns.Text)
        End If

        ' Check the num bps
        If Not IsNumeric(txtBPNumBPs.Text) Or Trim(txtBPNumBPs.Text) = "" Then
            MsgBox("You must enter a valid number of BPs", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPNumBPs.Focus()
            Exit Sub
        End If

        ' Additional costs
        If Not IsNumeric(txtBPAddlCosts.Text) Or Trim(txtBPAddlCosts.Text) = "" Then
            MsgBox("You must enter a valid additional cost value", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPAddlCosts.Focus()
            Exit Sub
        Else
            ' Set the additional costs (this is just a raw value they enter)
            AdditionalCosts = CDbl(txtBPAddlCosts.Text)
        End If

        ' Check num lines
        If Not IsNumeric(txtBPLines.Text) Or Val(txtBPLines.Text) <= 0 Then
            MsgBox("You must enter a valid number of Production Lines", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPLines.Focus()
            Exit Sub
        End If

        ' Check the laboratory lines
        If Not IsNumeric(txtBPInventionLines.Text) Or Val(txtBPInventionLines.Text) <= 0 Then
            MsgBox("You must enter a valid number of Invention Lines", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPInventionLines.Focus()
            Exit Sub
        End If

        If Not IsNumeric(txtBPRelicLines.Text) Or Val(txtBPRelicLines.Text) <= 0 Then
            MsgBox("You must enter a valid number of T3 Invention Lines", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPRelicLines.Focus()
            Exit Sub
        End If

        ' Check num bps
        If Not IsNumeric(txtBPNumBPs.Text) Or Val(txtBPNumBPs.Text) <= 0 Then
            MsgBox("You must enter a valid number of BPs", vbExclamation, Application.ProductName)
            txtBPRuns.SelectAll()
            txtBPRuns.Focus()
            Exit Sub
        End If

        ' Make sure they have a facility loaded - if not, load the default for this indy type
        If Not FullyLoadedBPFacility Then
            ' Get the type of facility we are doing
            IndyType = GetProductionType(cmbBPFacilityActivities.Text, BPGroupID, BPCategoryID, cmbBPFacilityType.Text)

            Dim CostCheck As CheckBox
            Dim TimeCheck As CheckBox

            Select Case IndyType
                Case IndustryType.Invention, IndustryType.T3Invention
                    CostCheck = chkBPIncludeInventionCosts
                    TimeCheck = chkBPIncludeInventionTime
                Case IndustryType.Copying
                    CostCheck = chkBPIncludeCopyCosts
                    TimeCheck = chkBPIncludeCopyTime
                Case IndustryType.T3Invention
                    CostCheck = chkBPIncludeT3Costs
                    TimeCheck = chkBPIncludeT3Time
                Case Else
                    CostCheck = Nothing
                    TimeCheck = Nothing
            End Select

            Call LoadFacility(IndyType, True, True, _
                              cmbBPFacilityActivities.Text, cmbBPFacilityType, cmbBPFacilityRegion, cmbBPFacilitySystem, cmbBPFacilityorArray, _
                              lblBPFacilityBonus, lblBPFacilityDefault, lblBPFacilityManualME, txtBPFacilityManualME, _
                              lblBPFacilityManualTE, txtBPFacilityManualTE, lblBPFacilityManualTax, txtBPFacilityManualTax, _
                              btnBPFacilitySave, lblBPFacilityTaxRate, BPTab, _
                              chkBPFacilityIncludeUsage, Nothing, CostCheck, TimeCheck, FullyLoadedBPFacility, cmbBPFacilityActivities, _
                              BPTech, BPGroupID, BPCategoryID, False)
        End If

        ' Determine the type of facility we want to build from for this blueprint first
        BlueprintBuildFacility = GetManufacturingFacility(GetProductionType(ActivityManufacturing, BPGroupID, BPCategoryID, cmbBPFacilityType.Text), BPTab)

        ' Working
        ' Now load the materials into the lists
        ' Clear Lists
        lstBPComponentMats.Items.Clear()
        lstBPComponentMats.Enabled = False
        lstBPRawMats.Items.Clear()
        lstBPRawMats.Enabled = False
        lblBPCanMakeBP.Visible = False
        lblBPCanMakeBPAll.Visible = False
        txtListEdit.Visible = False
        Me.Cursor = Cursors.WaitCursor
        IgnoreFocus = True
        Application.DoEvents()
        IgnoreFocus = False

        BPME = CInt(txtBPME.Text)
        BPTE = CInt(txtBPTE.Text)

        ' Create an instance of a ListView column sorter and assign it 
        ' to the ListView controls on the BP screen
        rawBPMatsColumnSorter = New ListViewColumnSorter()
        lstBPRawMats.ListViewItemSorter = rawBPMatsColumnSorter

        compBPMatsColumnSorter = New ListViewColumnSorter()
        lstBPComponentMats.ListViewItemSorter = compBPMatsColumnSorter

        ' Construct our Blueprint
        SelectedBlueprint = New Blueprint(BPID, SelectedRuns, BPME, BPTE, CInt(txtBPNumBPs.Text), CInt(txtBPLines.Text), SelectedCharacter, _
                                          UserApplicationSettings, chkBPBuildBuy.Checked, AdditionalCosts, SelectedBPManufacturingTeam, BlueprintBuildFacility, _
                                          SelectedBPComponentManufacturingTeam, SelectedBPComponentManufacturingFacility, SelectedBPCapitalComponentManufacturingFacility)

        ' Set the T2 and T3 inputs if necessary
        If BPTech <> BlueprintTechLevel.T1 And chkBPIgnoreInvention.Checked = False Then

            If BPTech = BlueprintTechLevel.T3 Then
                ' Need to add the relic variant to the query for just one item
                RelicName = cmbBPRelic.Text
                InventionFacility = SelectedBPT3InventionFacility
            Else
                ' T2 no relic 
                RelicName = ""
                InventionFacility = SelectedBPInventionFacility
            End If

            ' invent this bp
            txtBPNumBPs.Text = CStr(SelectedBlueprint.InventBlueprint(CInt(txtBPInventionLines.Text), SelectedDecryptor, _
                                  InventionFacility, SelectedBPInventionTeam, SelectedBPCopyFacility, SelectedBPCopyTeam, GetInventItemTypeID(BPID, RelicName)))
            ' Disable the num bps box
            txtBPNumBPs.Enabled = False
        Else
            txtBPNumBPs.Enabled = True
        End If

        ' Build the item and get the list of materials
        Call SelectedBlueprint.BuildItems(chkBPTaxes.Checked, chkBPTaxes.Checked, chkBPFacilityIncludeUsage.Checked, chkBPIgnoreMinerals.Checked, chkBPIgnoreT1Item.Checked)

        ' Sort the lists
        SelectedBlueprint.GetRawMaterials.SortMaterialListByQuantity()
        SelectedBlueprint.GetComponentMaterials.SortMaterialListByQuantity()

        ' Get the lists
        BPRawMats = SelectedBlueprint.GetRawMaterials.GetMaterialList
        BPComponentMats = SelectedBlueprint.GetComponentMaterials.GetMaterialList

        If chkBPBuildBuy.Checked Then
            lblBPComponentMats.Text = "Build/Buy Component Material List"
            lblBPRawMats.Text = "Build/Buy Raw Material List"
            lblBPBuildColor.Visible = True
            lblBPBuyColor.Visible = True
        Else ' Show all
            lblBPComponentMats.Text = "Component Material List"
            lblBPRawMats.Text = "Raw Material List"
            lblBPBuildColor.Visible = False
            lblBPBuyColor.Visible = False
        End If

        ' Fill Component List if components built
        If Not IsNothing(BPComponentMats) And SelectedBlueprint.HasComponents Then
            lstBPComponentMats.Items.Clear()
            lstBPComponentMats.BeginUpdate()
            For i = 0 To BPComponentMats.Count - 1
                complstViewRow = lstBPComponentMats.Items.Add(BPComponentMats(i).GetMaterialName) ' Check TODO - Add check box?
                'The remaining columns are subitems  
                'complstViewRow.SubItems.Add(BPComponentMats(i).GetMaterialName)
                complstViewRow.SubItems.Add(FormatNumber(BPComponentMats(i).GetQuantity, 0))
                TempME = BPComponentMats(i).GetItemME

                ' Mark line yellow if the blueprint for this item has no ME stored
                If TempME = "0" Then
                    complstViewRow.BackColor = Color.LightGray
                Else
                    complstViewRow.BackColor = Color.White
                End If

                ' If we want to build the item, then override the back color
                If chkBPBuildBuy.Checked Then
                    If BPComponentMats(i).GetBuildItem Then
                        complstViewRow.BackColor = lblBPBuildColor.BackColor
                    Else
                        complstViewRow.BackColor = lblBPBuyColor.BackColor
                    End If
                End If

                complstViewRow.SubItems.Add(TempME)
                TempPrice = BPComponentMats(i).GetCostPerItem

                ' If the price is zero, highlight text as red
                If TempPrice = 0 Then
                    complstViewRow.ForeColor = Color.Red
                Else
                    complstViewRow.ForeColor = Color.Black
                End If
                complstViewRow.SubItems.Add(FormatNumber(TempPrice, 2))
                complstViewRow.SubItems.Add(FormatNumber(BPComponentMats(i).GetTotalCost, 2))
            Next

            lstBPComponentMats.EndUpdate()

            ' Enable the raw and component selector radio for exporting to shopping list (only if we don't have calc build/buy checked)
            If chkBPBuildBuy.Checked = True Then
                rbtnBPRawmatCopy.Enabled = False
                rbtnBPComponentCopy.Enabled = True
            Else
                rbtnBPRawmatCopy.Enabled = True
                rbtnBPComponentCopy.Enabled = True
            End If

            rbtnBPComponentCopy.Checked = True
            lstBPComponentMats.Enabled = True

        Else ' No components
            ' Disable the raw and component selector radio for exporting to shopping list, the button will still just pull the data from the list anyway though
            rbtnBPComponentCopy.Enabled = False
            rbtnBPRawmatCopy.Enabled = True
            rbtnBPRawmatCopy.Checked = True
            lstBPComponentMats.Enabled = False
        End If

        If SelectedBlueprint.GetTechLevel <> BlueprintTechLevel.T1 Then
            ' Enable the invention mats
            rbtnBPCopyInvREMats.Enabled = True

            ' Set this value if it just got enabled and they want it
            If UserBPTabSettings.ExporttoShoppingListType = rbtnBPCopyInvREMats.Text Then
                rbtnBPCopyInvREMats.Checked = True
            End If
        Else
            rbtnBPCopyInvREMats.Enabled = False
        End If

        If Not IsNothing(BPRawMats) Then
            ' Fill the Raw List
            lstBPRawMats.Items.Clear()
            lstBPRawMats.BeginUpdate()
            For i = 0 To BPRawMats.Count - 1
                rawlstViewRow = lstBPRawMats.Items.Add(BPRawMats(i).GetMaterialName)
                'The remaining columns are subitems  
                rawlstViewRow.SubItems.Add(FormatNumber(BPRawMats(i).GetQuantity, 0))
                rawlstViewRow.SubItems.Add(BPRawMats(i).GetItemME)
                TempPrice = BPRawMats(i).GetCostPerItem
                ' If the price is zero, highlight text as red
                If TempPrice = 0 Then
                    rawlstViewRow.ForeColor = Color.Red
                Else
                    rawlstViewRow.ForeColor = Color.Black
                End If
                rawlstViewRow.SubItems.Add(FormatNumber(TempPrice, 2))
                rawlstViewRow.SubItems.Add(FormatNumber(BPRawMats(i).GetTotalCost, 2))
            Next
            lstBPRawMats.EndUpdate()
        End If

        ' Get the production time
        If chkBPBuildBuy.Checked Then
            ' Grey this out because it doesn't really apply here
            lblBPProductionTime.Enabled = False
        Else
            lblBPProductionTime.Enabled = True
        End If

        ' Reset the number of bps to what we used in batches, not what was entered
        txtBPNumBPs.Text = CStr(SelectedBlueprint.GetUsedNumBPs)

        ' Show and update labels for T2 if selected
        If SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T2 Then
            If chkBPIgnoreInvention.Checked = False Then
                If SelectedBlueprint.UserCanInventRE Then
                    lblBPT2InventStatus.Text = "Invention Calculations:"
                    lblBPT2InventStatus.ForeColor = Color.Black
                Else
                    lblBPT2InventStatus.Text = "Cannot Invent - Typical Cost Shown"
                    lblBPT2InventStatus.ForeColor = Color.Red
                End If

                ' Invention cost to get enough success for the runs entered
                lblBPInventionCost.Text = FormatNumber(SelectedBlueprint.GetInventionCost(), 2)

                ' Add copy costs for enough succesful runs
                lblBPCopyCosts.Text = FormatNumber(SelectedBlueprint.GetCopyCost, 2)

                ' Invention Chance
                lblBPInventionChance.Text = FormatPercent(SelectedBlueprint.GetInventionChance(), 2)

                ' Update the decryptor stats box ME: -4, TE: -3, Runs: +9
                lblBPDecryptorStats.Text = "ME: " & CStr(SelectedDecryptor.MEMod) & ", TE: " & CStr(SelectedDecryptor.TEMod) & vbCrLf & "BP Runs: " & CStr(SelectedBlueprint.GetSingleInventedBPCRuns)

                ' Show the copy time if they want it
                lblBPCopyTime.Text = FormatIPHTime(SelectedBlueprint.GetCopyTime)

                ' Show the invention time if they want it
                lblBPInventionTime.Text = FormatIPHTime(SelectedBlueprint.GetInventionTime)

                ' Set the tool tip for copy costs to the invention chance label
                ttMain.SetToolTip(lblBPInventionChance, SelectedBlueprint.GetInventionBPC)

                ' Finally check the invention materials and make sure that if any have 0.00 for price,
                ' we update the invention label and add a tooltip for what has a price of 0
                If Not IsNothing(SelectedBlueprint.GetInventionMaterials.GetMaterialList) Then
                    With SelectedBlueprint.GetInventionMaterials
                        For i = 0 To .GetMaterialList.Count - 1
                            If .GetMaterialList(i).GetTotalCost = 0 And Not (.GetMaterialList(i).GetMaterialName.Contains("Blueprint") Or .GetMaterialList(i).GetMaterialName.Contains("Data Interface")) Then
                                ZeroCostToolTipText = ZeroCostToolTipText & .GetMaterialList(i).GetMaterialName & ", "
                            End If
                        Next
                    End With
                End If

                If ZeroCostToolTipText <> "" Then
                    ' We have a few zero priced items
                    ZeroCostToolTipText = ZeroCostToolTipText.Substring(0, Len(ZeroCostToolTipText) - 2)
                    ZeroCostToolTipText = "Invention Costs may be inaccurate; the following items have 0.00 for price: " & ZeroCostToolTipText
                    lblBPT2InventStatus.ForeColor = Color.Red
                    ttMain.SetToolTip(lblBPT2InventStatus, ZeroCostToolTipText)
                Else
                    lblBPT2InventStatus.ForeColor = Color.Black
                    ttMain.SetToolTip(lblBPT2InventStatus, "")
                End If
            Else
                FirstLoad = True
                Call ResetInventionBoxes()
                FirstLoad = False
            End If


            ' Show the invention tabs
            tabBPInventionEquip.TabPages.Remove(tabT3Calcs)
            If Not tabBPInventionEquip.TabPages.Contains(tabInventionCalcs) Then
                tabBPInventionEquip.TabPages.Add(tabInventionCalcs)
            End If

            ' Enable option
            rbtnBPCopyInvREMats.Enabled = True

        ElseIf SelectedBlueprint.GetTechLevel = BlueprintTechLevel.T3 Then
            ' Show the RE calc tab
            tabBPInventionEquip.TabPages.Remove(tabInventionCalcs)
            If Not tabBPInventionEquip.TabPages.Contains(tabT3Calcs) Then
                tabBPInventionEquip.TabPages.Add(tabT3Calcs)
            End If

            If chkBPIgnoreInvention.Checked = False Then
                ' RE Cost and time
                lblBPRECost.Text = FormatNumber(SelectedBlueprint.GetInventionCost(), 2)
                lblBPRETime.Text = FormatIPHTime(SelectedBlueprint.GetInventionTime())

                ' Update the decryptor stats box ME: -4, TE: -3, Runs: +9
                lblBPT3Stats.Text = "ME: " & CStr(SelectedDecryptor.MEMod) & ", TE: " & CStr(SelectedDecryptor.TEMod) & "," & vbCrLf & "BP Runs: " & CStr(SelectedBlueprint.GetSingleInventedBPCRuns)

                If SelectedBlueprint.UserCanInventRE Then
                    lblT3InventStatus.Text = "T3 Invention Calculations:"
                    lblT3InventStatus.ForeColor = Color.Black
                Else
                    lblT3InventStatus.Text = "Cannot Invent - Typical Cost Shown"
                    lblT3InventStatus.ForeColor = Color.Red
                End If

                lblBPT3InventionChance.Text = FormatPercent(SelectedBlueprint.GetInventionChance(), 2)

                ' Enable option for adding mats to shopping list
                rbtnBPCopyInvREMats.Enabled = True

                ' Finally check the RE materials and make sure that if any have 0.00 for price,
                ' we update the RE label and add a tooltip for what has a price of 0
                If Not IsNothing(SelectedBlueprint.GetInventionMaterials.GetMaterialList) Then
                    With SelectedBlueprint.GetInventionMaterials
                        For i = 0 To .GetMaterialList.Count - 1
                            If .GetMaterialList(i).GetTotalCost = 0 Then
                                ZeroCostToolTipText = ZeroCostToolTipText & .GetMaterialList(i).GetMaterialName & ", "
                            End If
                        Next
                    End With
                End If

                If ZeroCostToolTipText <> "" Then
                    ' We have a few zero priced items
                    ZeroCostToolTipText = ZeroCostToolTipText.Substring(0, Len(ZeroCostToolTipText) - 2)
                    ZeroCostToolTipText = "T3 Invention Costs may be inaccurate; the following items have 0.00 for price: " & ZeroCostToolTipText
                    lblT3InventStatus.ForeColor = Color.Red
                    ttMain.SetToolTip(lblT3InventStatus, ZeroCostToolTipText)
                Else
                    lblBPT2InventStatus.ForeColor = Color.Black
                    ttMain.SetToolTip(lblT3InventStatus, "")
                End If
            Else
                FirstLoad = True
                Call ResetInventionBoxes()
                FirstLoad = False
            End If

        Else ' T1
            If rbtnBPCopyInvREMats.Checked Then
                ' We are turning this off, so move to raw
                rbtnBPRawmatCopy.Checked = True
            End If
            rbtnBPCopyInvREMats.Enabled = False

            ' Remove calcs for t1
            tabBPInventionEquip.TabPages.Remove(tabInventionCalcs)
            tabBPInventionEquip.TabPages.Remove(tabT3Calcs)
        End If

        ' Set the tab to the one selected
        If SelectedBPTabIndex <= tabBPInventionEquip.TabCount - 1 Then
            tabBPInventionEquip.SelectTab(SelectedBPTabIndex)
        Else
            tabBPInventionEquip.SelectTab(0)
        End If

        ' If we loaded from the manufacturing tab or shopping list, this is no longer relevant for the next bp tab updates
        SentFromManufacturingTab = False
        SentFromShoppingList = False

        ' Update any bonus label the selected team might give for this BP
        If UpdateTeamBonusLabel Then
            Dim TempList As New List(Of Long)

            ' Set the groupID's that we want to limit the team search to
            If SelectedBlueprint.HasComponents And cmbBPTeamActivities.Text = ActivityComponentManufacturing Then
                ' Load up all the items that build this blueprint
                For i = 0 To SelectedBlueprint.GetComponentMaterials.GetMaterialList.Count - 1
                    TempList.Add(SelectedBlueprint.GetComponentMaterials.GetMaterialList(i).GetMaterialTypeID)
                Next
            ElseIf cmbBPTeamActivities.Text <> ActivityComponentManufacturing Or cmbBPTeamActivities.Text <> ActivityCapComponentManufacturing Then
                ' Just add the groupID
                TempList.Add(SelectedBlueprint.GetItemGroupID)
            Else
                ' Send nothing
                TempList = Nothing
            End If

            Select Case cmbBPTeamActivities.Text
                Case ActivityManufacturing
                    Call DisplayTeamBonus(TempList, SelectedBPManufacturingTeam, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab)
                Case ActivityComponentManufacturing, ActivityCapComponentManufacturing
                    Call DisplayTeamBonus(TempList, SelectedBPComponentManufacturingTeam, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab)
                Case ActivityCopying
                    Call DisplayTeamBonus(TempList, SelectedBPCopyTeam, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab)
                Case ActivityInvention
                    Call DisplayTeamBonus(TempList, SelectedBPInventionTeam, txtBPTeamBonus, lblBPDefaultTeam, btnBPSaveTeam, BPTab)
            End Select
        End If

        ' Save this for later
        CurrentBPCategoryID = SelectedBlueprint.GetItemCategoryID
        CurrentBPGroupID = SelectedBlueprint.GetItemGroupID

        If SelectedBlueprint.HasComponents Then
            Select Case BPGroupID
                Case TitanGroupID, DreadnoughtGroupID, CarrierGroupID, SupercarrierGroupID, CapitalIndustrialShipGroupID, IndustrialCommandShipGroupID, FreighterGroupID, JumpFreighterGroupID
                    If Not cmbBPFacilityActivities.Items.Contains(ActivityCapComponentManufacturing) Then
                        cmbBPFacilityActivities.Items.Add(ActivityCapComponentManufacturing)
                    End If
                    If BPGroupID = JumpFreighterGroupID Then
                        ' Need to add both cap and components
                        If Not cmbBPFacilityActivities.Items.Contains(ActivityComponentManufacturing) Then
                            cmbBPFacilityActivities.Items.Add(ActivityComponentManufacturing)
                        End If
                    End If
                Case Else
                    If Not cmbBPFacilityActivities.Items.Contains(ActivityComponentManufacturing) Then
                        cmbBPFacilityActivities.Items.Add(ActivityComponentManufacturing)
                    End If
            End Select
        End If

        ' Make sure the selection is in the list of options, set to manufacturing if not
        If Not cmbBPFacilityActivities.Items.Contains(cmbBPFacilityActivities.Text) Then
            cmbBPFacilityActivities.Text = ActivityManufacturing
        End If

        ' Finally Update the labels
        Call UpdateBPPriceLabels()

ExitForm:

        ' Done
        lstBPComponentMats.Enabled = True
        lstBPRawMats.Enabled = True
        lblBPCanMakeBP.Visible = True
        lblBPCanMakeBPAll.Visible = True

        ' Enable Teams and facility selectors
        tabBPInventionEquip.Enabled = True
        'gbBPTeam.Enabled = True

        Me.Cursor = Cursors.Default

    End Sub

    ' Selects the images to be shown in the picture when a blueprint is selected
    Private Sub LoadBlueprintPicture(ByVal BPID As Long, ByVal ItemType As Integer)
        Dim BPImage As String
        Dim BPTechImagePath As String = ""

        ' Load the image - use absolute value since I use negative bpid's for special bps
        BPImage = UserImagePath & CStr(Math.Abs(BPID) & "_64.png")

        ' Check for the Tech Image
        If System.IO.File.Exists(BPImage) Then
            pictBP.Image = Image.FromFile(BPImage)
        Else
            pictBP.Image = Nothing
        End If

        pictBP.Update()

    End Sub

    ' Selects and sets the decryptor
    Private Function SelectDecryptor(ByVal DecryptorText As String) As Decryptor

        If DecryptorText = None Or DecryptorText = "" Then
            SelectedDecryptor = NoDecryptor
        Else
            Dim InventionDecryptors As New DecryptorList()
            SelectedDecryptor = InventionDecryptors.GetDecryptor(DecryptorText)
        End If

        ' Set the ME/TE text here
        txtBPME.Text = CStr(SelectedDecryptor.MEMod + BaseT2T3ME)
        txtBPTE.Text = CStr(SelectedDecryptor.TEMod + BaseT2T3TE)

        Return SelectedDecryptor

    End Function

    ' Builds the query for the select combo
    Private Function BuildBPSelectQuery() As String
        Dim SQL As String = ""
        Dim SQLItemType As String = ""

        ' Core Query ' Get rid of 's in blueprint name for sorting
        SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_NAME, REPLACE(BLUEPRINT_NAME,'''','') AS X FROM ALL_BLUEPRINTS, INVENTORY_TYPES "
        SQL = SQL & "WHERE ALL_BLUEPRINTS.ITEM_ID = INVENTORY_TYPES.typeID "

        ' Find what type of blueprint we want
        With Me
            If .rbtnBPAmmoChargeBlueprints.Checked Then
                SQL = SQL & "AND ITEM_CATEGORY = 'Charge' "
            ElseIf .rbtnBPDroneBlueprints.Checked Then
                SQL = SQL & "AND ITEM_CATEGORY = 'Drone' "
            ElseIf .rbtnBPModuleBlueprints.Checked Then
                SQL = SQL & "AND (ITEM_CATEGORY ='Module' AND ITEM_GROUP NOT LIKE 'Rig%') "
            ElseIf .rbtnBPShipBlueprints.Checked Then
                SQL = SQL & "AND ITEM_CATEGORY = 'Ship' "
            ElseIf .rbtnBPSubsystemBlueprints.Checked Then
                SQL = SQL & "AND ITEM_CATEGORY = 'Subsystem' "
            ElseIf .rbtnBPBoosterBlueprints.Checked Then
                SQL = SQL & "AND ITEM_CATEGORY = 'Implant' "
            ElseIf .rbtnBPComponentBlueprints.Checked Then
                SQL = SQL & "AND (ITEM_GROUP LIKE '%Components%' AND ITEM_GROUP <> 'Station Components') "
            ElseIf .rbtnBPMiscBlueprints.Checked Then
                SQL = SQL & "AND ITEM_GROUP IN ('Tool','Data Interfaces','Cyberimplant','Fuel Block') "
            ElseIf .rbtnBPDeployableBlueprints.Checked Then
                SQL = SQL & "AND ITEM_CATEGORY = 'Deployable' "
            ElseIf .rbtnBPCelestialsBlueprints.Checked Then
                SQL = SQL & "AND ITEM_CATEGORY IN ('Celestial','Orbitals','Sovereignty Structures', 'Station', 'Accessories', 'Infrastructure Upgrades') "
            ElseIf .rbtnBPStructureBlueprints.Checked Then
                SQL = SQL & "AND ITEM_CATEGORY = 'Starbase' "
            ElseIf .rbtnBPStationPartsBlueprints.Checked Then
                SQL = SQL & "AND ITEM_GROUP = 'Station Components' "
            ElseIf .rbtnBPRigBlueprints.Checked Then
                SQL = SQL & "AND BLUEPRINT_GROUP = 'Rig Blueprint' "
            ElseIf .rbtnBPOwnedBlueprints.Checked Then
                SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_NAME, REPLACE(ALL_BLUEPRINTS.BLUEPRINT_NAME,'''','') AS X FROM ALL_BLUEPRINTS, INVENTORY_TYPES, "
                SQL = SQL & "OWNED_BLUEPRINTS WHERE OWNED_BLUEPRINTS.USER_ID=" & SelectedCharacter.ID & " AND OWNED <> 0 "
                SQL = SQL & "AND ALL_BLUEPRINTS.BLUEPRINT_ID = OWNED_BLUEPRINTS.BLUEPRINT_ID "
                SQL = SQL & "AND ALL_BLUEPRINTS.ITEM_ID = INVENTORY_TYPES.typeID "
            ElseIf .rbtnBPFavoriteBlueprints.Checked Then
                SQL = "SELECT ALL_BLUEPRINTS.BLUEPRINT_NAME, REPLACE(ALL_BLUEPRINTS.BLUEPRINT_NAME,'''','') AS X FROM ALL_BLUEPRINTS, INVENTORY_TYPES, "
                SQL = SQL & "OWNED_BLUEPRINTS WHERE OWNED_BLUEPRINTS.USER_ID=" & SelectedCharacter.ID & " AND OWNED <> 0 "
                SQL = SQL & "AND ALL_BLUEPRINTS.BLUEPRINT_ID = OWNED_BLUEPRINTS.BLUEPRINT_ID AND FAVORITE = 1 "
                SQL = SQL & "AND ALL_BLUEPRINTS.ITEM_ID = INVENTORY_TYPES.typeID "
            End If
        End With

        ' Item Type Definitions - These are set by me based on existing data
        ' 1, 2, 14 are T1, T2, T3
        ' 3 is Storyline
        ' 15 is Pirate Faction
        ' 16 is Navy Faction

        ' Check Tech version
        If chkBPT1.Enabled Then
            ' Only a Subsystem so T3
            If chkBPT1.Checked Then
                SQLItemType = SQLItemType & "1,"
            End If
        End If

        If chkBPT2.Enabled Then
            If chkBPT2.Checked Then
                SQLItemType = SQLItemType & "2,"
            End If
        End If

        If chkBPT3.Enabled Then
            If chkBPT3.Checked Then
                SQLItemType = SQLItemType & "14,"
            End If
        End If

        If chkBPStoryline.Enabled Then
            If chkBPStoryline.Checked Then
                SQLItemType = SQLItemType & "3,"
            End If
        End If

        If chkBPPirateFaction.Enabled Then
            If chkBPPirateFaction.Checked Then
                SQLItemType = SQLItemType & "15,"
            End If
        End If

        If chkBPNavyFaction.Enabled Then
            If chkBPNavyFaction.Checked Then
                SQLItemType = SQLItemType & "16,"
            End If
        End If

        ' Add Item Type
        If SQLItemType <> "" Then
            SQLItemType = " ALL_BLUEPRINTS.ITEM_TYPE IN (" & SQLItemType.Substring(0, SQLItemType.Length - 1) & ") "
        Else
            ' They need to have at least one. If not, just return nothing
            BuildBPSelectQuery = ""
            Exit Function
        End If

        ' Add the item types
        SQL = SQL & "AND" & SQLItemType

        Dim SizesClause As String = ""

        ' Finally add the sizes
        If chkBPSmall.Checked Then ' Light
            SizesClause = SizesClause & "'S',"
        End If

        If chkBPMedium.Checked Then ' Medium
            SizesClause = SizesClause & "'M',"
        End If

        If chkBPLarge.Checked Then ' Heavy
            SizesClause = SizesClause & "'L',"
        End If

        If chkBPXL.Checked Then ' Fighters
            SizesClause = SizesClause & "'XL',"
        End If

        If SizesClause <> "" Then
            SizesClause = " AND SIZE_GROUP IN (" & SizesClause.Substring(0, Len(SizesClause) - 1) & ") "
        End If

        SQL = SQL & SizesClause

        ' Ignore flag
        If chkBPIncludeIgnoredBPs.Checked = False Then
            SQL = SQL & "AND IGNORE = 0 "
        End If

        SQL = SQL & " ORDER BY X"

        BuildBPSelectQuery = SQL

    End Function

    ' Loads the blueprint combo based on what was selected
    Private Sub LoadBlueprintCombo()
        Dim readerBPs As SQLiteDataReader
        Dim SQL As String

        Application.UseWaitCursor = True
        ' Clear anything that was there
        cmbBPBlueprintSelection.Items.Clear()

        SQL = BuildBPSelectQuery()

        If SQL = "" Then
            Exit Sub
        End If

        DBCommand = New SQLiteCommand(SQL, DB)
        readerBPs = DBCommand.ExecuteReader
        cmbBPBlueprintSelection.BeginUpdate()

        While readerBPs.Read
            ' Add the data to the array and combo
            cmbBPBlueprintSelection.Items.Add(readerBPs.GetString(0))
            Application.DoEvents()
        End While

        readerBPs.Close()

        readerBPs = Nothing
        DBCommand = Nothing

        cmbBPBlueprintSelection.EndUpdate()
        Application.UseWaitCursor = False

    End Sub

    ' Makes sure we have a tech checked for blueprints
    Private Sub EnsureBPTechCheck()
        If chkBPT1.Enabled And chkBPT1.Checked Then
            Exit Sub
        ElseIf chkBPT2.Enabled And chkBPT2.Checked Then
            Exit Sub
        ElseIf chkBPT3.Enabled And chkBPT3.Checked Then
            Exit Sub
        ElseIf chkBPNavyFaction.Enabled And chkBPNavyFaction.Checked Then
            Exit Sub
        ElseIf chkBPPirateFaction.Enabled And chkBPPirateFaction.Checked Then
            Exit Sub
        ElseIf chkBPStoryline.Enabled And chkBPStoryline.Checked Then
            Exit Sub
        End If

        ' If here, then none are checked that are enabled, find the first one enabled and check it
        If chkBPT1.Enabled Then
            chkBPT1.Checked = True
            Exit Sub
        ElseIf chkBPT2.Enabled Then
            chkBPT2.Checked = True
            Exit Sub
        ElseIf chkBPT3.Enabled Then
            chkBPT3.Checked = True
            Exit Sub
        ElseIf chkBPNavyFaction.Enabled Then
            chkBPNavyFaction.Checked = True
            Exit Sub
        ElseIf chkBPPirateFaction.Enabled Then
            chkBPPirateFaction.Checked = True
            Exit Sub
        ElseIf chkBPStoryline.Enabled Then
            chkBPStoryline.Checked = True
            Exit Sub
        End If

    End Sub

    ' Returns a list of group ID's for the selected BP for use in teams
    Private Function GetTeamGroupIDList() As List(Of Long)
        Dim TempList As New List(Of Long)
        Dim rsLookup As SQLiteDataReader
        Dim SQL As String

        If Not IsNothing(SelectedBlueprint) Then
            ' Set the groupID's that we want to limit the team search to
            If SelectedBlueprint.HasComponents And cmbBPTeamActivities.Text = ActivityComponentManufacturing Then
                ' Load up all the items that build this blueprint
                For i = 0 To SelectedBlueprint.GetComponentMaterials.GetMaterialList.Count - 1
                    With SelectedBlueprint.GetComponentMaterials.GetMaterialList(i)
                        SQL = "SELECT INVENTORY_GROUPS.groupID, categoryID FROM INVENTORY_TYPES, INVENTORY_GROUPS "
                        SQL = SQL & "WHERE INVENTORY_TYPES.groupID = INVENTORY_GROUPS.groupID "
                        SQL = SQL & "AND typeID = " & .GetMaterialTypeID
                        DBCommand = New SQLiteCommand(SQL, DB)
                        rsLookup = DBCommand.ExecuteReader
                        rsLookup.Read()
                        If rsLookup.GetInt64(1) = ComponentCategoryID Then
                            ' Only add this if it's a component - ingore all T1 and other items
                            TempList.Add(rsLookup.GetInt64(0))
                        End If
                        rsLookup.Close()
                    End With
                Next
            ElseIf cmbBPTeamActivities.Text <> ActivityComponentManufacturing Then
                ' Just add the groupID
                TempList.Add(SelectedBlueprint.GetItemGroupID)
            Else
                ' Send nothing
                TempList = Nothing
            End If
        Else
            ' Send nothing
            TempList = Nothing
        End If

        Return TempList

    End Function

    ' Updates the price and other labels on the BP tab for the selected BP
    Private Sub UpdateBPPriceLabels()
        ' For final printout in boxes
        Dim TotalRawProfit As Double
        Dim TotalCompProfit As Double
        Dim TotalRawIPH As Double
        Dim TotalCompIPH As Double
        Dim DivideUnits As Long

        If chkBPPricePerUnit.Checked Then
            ' Need to divide all values by the total units produced
            ' This will only update the values in the top right box
            DivideUnits = SelectedBlueprint.GetTotalUnits
            ' Show only 1 unit in the units label
            lblBPTotalUnits.Text = "1"
        Else
            ' Just keep everything the same
            DivideUnits = 1
            ' Show the total units
            lblBPTotalUnits.Text = FormatNumber(SelectedBlueprint.GetTotalUnits, 0)
        End If

        ' Find the market price for the produced item
        lblBPMarketCost.Text = FormatNumber(SelectedBlueprint.GetItemMarketPrice / DivideUnits, 2)

        ' Materials (bottom labels)
        lblBPRawMatCost.Text = FormatNumber(SelectedBlueprint.GetRawMaterials.GetTotalMaterialsCost, 2)
        lblBPComponentMatCost.Text = FormatNumber(SelectedBlueprint.GetComponentMaterials.GetTotalMaterialsCost, 2)

        ' Taxes/Fees
        lblBPTaxes.Text = FormatNumber(SelectedBlueprint.GetSalesTaxes / DivideUnits, 2)
        lblBPBrokerFees.Text = FormatNumber(SelectedBlueprint.GetSalesBrokerFees / DivideUnits, 2)

        ' Show the usage cost for the activity selected
        If chkBPFacilityIncludeUsage.Checked Then
            Select Case cmbBPFacilityActivities.Text
                Case ActivityManufacturing
                    lblBPFacilityUsage.Text = FormatNumber(SelectedBlueprint.GetManufacturingFacilityUsage / DivideUnits, 2)
                    ttMain.SetToolTip(lblBPFacilityUsage, GetUsageToolTipText(SelectedBlueprint.GetManufacturingFacility, True))
                Case ActivityInvention
                    lblBPFacilityUsage.Text = FormatNumber(SelectedBlueprint.GetInventionUsage() / DivideUnits, 2)
                    ttMain.SetToolTip(lblBPFacilityUsage, GetUsageToolTipText(SelectedBlueprint.GetInventionFacility, False))
                Case ActivityCopying
                    lblBPFacilityUsage.Text = FormatNumber(SelectedBlueprint.GetCopyUsage() / DivideUnits, 2)
                    ttMain.SetToolTip(lblBPFacilityUsage, GetUsageToolTipText(SelectedBlueprint.GetCopyFacility, False))
                Case ActivityComponentManufacturing
                    lblBPFacilityUsage.Text = FormatNumber(SelectedBlueprint.GetComponentFacilityUsage() / DivideUnits, 2)
                    ttMain.SetToolTip(lblBPFacilityUsage, GetUsageToolTipText(SelectedBlueprint.GetComponentManufacturingFacility, True))
                Case ActivityCapComponentManufacturing
                    lblBPFacilityUsage.Text = FormatNumber(SelectedBlueprint.GetCapComponentFacilityUsage() / DivideUnits, 2)
                    ttMain.SetToolTip(lblBPFacilityUsage, GetUsageToolTipText(SelectedBlueprint.GetCapitalComponentManufacturingFacility, True))
            End Select
        Else
            lblBPFacilityUsage.Text = "0.00"
        End If

        ' Total
        lblBPRawTotalCost.Text = FormatNumber((SelectedBlueprint.GetTotalRawCost) / DivideUnits, 2)
        lblBPTotalCompCost.Text = FormatNumber((SelectedBlueprint.GetTotalComponentCost) / DivideUnits, 2)

        ' Profit labels (market cost - total cost of mats and invention)
        TotalRawProfit = SelectedBlueprint.GetTotalRawProfit / DivideUnits

        If TotalRawProfit < 0 Then
            lblBPRawProfit.ForeColor = Color.Red
        Else
            lblBPRawProfit.ForeColor = Color.Black
        End If

        TotalCompProfit = SelectedBlueprint.GetTotalComponentProfit / DivideUnits

        If TotalCompProfit < 0 Then
            lblBPCompProfit.ForeColor = Color.Red
        Else
            lblBPCompProfit.ForeColor = Color.Black
        End If

        lblBPRawProfit.Text = FormatNumber(TotalRawProfit, 2)
        lblBPCompProfit.Text = FormatNumber(TotalCompProfit, 2)

        If DivideUnits = 1 Then
            TotalRawIPH = SelectedBlueprint.GetTotalIskperHourRaw
            TotalCompIPH = SelectedBlueprint.GetTotalIskperHourComponents
        Else ' Need to adjust the production time per unit then calck IPH
            ' ISK per Hour (divide total cost by production time in seconds for a isk per second calc, then multiply by 3600 for isk per hour)
            TotalRawIPH = TotalRawProfit / (SelectedBlueprint.GetTotalProductionTime / DivideUnits) * 3600 ' Build everything

            ' If we are doing build/buy then the total IPH will be the same as RAW since the lists are identical for what to buy 
            If chkBPBuildBuy.Checked Then
                TotalCompIPH = TotalRawIPH
            Else
                TotalCompIPH = TotalCompProfit / (SelectedBlueprint.GetProductionTime / DivideUnits) * 3600 ' Buy all components, just production time of BP
            End If

        End If

        If TotalRawProfit < 0 Then
            lblBPRawIPH.ForeColor = Color.Red
        Else
            lblBPRawIPH.ForeColor = Color.Black
        End If

        If TotalCompIPH < 0 Then
            lblBPCompIPH.ForeColor = Color.Red
        Else
            lblBPCompIPH.ForeColor = Color.Black
        End If

        ' ISK PER HOUR 
        lblBPRawIPH.Text = FormatNumber(TotalRawIPH, 2) ' Build everything
        lblBPCompIPH.Text = FormatNumber(TotalCompIPH, 2) ' Buy components

        ' Set the labels if the User Can make this item and/or all components
        If SelectedBlueprint.UserCanBuildBlueprint Then
            lblBPCanMakeBP.Text = "Can make this Item"
            lblBPCanMakeBP.ForeColor = Color.Black
        Else
            lblBPCanMakeBP.Text = "Cannot make this Item"
            lblBPCanMakeBP.ForeColor = Color.Red
        End If

        ' Only update the make all lable if we have something to make, else use the bp data
        If SelectedBlueprint.HasComponents Then
            If SelectedBlueprint.UserCanBuildAllComponents Then
                lblBPCanMakeBPAll.Text = "Can make All Components for this Item"
                lblBPCanMakeBPAll.ForeColor = Color.Black
            Else
                lblBPCanMakeBPAll.Text = "Cannot make All Components for this Item"
                lblBPCanMakeBPAll.ForeColor = Color.Red
            End If

            ' Has components, but if we are buying everything (no skills/build buy) - then state that instead, else show BP stuff
            If SelectedBlueprint.GetReqComponentSkills.NumSkills = 0 And chkBPBuildBuy.Checked Then
                lblBPCanMakeBPAll.Text = "Buying all Materials"
                lblBPCanMakeBPAll.ForeColor = Color.Black
            End If
        Else
            If SelectedBlueprint.UserCanBuildBlueprint Then
                lblBPCanMakeBPAll.Text = "Can make this Item"
                lblBPCanMakeBPAll.ForeColor = Color.Black
            Else
                lblBPCanMakeBPAll.Text = "Cannot make this Item"
                lblBPCanMakeBPAll.ForeColor = Color.Red
            End If

        End If

        ' BP production time
        lblBPProductionTime.Text = FormatIPHTime(SelectedBlueprint.GetProductionTime)
        ' Set the total time to produce all items for this Blueprint
        lblBPTotalItemPT.Text = FormatIPHTime(SelectedBlueprint.GetTotalProductionTime)

        ' Set the ME and TE values if they changed
        txtBPME.Text = CStr(SelectedBlueprint.GetME)
        txtBPTE.Text = CStr(SelectedBlueprint.GetTE)

    End Sub

    ' Check if the runs they entered can be made with the number of blueprints, this only applies to BPC's (T2 and T3)
    Private Sub UpdateBPLinesandBPs()

        If Not IsNothing(SelectedBlueprint) Then
            If Trim(txtBPRuns.Text) <> "" Then
                txtBPNumBPs.Text = CStr(GetUsedNumBPs(SelectedBlueprint.GetTypeID, SelectedBlueprint.GetTechLevel, CInt(txtBPRuns.Text), _
                                                      CInt(txtBPLines.Text), CInt(txtBPNumBPs.Text), SelectedDecryptor.RunMod))
            End If
        End If

    End Sub

    ' Returns the number of BPs to use for item type and runs sent
    Private Function GetUsedNumBPs(ByVal BlueprintTypeID As Long, ByVal SentTechLevel As Integer, _
                                   ByVal SentRuns As Integer, ByVal SentLines As Integer, ByVal SentNumBps As Integer, ByVal DecryptorMod As Integer) As Integer
        Dim readerOwned As SQLiteDataReader
        Dim SQL As String
        Dim MaxProductionRuns As Long
        Dim ReturnValue As Integer

        If SentTechLevel = 1 Then
            Return SentNumBps
        End If

        ' Set the number of bps
        If SentTechLevel = 2 Then
            SQL = "SELECT MAX_PRODUCTION_LIMIT FROM ALL_BLUEPRINTS WHERE BLUEPRINT_ID =" & CStr(BlueprintTypeID)

            DBCommand = New SQLiteCommand(SQL, DB)
            readerOwned = DBCommand.ExecuteReader()
            readerOwned.Read()

            MaxProductionRuns = readerOwned.GetInt32(0)

            readerOwned.Close()
            readerOwned = Nothing

        Else ' base T3 runs off of the relic
            Dim readerBP As SQLiteDataReader

            SQL = "SELECT quantity FROM INVENTORY_TYPES, INDUSTRY_ACTIVITY_PRODUCTS "
            SQL = SQL & "WHERE typeID = blueprintTypeID AND productTypeID = " & CStr(BlueprintTypeID) & " AND typeName = '" & cmbBPRelic.Text & "'"

            DBCommand = New SQLiteCommand(SQL, DB)
            readerBP = DBCommand.ExecuteReader()

            If readerBP.Read Then
                MaxProductionRuns = readerBP.GetInt32(0)
            Else
                ' Assume wrecked bp
                MaxProductionRuns = 3
            End If

            readerBP.Close()
            readerBP = Nothing

        End If

        MaxProductionRuns = MaxProductionRuns + DecryptorMod
        ' Set the num bps off of the calculated amount
        ReturnValue = CInt(Math.Ceiling(SentRuns / MaxProductionRuns))

        Return ReturnValue

    End Function

    ' Adds item to shopping list
    Private Sub btnAddBPMatstoShoppingList_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnBPAddBPMatstoShoppingList.Click
        Dim POSFlag As Boolean

        If BlueprintBuildFacility.FacilityType = POSFacility Then
            POSFlag = True
        Else
            POSFlag = False
        End If

        ' Just add it to shopping list with options
        Call AddToShoppingList(SelectedBlueprint, chkBPBuildBuy.Checked, rbtnBPRawmatCopy.Checked, rbtnBPComponentCopy.Checked, _
                               BlueprintBuildFacility.MaterialMultiplier, POSFlag, _
                               chkBPIgnoreInvention.Checked, chkBPIgnoreMinerals.Checked, chkBPIgnoreT1Item.Checked, _
                               rbtnBPCopyInvREMats.Checked)

        If TotalShoppingList.GetNumShoppingItems > 0 Then
            ' Add the final item and mark as items in list
            pnlShoppingList.Text = "Items in Shopping List"
            pnlShoppingList.ForeColor = Color.Red
        Else
            pnlShoppingList.Text = "No Items in Shopping List"
            pnlShoppingList.ForeColor = Color.Black
        End If

        ' Refresh the data if it's open
        If frmShop.Visible Then
            Call frmShop.RefreshLists()
        End If

    End Sub

    ' Loads the previous blueprint - stops at index 0 (won't load) - TODO
    Private Sub LoadPreviousBlueprint()
        If CurrentBPHistoryIndex <> 0 Then

        End If
    End Sub

    ' Loads the next blueprint if they used previous (won't load if no bps in list or index = 1) - TODO
    Private Sub LoadNextBlueprint()
        If BPHistory.Count > 0 And CurrentBPHistoryIndex - 1 < BPHistory.Count Then

        End If
    End Sub

    ' Takes the facility and sets all the tool tip text based on the data it used
    Private Function GetUsageToolTipText(SentFacility As IndustryFacility, IncludeTax As Boolean) As String
        ' Set the usage tool tip data
        Dim TTString As String

        ' TODO - need to update if they add Teams back in
        TTString = "Total cost of doing the selected activity at this facility using:" & vbCrLf
        TTString = TTString & "Base Job Cost = " & FormatNumber(SelectedBlueprint.GetBaseJobCost, 2) & " " & vbCrLf
        TTString = TTString & "System Index = " & FormatPercent(SentFacility.CostIndex, 2) & " " & vbCrLf
        If IncludeTax Then
            TTString = TTString & "Facility Tax Rate = " & FormatPercent(SentFacility.TaxRate, 2) & " " & vbCrLf
        End If
        TTString = TTString & "Double-click for a list of facility usages"

        Return TTString

    End Function

#End Region

#Region "Update Prices Tab"

#Region "Update Prices Tab User Object (Check boxes, Text, Buttons) Functions/Procedures "

    ' Checks or unchecks all the prices
    Private Sub UpdateAllPrices()
        If RunUpdatePriceList Then
            ' Don't update prices yet
            UpdateAllTechChecks = True
            RunUpdatePriceList = False

            Application.DoEvents()

            ' Just update the prices based on the checks
            Call CheckAllManufacturedPrices()
            Call CheckAllRawPrices()

            ' Good to go, update or clear
            RunUpdatePriceList = True
            UpdateAllTechChecks = True

            Application.DoEvents()

            If chkPriceManufacturedPrices.Checked = False And chkPriceRawMaterialPrices.Checked = False Then
                lstPricesView.Items.Clear()
                btnToggleAllPriceItems.Text = "Select All Items"
            Else
                If chkPriceManufacturedPrices.Checked = True And chkPriceRawMaterialPrices.Checked = True Then
                    btnToggleAllPriceItems.Text = "Uncheck All Items"
                Else
                    btnToggleAllPriceItems.Text = "Select All Items"
                End If
                Call UpdatePriceList()
            End If
        End If
    End Sub

    ' Checks or unchecks just the prices for raw material items
    Private Sub CheckAllRawPrices()

        RunUpdatePriceList = False

        ' Check all item boxes and do not run updates
        If chkPriceRawMaterialPrices.Checked = True Then
            chkMinerals.Checked = True
            chkIceProducts.Checked = True
            chkGas.Checked = True
            chkBPCs.Checked = True
            chkMisc.Checked = True
            chkAncientRelics.Checked = True
            chkAncientSalvage.Checked = True
            chkSalvage.Checked = True
            chkPlanetary.Checked = True
            chkDatacores.Checked = True
            chkDecryptors.Checked = True
            chkRawMats.Checked = True
            chkProcessedMats.Checked = True
            chkAdvancedMats.Checked = True
            chkMatsandCompounds.Checked = True
            chkDroneComponents.Checked = True
            chkBoosterMats.Checked = True
            chkPolymers.Checked = True
            chkAsteroids.Checked = True
        Else ' Turn off all item checks
            chkMinerals.Checked = False
            chkIceProducts.Checked = False
            chkGas.Checked = False
            chkBPCs.Checked = False
            chkMisc.Checked = False
            chkAncientRelics.Checked = False
            chkAncientSalvage.Checked = False
            chkSalvage.Checked = False
            chkPlanetary.Checked = False
            chkDatacores.Checked = False
            chkDecryptors.Checked = False
            chkRawMats.Checked = False
            chkProcessedMats.Checked = False
            chkAdvancedMats.Checked = False
            chkMatsandCompounds.Checked = False
            chkDroneComponents.Checked = False
            chkBoosterMats.Checked = False
            chkPolymers.Checked = False
            chkAsteroids.Checked = False
        End If

        RunUpdatePriceList = True

    End Sub

    ' Checks or unchecks just the prices for manufactured items
    Private Sub CheckAllManufacturedPrices()

        RunUpdatePriceList = False

        ' Check all item boxes and do not run updates
        If chkPriceManufacturedPrices.Checked = True Then
            chkShips.Checked = True
            chkModules.Checked = True
            chkDrones.Checked = True
            chkBoosters.Checked = True
            chkRigs.Checked = True
            chkCharges.Checked = True
            chkSubsystems.Checked = True
            chkStructures.Checked = True
            chkTools.Checked = True
            chkCapT2Components.Checked = True
            chkCapitalComponents.Checked = True
            chkComponents.Checked = True
            chkHybrid.Checked = True
            chkFuelBlocks.Checked = True
            chkStationComponents.Checked = True
            chkCelestials.Checked = True
            chkDeployables.Checked = True
            chkImplants.Checked = True
        Else ' Turn off all item checks
            chkShips.Checked = False
            chkModules.Checked = False
            chkDrones.Checked = False
            chkBoosters.Checked = False
            chkRigs.Checked = False
            chkCharges.Checked = False
            chkSubsystems.Checked = False
            chkStructures.Checked = False
            chkTools.Checked = False
            chkCapT2Components.Checked = False
            chkCapitalComponents.Checked = False
            chkComponents.Checked = False
            chkHybrid.Checked = False
            chkFuelBlocks.Checked = False
            chkStationComponents.Checked = False
            chkCelestials.Checked = False
            chkDeployables.Checked = False
            chkImplants.Checked = False
        End If

        RunUpdatePriceList = True

    End Sub

    Private Sub chkSplitPrices_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSplitPrices.CheckedChanged
        If chkSplitPrices.Checked Then
            gbPrice.Enabled = False
            gbSplitPrices.Enabled = True
        Else
            gbPrice.Enabled = True
            gbSplitPrices.Enabled = False
        End If
    End Sub

    Private Sub chkPriceSelectManufacturedItems_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkPriceManufacturedPrices.CheckedChanged

        Call CheckAllManufacturedPrices()

        If chkPriceManufacturedPrices.Checked = False And chkPriceRawMaterialPrices.Checked = False Then
            lstPricesView.Items.Clear()
            btnToggleAllPriceItems.Text = "Select All Items"
        Else
            If chkPriceManufacturedPrices.Checked = True And chkPriceRawMaterialPrices.Checked = True Then
                btnToggleAllPriceItems.Text = "Uncheck All Items"
            Else
                btnToggleAllPriceItems.Text = "Select All Items"
            End If
        End If

        If PriceToggleButtonHit = False And Not FirstLoad Then
            Call UpdatePriceList()
        End If

    End Sub

    Private Sub chkPriceRawMaterialPrices_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkPriceRawMaterialPrices.CheckedChanged

        Call CheckAllRawPrices()

        If chkPriceManufacturedPrices.Checked = False And chkPriceRawMaterialPrices.Checked = False Then
            lstPricesView.Items.Clear()
            btnToggleAllPriceItems.Text = "Select All Items"
        Else
            If chkPriceManufacturedPrices.Checked = True And chkPriceRawMaterialPrices.Checked = True Then
                btnToggleAllPriceItems.Text = "Uncheck All Items"
            Else
                btnToggleAllPriceItems.Text = "Select All Items"
            End If
        End If

        If PriceToggleButtonHit = False And Not FirstLoad Then
            Call UpdatePriceList()
        End If

    End Sub

    ' Toggles all selection checks on the prices tab
    Private Sub btnToggleAllPriceItems_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnToggleAllPriceItems.Click

        RunUpdatePriceList = False
        PriceToggleButtonHit = True

        If btnToggleAllPriceItems.Text = "Select All Items" And (chkPriceManufacturedPrices.Checked = False Or chkPriceRawMaterialPrices.Checked = False) Then
            ' Set the name, then uncheck all
            btnToggleAllPriceItems.Text = "Uncheck All Items"
            chkPriceRawMaterialPrices.Checked = True
            chkPriceManufacturedPrices.Checked = True
        ElseIf btnToggleAllPriceItems.Text = "Uncheck All Items" And chkPriceManufacturedPrices.Checked = True And chkPriceRawMaterialPrices.Checked = True Then
            ' Turn off all item checks
            btnToggleAllPriceItems.Text = "Select All Items"
            chkPriceRawMaterialPrices.Checked = False
            chkPriceManufacturedPrices.Checked = False
        End If

        RunUpdatePriceList = True

        Call UpdateAllPrices()
        PriceToggleButtonHit = False

    End Sub

    ' EVE Central Link
    Private Sub llblEVECentralContribute_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs)
        System.Diagnostics.Process.Start("http://eve-central.com/home/software.html")
    End Sub

    ' Updates the T1, T2 and T3 check boxes depending on item selections
    Private Sub UpdateTechChecks()
        Dim T1 As Boolean = False
        Dim T2 As Boolean = False
        Dim T3 As Boolean = False
        Dim Storyline As Boolean = False
        Dim Navy As Boolean = False
        Dim Pirate As Boolean = False

        Dim ItemsSelected As Boolean = False
        Dim i As Integer
        Dim TechChecks As Boolean = False

        ' For check all 
        If Not RunUpdatePriceList And UpdateAllTechChecks Then
            UpdateAllTechChecks = False
            ' Check all and leave
            For i = 1 To TechCheckBoxes.Length - 1
                TechCheckBoxes(i).Enabled = True
                ' Check this one and leave
                TechCheckBoxes(i).Checked = True
            Next i
            Exit Sub
        End If

        ' Check each item checked and set the check boxes accordingly
        If chkShips.Checked Then
            T1 = True
            T2 = True
            T3 = True
            Navy = True
            Pirate = True
            ItemsSelected = True
        End If

        If chkModules.Checked Then
            T1 = True
            T2 = True
            Navy = True
            Storyline = True
            ItemsSelected = True
        End If

        If chkSubsystems.Checked Then
            T3 = True
            ItemsSelected = True
        End If

        If chkDrones.Checked Then
            T1 = True
            T2 = True
            ItemsSelected = True
        End If

        If chkRigs.Checked Then
            T1 = True
            T2 = True
            ItemsSelected = True
        End If

        If chkBoosters.Checked Then
            T1 = True
            ItemsSelected = True
        End If

        If chkStructures.Checked Then
            T1 = True
            Pirate = True
            ItemsSelected = True
        End If

        If chkCharges.Checked Then
            T1 = True
            T2 = True
            ItemsSelected = True
        End If

        ' If none are checked, then uncheck and un-enable all
        If ItemsSelected Then

            ' Enable the Checks
            If T1 Then
                chkPricesT1.Enabled = True
            Else
                chkPricesT1.Enabled = False
            End If

            If T2 Then
                chkPricesT2.Enabled = True
            Else
                chkPricesT2.Enabled = False
            End If

            If T3 Then
                chkPricesT3.Enabled = True
            Else
                chkPricesT3.Enabled = False
            End If

            If Storyline Then
                chkPricesT4.Enabled = True
            Else
                chkPricesT4.Enabled = False
            End If

            If Navy Then
                chkPricesT5.Enabled = True
            Else
                chkPricesT5.Enabled = False
            End If

            If Pirate Then
                chkPricesT6.Enabled = True
            Else
                chkPricesT6.Enabled = False
            End If

            ' Make sure we have at le=t one checked
            For i = 1 To TechCheckBoxes.Length - 1
                If TechCheckBoxes(i).Enabled Then
                    If TechCheckBoxes(i).Checked Then
                        TechChecks = True
                        ' Found one enabled and checked, so leave for
                        Exit For
                    End If
                End If
            Next i

            If Not TechChecks Then
                ' Need to check at le=t one
                For i = 1 To TechCheckBoxes.Length - 1
                    If TechCheckBoxes(i).Enabled Then
                        ' Check this one and leave
                        TechCheckBoxes(i).Checked = True
                    End If
                Next i
            End If

        Else
            chkPricesT1.Enabled = False
            chkPricesT2.Enabled = False
            chkPricesT3.Enabled = False
            chkPricesT4.Enabled = False
            chkPricesT5.Enabled = False
            chkPricesT6.Enabled = False
        End If

        ' Save status of the Tech check boxes
        PriceCheckT1Enabled = chkPricesT1.Enabled
        PriceCheckT2Enabled = chkPricesT2.Enabled
        PriceCheckT3Enabled = chkPricesT3.Enabled
        PriceCheckT4Enabled = chkPricesT4.Enabled
        PriceCheckT5Enabled = chkPricesT5.Enabled
        PriceCheckT6Enabled = chkPricesT6.Enabled

    End Sub

    ' Clears all system's that may be checked including resetting the system combo
    Private Sub ClearSystemChecks()
        Dim i As Integer

        If Not IgnoreSystemCheckUpdates Then
            For i = 1 To SystemCheckBoxes.Length - 1
                SystemCheckBoxes(i).Checked = False
            Next
            ' Reset the system combo
            cmbPriceSystems.Text = DefaultSystemPriceCombo
        End If
    End Sub

    ' Function clears all region check boxes
    Private Sub ClearAllRegionChecks()
        Dim i As Integer

        If Not IgnoreRegionCheckUpdates Then
            For i = 1 To RegionCheckBoxes.Length - 1
                RegionCheckBoxes(i).Checked = False
            Next i
        End If
    End Sub

    ' Select all Region Check boxes
    Private Sub btnAllRegions_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCheckAllRegions.Click
        Dim i As Integer

        For i = 1 To RegionCheckBoxes.Length - 1
            RegionCheckBoxes(i).Checked = True
        Next i
    End Sub

    ' Uncheck all region check boxes
    Private Sub btnCheckNoRegions_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCheckNoRegions.Click
        Call ClearAllRegionChecks()
    End Sub

    ' Check all Region Checkboxes for empire regions
    Private Sub btnCheckEmpireRegions_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCheckEmpireRegions.Click
        Dim i As Integer

        For i = 1 To RegionCheckBoxes.Length - 1
            Select Case RegionCheckBoxes(i).Text
                Case "Aridia", "Black Rise", "Derelik", "Devoid", "Domain (Amarr)", _
                "Essence", "Everyshore", "Genesis", "Heimatar (Rens)", "Kador", "Khanid", _
                "Kor-Azor", "Lonetrek", "Metropolis (Hek)", "Molden Heath", "Placid", _
                "Sinq Laison (Dodixie)", "Solitude", "Tash-Murkon", "The Bleak Lands", "The Citadel", _
                "The Forge (Jita)", "Verge Vendor"

                    RegionCheckBoxes(i).Checked = True

                Case Else
                    RegionCheckBoxes(i).Checked = False
            End Select
        Next i
    End Sub

    ' Check only the regions with hubs
    Private Sub btnCheckNullLowRegions_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCheckNullLowRegions.Click
        Dim i As Integer

        For i = 1 To RegionCheckBoxes.Length - 1
            Select Case RegionCheckBoxes(i).Text
                Case "Aridia", "Black Rise", "Derelik", "Devoid", "Domain (Amarr)", _
                "Essence", "Everyshore", "Genesis", "Heimatar (Rens)", "Kador", "Khanid", _
                "Kor-Azor", "Lonetrek", "Metropolis (Hek)", "Molden Heath", "Placid", _
                "Sinq Laison (Dodixie)", "Solitude", "Tash-Murkon", "The Bleak Lands", "The Citadel", _
                "The Forge (Jita)", "Verge Vendor"

                    RegionCheckBoxes(i).Checked = False

                Case Else
                    RegionCheckBoxes(i).Checked = True
            End Select
        Next i
    End Sub

    Private Sub cmbPriceShipTypes_DropDown(sender As Object, e As System.EventArgs) Handles cmbPriceShipTypes.DropDown
        If FirstPriceShipTypesComboLoad Then
            Call LoadPriceShipTypes()
            FirstPriceShipTypesComboLoad = False
        End If
    End Sub

    Private Sub cmbPriceChargeTypes_DropDown(sender As Object, e As System.EventArgs) Handles cmbPriceChargeTypes.DropDown
        If FirstPriceChargeTypesComboLoad Then
            Call LoadPriceChargeTypes()
            FirstPriceChargeTypesComboLoad = False
        End If
    End Sub

    Private Sub txtPriceItemFilter_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtPriceItemFilter.KeyDown
        'Call ProcessCutCopyPasteSelect(txtPriceItemFilter, e)
        If e.KeyCode = Keys.Enter Then
            Call UpdatePriceList()
        End If
    End Sub

    ' Checks all item check's to see if there is one checked. True if one or more checked, False if not
    Private Function ItemsSelected() As Boolean

        ' If the prices list doesnt' have any items in it, nothing to update so nothing checked
        If lstPricesView.Items.Count <> 0 Then
            Return True
        Else
            Return False
        End If

    End Function

    Private Sub chkPricesT1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkPricesT1.Click
        If RefreshList Then
            Call UpdatePriceList()
        End If
    End Sub

    Private Sub chkPricesT2_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkPricesT2.Click
        If RefreshList Then
            Call UpdatePriceList()
        End If
    End Sub

    Private Sub chkPricesT3_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkPricesT3.Click
        If RefreshList Then
            Call UpdatePriceList()
        End If
    End Sub

    Private Sub chkPricesT4_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkPricesT4.Click
        If RefreshList Then
            Call UpdatePriceList()
        End If
    End Sub

    Private Sub chkPricesT5_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkPricesT5.Click
        If RefreshList Then
            Call UpdatePriceList()
        End If
    End Sub

    Private Sub chkPricesT6_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkPricesT6.Click
        If RefreshList Then
            Call UpdatePriceList()
        End If
    End Sub

    Private Sub chkMinerals_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkMinerals.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkIceProducts_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkIceProducts.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkDataCores_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDatacores.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkDecryptors_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDecryptors.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkGas_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkGas.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkBlueprints_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkBPCs.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkMisc_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMisc.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkSalvage_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSalvage.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkAncientSalvage_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkAncientSalvage.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkAncientRelics_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkAncientRelics.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkPolymers_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPolymers.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkRawMats_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRawMats.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkPlanetary_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPlanetary.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkAsteroids_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkAsteroids.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkProcessedMats_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkProcessedMats.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkAdvancedMats_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkAdvancedMats.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkMatsandCompounds_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkMatsandCompounds.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkDroneComponents_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDroneComponents.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkStationComponents_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkStationComponents.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkDeployables_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkDeployables.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkCelestial_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCelestials.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkImplants_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkImplants.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkBoosterMats_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBoosterMats.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkTools_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkTools.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkFuelBlocks_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkFuelBlocks.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkDataInterfaces_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call UpdatePriceList()
    End Sub

    Private Sub chkHybrid_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkHybrid.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkComponents_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkComponents.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkCapitalComponents_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCapitalComponents.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkCapT2Components_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCapT2Components.CheckedChanged
        Call UpdatePriceList()
    End Sub

    Private Sub chkBoosters_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkBoosters.CheckedChanged
        RefreshList = False
        Call UpdateTechChecks()
        Call UpdatePriceList()
        RefreshList = True
    End Sub

    Private Sub chkRigs_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRigs.CheckedChanged
        RefreshList = False
        Call UpdateTechChecks()
        Call UpdatePriceList()
        RefreshList = True
    End Sub

    Private Sub chkShips_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkShips.CheckedChanged

        If chkShips.Checked = True Then
            cmbPriceShipTypes.Enabled = True
        ElseIf chkShips.Checked = False Then
            cmbPriceShipTypes.Enabled = False
        End If

        RefreshList = False
        Call UpdateTechChecks()
        Call UpdatePriceList()
        RefreshList = True

    End Sub

    Private Sub chkModules_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkModules.CheckedChanged
        RefreshList = False
        Call UpdateTechChecks()
        Call UpdatePriceList()
        RefreshList = True
    End Sub

    Private Sub chkDrones_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDrones.CheckedChanged
        RefreshList = False
        Call UpdateTechChecks()
        Call UpdatePriceList()
        RefreshList = True
    End Sub

    Private Sub chkCharges_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCharges.CheckedChanged

        If chkCharges.Checked = True Then
            cmbPriceChargeTypes.Enabled = True
        ElseIf chkCharges.Checked = False Then
            cmbPriceChargeTypes.Enabled = False
        End If

        RefreshList = False
        Call UpdateTechChecks()
        Call UpdatePriceList()
        RefreshList = True

    End Sub

    Private Sub chkSubsystems_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSubsystems.CheckedChanged
        RefreshList = False
        Call UpdateTechChecks()
        Call UpdatePriceList()
        RefreshList = True
    End Sub

    Private Sub chkStructures_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkStructures.CheckedChanged
        RefreshList = False
        Call UpdateTechChecks()
        Call UpdatePriceList()
        RefreshList = True
    End Sub

    Private Sub chkUpdatPricesNoPrice_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkUpdatePricesNoPrice.CheckedChanged
        RefreshList = False
        Call UpdateTechChecks()
        Call UpdatePriceList()
        RefreshList = True
    End Sub

    Private Sub chkSystems1_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSystems1.CheckedChanged
        Call SyncPriceCheckBoxes(1)
    End Sub

    Private Sub chkSystems2_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSystems2.CheckedChanged
        Call SyncPriceCheckBoxes(2)
    End Sub

    Private Sub chkSystems3_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSystems3.CheckedChanged
        Call SyncPriceCheckBoxes(3)
    End Sub

    Private Sub chkSystems4_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSystems4.CheckedChanged
        Call SyncPriceCheckBoxes(4)
    End Sub

    Private Sub chkSystems5_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSystems5.CheckedChanged
        Call SyncPriceCheckBoxes(5)
    End Sub

    Private Sub cmbPriceSystems_DropDown(sender As Object, e As System.EventArgs) Handles cmbPriceSystems.DropDown
        If FirstSolarSystemComboLoad Then
            Call LoadPriceSolarSystems()
            FirstSolarSystemComboLoad = False
        End If
    End Sub

    Private Sub cmbPriceSystems_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbPriceSystems.SelectedIndexChanged
        If cmbPriceSystems.Text <> DefaultSystemPriceCombo Then
            Call ClearSystemChecks()
            Call ClearAllRegionChecks()
        End If
    End Sub

    Private Sub cmbPriceShipTypes_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbPriceShipTypes.SelectedIndexChanged
        If Not FirstPriceShipTypesComboLoad Then
            Call UpdatePriceList()
        End If
    End Sub

    Private Sub cmbPriceChargeTypes_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbPriceChargeTypes.SelectedIndexChanged
        If Not FirstPriceChargeTypesComboLoad Then
            Call UpdatePriceList()
        End If
    End Sub

    Private Sub SyncPriceCheckBoxes(ByVal TriggerIndex As Integer)
        Dim i As Integer

        If Not FirstLoad Then
            ' Trigger Index is a box that was checked on or off
            If SystemCheckBoxes(TriggerIndex).Checked = True Then
                ' Uncheck all other systems and regions
                For i = 1 To SystemCheckBoxes.Length - 1
                    If i <> TriggerIndex Then
                        SystemCheckBoxes(i).Checked = False
                    End If
                Next
                ' Uncheck regions
                Call ClearAllRegionChecks()
                ' Reset the solar system combo
                cmbPriceSystems.Text = DefaultSystemPriceCombo
            End If
        End If

    End Sub

#Region "Update Price Region Checks"
    Private Sub chkRegion45_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion45.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion67_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion67.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion2.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion3.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion4.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion5.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion6_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion6.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion7_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion7.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion8_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion8.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion9_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion9.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion10_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion10.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion11_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion11.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion22_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion22.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion21_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion21.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion20_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion20.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion19_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion19.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion18_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion18.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion17_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion17.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion16_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion16.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion15_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion15.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion14_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion14.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion13_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion13.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion12_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion12.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion44_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion44.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion43_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion43.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion42_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion42.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion41_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion41.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion40_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion40.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion39_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion39.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion38_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion38.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion37_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion37.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion36_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion36.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion35_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion35.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion34_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion34.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion33_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion33.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion32_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion32.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion31_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion31.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion30_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion30.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion29_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion29.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion28_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion28.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion27_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion27.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion26_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion26.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion25_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion25.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion24_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion24.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion23_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion23.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion66_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion66.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion65_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion65.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion64_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion64.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion63_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion63.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion62_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion62.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion61_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion61.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion60_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion60.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion59_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion59.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion58_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion58.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion57_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion57.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion56_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion56.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion55_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion55.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion54_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion54.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion53_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion53.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion52_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion52.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion51_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion51.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion50_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion50.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion49_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion49.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion48_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion48.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion47_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion47.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion46_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion46.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
    Private Sub chkRegion1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkRegion1.CheckedChanged
        If InStr(sender.ToString, "CheckState: 1") <> 0 Then
            Call ClearSystemChecks()
        End If
    End Sub
#End Region

#End Region

    ' Initalizes all the prices tab boxes, etc
    Private Sub InitUpdatePricesTab()
        Dim i As Integer
        Dim TempRegion As String = ""

        FirstSolarSystemComboLoad = True
        FirstPriceChargeTypesComboLoad = True
        FirstPriceShipTypesComboLoad = True
        RefreshList = False

        Call ClearSystemChecks()
        Call ClearAllRegionChecks()

        txtPriceItemFilter.Text = ""

        With UserUpdatePricesTabSettings
            chkPriceRawMaterialPrices.Checked = .AllRawMats
            RunUpdatePriceList = False ' If the settings trigger an update, we don't want to update the prices
            chkMinerals.Checked = .Minerals
            chkIceProducts.Checked = .IceProducts
            chkGas.Checked = .Gas
            chkBPCs.Checked = .BPCs
            chkMisc.Checked = .Misc
            chkAncientRelics.Checked = .AncientRelics
            chkAncientSalvage.Checked = .AncientSalvage
            chkSalvage.Checked = .Salvage
            chkStationComponents.Checked = .StationComponents
            chkPlanetary.Checked = .Planetary
            chkDatacores.Checked = .Datacores
            chkDecryptors.Checked = .Decryptors
            chkRawMats.Checked = .RawMats
            chkProcessedMats.Checked = .ProcessedMats
            chkAdvancedMats.Checked = .AdvancedMats
            chkMatsandCompounds.Checked = .MatsandCompounds
            chkDroneComponents.Checked = .DroneComponents
            chkBoosterMats.Checked = .BoosterMats
            chkPolymers.Checked = .Polymers
            chkAsteroids.Checked = .Asteroids
            chkPriceManufacturedPrices.Checked = .AllManufacturedItems
            RunUpdatePriceList = False ' If the settings trigger an update, we don't want to update the prices
            chkShips.Checked = .Ships
            chkModules.Checked = .Modules
            chkDrones.Checked = .Drones
            chkBoosters.Checked = .Boosters
            chkRigs.Checked = .Rigs
            chkCharges.Checked = .Charges
            chkSubsystems.Checked = .Subsystems
            chkStructures.Checked = .Structures
            chkTools.Checked = .Tools
            chkCapT2Components.Checked = .CapT2Components
            chkCapitalComponents.Checked = .CapitalComponents
            chkComponents.Checked = .Components
            chkHybrid.Checked = .Hybrid
            chkFuelBlocks.Checked = .FuelBlocks
            chkPricesT1.Checked = .T1
            chkPricesT2.Checked = .T2
            chkPricesT3.Checked = .T3
            chkPricesT4.Checked = .Storyline
            chkPricesT5.Checked = .Faction
            chkPricesT6.Checked = .Pirate
            chkImplants.Checked = .Implants
            chkCelestials.Checked = .Celestials
            chkDeployables.Checked = .Deployables
            cmbItemsSplitPrices.Text = .ItemsCombo
            cmbRawMatsSplitPrices.Text = .RawMatsCombo
        End With

        gbSplitPrices.Enabled = False
        gbPrice.Enabled = True
        RunUpdatePriceList = True

        Select Case UserUpdatePricesTabSettings.PriceImportType
            Case rbtnMinSell.Text
                rbtnMinSell.Checked = True
            Case rbtnMaxSell.Text
                rbtnMaxSell.Checked = True
            Case rbtnAvgSell.Text
                rbtnAvgSell.Checked = True
            Case rbtnMedSell.Text
                rbtnMedSell.Checked = True
            Case rbtnMinBuy.Text
                rbtnMinBuy.Checked = True
            Case rbtnMaxBuy.Text
                rbtnMaxBuy.Checked = True
            Case rbtnAvgBuy.Text
                rbtnAvgBuy.Checked = True
            Case rbtnMedBuy.Text
                rbtnMedBuy.Checked = True
            Case rbtnMinBuySell.Text
                rbtnMinBuySell.Checked = True
            Case rbtnMaxBuySell.Text
                rbtnMaxBuySell.Checked = True
            Case rbtnAvgBuySell.Text
                rbtnAvgBuySell.Checked = True
            Case rbtnMedBuySell.Text
                rbtnMedBuySell.Checked = True
            Case rbtnPercentileBuy.Text
                rbtnPercentileBuy.Checked = True
            Case rbtnPercentileBuySell.Text
                rbtnPercentileBuySell.Checked = True
            Case rbtnPercentileSell.Text
                rbtnPercentileSell.Checked = True
            Case chkSplitPrices.Text
                chkSplitPrices.Checked = True
                gbSplitPrices.Enabled = True
                gbPrice.Enabled = False
        End Select

        RefreshList = True

        ' Set system/region 
        If UserUpdatePricesTabSettings.SelectedSystem <> "0" Then
            ' Check the preset systems fist
            Select Case UserUpdatePricesTabSettings.SelectedSystem
                Case "Jita"
                    chkSystems1.Checked = True
                Case "Amarr"
                    chkSystems2.Checked = True
                Case "Dodixie"
                    chkSystems3.Checked = True
                Case "Rens"
                    chkSystems4.Checked = True
                Case "Hek"
                    chkSystems5.Checked = True
                Case Else
                    cmbPriceSystems.Text = UserUpdatePricesTabSettings.SelectedSystem
            End Select

        Else ' They set a region
            ' Loop through the checks and check the ones they set
            IgnoreSystemCheckUpdates = True
            For i = 1 To RegionCheckBoxes.Count - 1
                If UserUpdatePricesTabSettings.SelectedRegions.Contains(RegionCheckBoxes(i).Text) Then
                    RegionCheckBoxes(i).Checked = True
                End If
            Next
            IgnoreSystemCheckUpdates = False
        End If

        If Developer Then
            chkUpdatePricesCRESTHistory.Checked = UserUpdatePricesTabSettings.UpdatePriceHistory
        Else
            chkUpdatePricesCRESTHistory.Checked = False
        End If

        ' Refresh the prices
        Call UpdatePriceList()

    End Sub

    ' Save the settings
    Private Sub btnSaveUpdatePrices_Click(sender As System.Object, e As System.EventArgs) Handles btnSaveUpdatePrices.Click
        Dim i As Integer
        Dim TempSettings As UpdatePriceTabSettings = Nothing
        Dim TempRegions As New List(Of String)

        Dim RegionChecked As Boolean = False
        Dim SystemChecked As Boolean = False
        Dim SearchSystem As String = ""

        ' Make sure they have at least one region checked first
        For i = 1 To RegionCheckBoxes.Length - 1
            If RegionCheckBoxes(i).Checked = True Then
                RegionChecked = True
                Exit For
            End If
        Next i

        ' Check systems too
        For i = 1 To SystemCheckBoxes.Length - 1
            If SystemCheckBoxes(i).Checked = True Then
                ' Save the checked system (can only be one)
                SearchSystem = SystemCheckBoxes(i).Text
                SystemChecked = True
                Exit For
            End If
        Next

        ' Finally check system combo
        If Not SystemChecked And cmbPriceSystems.Text <> DefaultSystemPriceCombo Then
            SystemChecked = True
            SearchSystem = cmbPriceSystems.Text
        End If

        If Not RegionChecked And Not SystemChecked Then
            MsgBox("Must Choose a Region or System", MsgBoxStyle.Exclamation, Me.Name)
            Exit Sub
        End If

        If Not ItemsSelected() Then
            MsgBox("Must Choose at least one Item type", MsgBoxStyle.Exclamation, Me.Name)
            Exit Sub
        End If

        ' First set all the checks
        If chkSplitPrices.Checked Then
            TempSettings.PriceImportType = chkSplitPrices.Text
        ElseIf rbtnAvgBuy.Checked Then
            TempSettings.PriceImportType = rbtnAvgBuy.Text
        ElseIf rbtnAvgBuySell.Checked Then
            TempSettings.PriceImportType = rbtnAvgBuySell.Text
        ElseIf rbtnAvgSell.Checked Then
            TempSettings.PriceImportType = rbtnAvgSell.Text
        ElseIf rbtnMaxBuy.Checked Then
            TempSettings.PriceImportType = rbtnMaxBuy.Text
        ElseIf rbtnMaxBuySell.Checked Then
            TempSettings.PriceImportType = rbtnMaxBuySell.Text
        ElseIf rbtnMaxSell.Checked Then
            TempSettings.PriceImportType = rbtnMaxSell.Text
        ElseIf rbtnMinBuy.Checked Then
            TempSettings.PriceImportType = rbtnMinBuy.Text
        ElseIf rbtnMinBuySell.Checked Then
            TempSettings.PriceImportType = rbtnMinBuySell.Text
        ElseIf rbtnMinSell.Checked Then
            TempSettings.PriceImportType = rbtnMinSell.Text
        ElseIf rbtnPercentileBuy.Checked Then
            TempSettings.PriceImportType = rbtnPercentileBuy.Text
        ElseIf rbtnPercentileBuySell.Checked Then
            TempSettings.PriceImportType = rbtnPercentileBuySell.Text
        ElseIf rbtnPercentileSell.Checked Then
            TempSettings.PriceImportType = rbtnPercentileSell.Text
        End If

        TempSettings.ItemsCombo = cmbItemsSplitPrices.Text
        TempSettings.RawMatsCombo = cmbRawMatsSplitPrices.Text
        TempSettings.UpdatePriceHistory = chkUpdatePricesCRESTHistory.Checked

        ' Search for a set system first
        TempSettings.SelectedSystem = "0"
        If cmbPriceSystems.Text <> "Select System" Then
            TempSettings.SelectedSystem = cmbPriceSystems.Text
        Else
            For i = 1 To SystemCheckBoxes.Count - 1
                If SystemCheckBoxes(i).Checked Then
                    ' Save it
                    TempSettings.SelectedSystem = SystemCheckBoxes(i).Text
                    Exit For
                End If
            Next
        End If

        ' If no system found, then region
        If TempSettings.SelectedSystem = "0" Then
            ' Loop through the region checks and find checked regions
            For i = 1 To RegionCheckBoxes.Count - 1
                If RegionCheckBoxes(i).Checked = True Then
                    TempRegions.Add(RegionCheckBoxes(i).Text)
                End If
            Next
            TempSettings.SelectedRegions = TempRegions
        End If

        ' Raw items
        ' Manufactured Items
        With TempSettings
            .AllRawMats = chkPriceRawMaterialPrices.Checked
            .Minerals = chkMinerals.Checked
            .IceProducts = chkIceProducts.Checked
            .Gas = chkGas.Checked
            .BPCs = chkBPCs.Checked
            .Misc = chkMisc.Checked
            .AncientRelics = chkAncientRelics.Checked
            .AncientSalvage = chkAncientSalvage.Checked
            .Salvage = chkSalvage.Checked
            .StationComponents = chkStationComponents.Checked
            .Planetary = chkPlanetary.Checked
            .Datacores = chkDatacores.Checked
            .Decryptors = chkDecryptors.Checked
            .RawMats = chkRawMats.Checked
            .ProcessedMats = chkProcessedMats.Checked
            .AdvancedMats = chkAdvancedMats.Checked
            .MatsandCompounds = chkMatsandCompounds.Checked
            .DroneComponents = chkDroneComponents.Checked
            .BoosterMats = chkBoosterMats.Checked
            .Polymers = chkPolymers.Checked
            .Asteroids = chkAsteroids.Checked
            .AllManufacturedItems = chkPriceManufacturedPrices.Checked
            .Ships = chkShips.Checked
            .Modules = chkModules.Checked
            .Drones = chkDrones.Checked
            .Boosters = chkBoosters.Checked
            .Rigs = chkRigs.Checked
            .Charges = chkCharges.Checked
            .Subsystems = chkSubsystems.Checked
            .Structures = chkStructures.Checked
            .Tools = chkTools.Checked
            .CapT2Components = chkCapT2Components.Checked
            .CapitalComponents = chkCapitalComponents.Checked
            .Components = chkComponents.Checked
            .Hybrid = chkHybrid.Checked
            .FuelBlocks = chkFuelBlocks.Checked
            .T1 = chkPricesT1.Checked
            .T2 = chkPricesT2.Checked
            .T3 = chkPricesT3.Checked
            .Storyline = chkPricesT4.Checked
            .Faction = chkPricesT5.Checked
            .Pirate = chkPricesT6.Checked
            .Implants = chkImplants.Checked
            .Deployables = chkDeployables.Checked
            .Celestials = chkCelestials.Checked
        End With

        ' Save the data in the XML file
        Call AllSettings.SaveUpdatePricesSettings(TempSettings)

        ' Save the data to the local variable
        UserUpdatePricesTabSettings = TempSettings

        MsgBox("Update Prices Settings Saved", vbInformation, Application.ProductName)
        btnImportPrices.Focus()
        Application.UseWaitCursor = False

    End Sub

    Private Sub lstPricesView_MouseClick(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles lstPricesView.MouseClick
        Call ListClicked(lstPricesView, sender, e)
    End Sub

    Public Structure PriceItem
        Dim TypeID As Long
        Dim Manufacture As Boolean
    End Structure

    Private Structure ItemRegionPairs
        Dim ItemID As Long
        Dim RegionID As Long
    End Structure

    ' Checks the user entry and then sends the type ids and regions to the cache update
    Private Sub btnImportPrices_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnImportPrices.Click
        Dim i As Integer
        Dim j As Integer

        Dim RegionChecked As Boolean
        Dim SystemChecked As Boolean
        Dim readerRegions As SQLiteDataReader
        Dim readerSystems As SQLiteDataReader
        Dim readerLookup As SQLiteDataReader
        Dim SQL As String

        Dim RegionName As String = ""
        Dim Items As New List(Of PriceItem)
        Dim TempItem As PriceItem
        Dim SearchRegions As New List(Of String)
        Dim SearchSystem As String = ""
        Dim NumSystems As Integer = 0

        RegionChecked = False
        SystemChecked = False

        ' Progress Bar Init
        pnlProgressBar.Value = 0

        ' Make sure they have at least one region checked first
        For i = 1 To RegionCheckBoxes.Length - 1
            If RegionCheckBoxes(i).Checked = True Then
                RegionChecked = True
                Exit For
            End If
        Next i

        ' Check systems too
        For i = 1 To SystemCheckBoxes.Length - 1
            If SystemCheckBoxes(i).Checked = True Then
                ' Save the checked system (can only be one)
                SearchSystem = SystemCheckBoxes(i).Text
                SystemChecked = True
                Exit For
            End If
        Next

        ' Finally check system combo
        If Not SystemChecked And cmbPriceSystems.Text <> DefaultSystemPriceCombo Then
            SystemChecked = True
            SearchSystem = cmbPriceSystems.Text
        End If

        If Not RegionChecked And Not SystemChecked Then
            MsgBox("Must Choose a Region or System", MsgBoxStyle.Exclamation, Me.Name)
            GoTo ExitSub
        End If

        If Trim(cmbPriceSystems.Text) = "" Or (Not cmbPriceSystems.Items.Contains(cmbPriceSystems.Text) And cmbPriceSystems.Text <> "Select System") Then
            MsgBox("Invalid Solar System Name", vbCritical, Application.ProductName)
            GoTo ExitSub
        End If

        If Not ItemsSelected() Then
            MsgBox("Must Choose at least one Item type", MsgBoxStyle.Exclamation, Me.Name)
            GoTo ExitSub
        End If

        ' Working
        tabMain.Enabled = False ' Disable tab
        Me.Refresh()
        Me.Cursor = Cursors.WaitCursor
        pnlStatus.Text = "Initializing Query..."
        Application.DoEvents()

        ' Build the list of types we want to update
        For i = 0 To lstPricesView.Items.Count - 1
            ' Only include items that are in the market (Market ID not null in Inventory Types)
            If lstPricesView.Items(i).SubItems(5).Text <> "" Then
                TempItem.TypeID = CLng(lstPricesView.Items(i).Text)
                TempItem.Manufacture = CBool(lstPricesView.Items(i).SubItems(4).Text)
                ' Add the item to the list if not there and it's not a blueprint (we don't want to query blueprints since it will return bpo price and we are using this for bpc
                If Not Items.Contains(TempItem) And Not lstPricesView.Items(i).SubItems(1).Text.Contains("Blueprint") Then
                    Items.Add(TempItem)
                End If
            End If
        Next

        ' Build the region list as a string
        If RegionChecked Then
            For i = 1 To (RegionCheckBoxes.Length - 1)
                If RegionCheckBoxes(i).Checked Then
                    Select Case i
                        Case 15, 26, 36, 50, 59 'These have () in description

                            ' Find the location of the ( and trim back from that
                            RegionName = RegionCheckBoxes(i).Text
                            j = InStr(1, RegionName, "(")

                            RegionName = RegionName.Substring(0, j - 2)

                        Case Else
                            RegionName = RegionCheckBoxes(i).Text
                    End Select

                    SQL = "SELECT regionID FROM REGIONS WHERE regionName = '" & RegionName & "'"

                    DBCommand = New SQLiteCommand(SQL, DB)
                    readerRegions = DBCommand.ExecuteReader

                    readerRegions.Read()
                    SearchRegions.Add(CStr(readerRegions.GetInt64(0)))
                    readerRegions.Close()
                End If
            Next

            readerRegions = Nothing
            DBCommand = Nothing

        ElseIf SystemChecked Then
            ' Get the system list string
            SQL = "SELECT solarSystemID, regionName FROM SOLAR_SYSTEMS, REGIONS "
            SQL = SQL & "WHERE REGIONS.regionID = SOLAR_SYSTEMS.regionID AND solarSystemName = '" & SearchSystem & "'"

            DBCommand = New SQLiteCommand(SQL, DB)
            readerSystems = DBCommand.ExecuteReader
            If readerSystems.Read Then
                SearchSystem = CStr(readerSystems.GetValue(0))
            Else
                MsgBox("Invalid Solar System Name", vbCritical, Application.ProductName)
                GoTo ExitSub
            End If

            readerSystems.Close()
            readerSystems = Nothing
            DBCommand = Nothing
        End If

        ' Load the prices
        Call LoadPrices(Items, SearchRegions, SearchSystem)

        ' See if they want to load historical prices from CREST
        If chkUpdatePricesCRESTHistory.Checked Then
            ' See what they want and process accordingly
            If SystemChecked Then
                ' Need to look up region ID since we can only price history for regions
                ' Get the system list string
                SQL = "SELECT regionID FROM SOLAR_SYSTEMS WHERE solarsystemID = " & CStr(SearchSystem)

                DBCommand = New SQLiteCommand(SQL, DB)
                readerSystems = DBCommand.ExecuteReader
                If readerSystems.Read Then
                    SearchRegions.Add(CStr(readerSystems.GetValue(0)))
                Else
                    MsgBox("Invalid Solar System Name", vbCritical, Application.ProductName)
                    GoTo ExitSub
                End If

                readerSystems.Close()
                readerSystems = Nothing
                DBCommand = Nothing

            Else ' Regions
                Dim Response As MsgBoxResult
                If SearchRegions.Count > 1 Then
                    ' Make sure they know this will take a bit to run - unless this is fairly quick
                    Response = MsgBox("Updating price history for multiple regions will take a long time to complete. Do you want to continue?", vbYesNo, Me.Text)

                    If Response = vbNo Then
                        ' Just display the results of the query
                        GoTo UpdateProgramPrices
                    End If
                End If
            End If

            ' Reset the value of the progress bar
            pnlProgressBar.Value = 0
            pnlProgressBar.Maximum = (SearchRegions.Count * Items.Count) - 1
            pnlProgressBar.Visible = True

            pnlStatus.Text = "Updating Market Price History..."
            Application.DoEvents()

            ' Set the DB up for speed
            ' Call ExecuteNonQuerySQL("PRAGMA synchronous = OFF; PRAGMA locking_mode = EXCLUSIVE; PRAGMA temp_store = MEMORY;")

            ' Start a transaction here to speed up processing in the updates
            Call BeginSQLiteTransaction()

            ' Build the list of regions and items for market history
            Dim Pairs As New List(Of ItemRegionPairs)
            Dim CacheDate As Date

            For i = 0 To SearchRegions.Count - 1
                For j = 0 To Items.Count - 1
                    Dim TempPair As ItemRegionPairs
                    TempPair.ItemID = Items(j).TypeID
                    TempPair.RegionID = CLng(SearchRegions(i))

                    ' Look up the cache date of each and only add it to the list to look up if it's cache is up
                    SQL = "SELECT CACHE_DATE FROM MARKET_HISTORY_UPDATE_CACHE WHERE TYPE_ID = " & CStr(TempPair.ItemID) & " AND REGION_ID = " & CStr(TempPair.RegionID)
                    DBCommand = New SQLiteCommand(SQL, DB)
                    readerLookup = DBCommand.ExecuteReader

                    CacheDate = ProcessCacheDate(readerLookup)

                    readerLookup.Close()
                    readerLookup = Nothing
                    DBCommand = Nothing

                    ' Only add if it's time to update
                    If CacheDate <= Now Then
                        Pairs.Add(TempPair)
                    End If
                Next
            Next

            Dim BatchStart As DateTime = Now
            Dim BatchEnd As DateTime
            Dim BatchCounter As Integer = 0
            Dim PricesUpdated As Boolean
            Const MaxBatches As Integer = 30

            Dim CRESTHistory As New EVECREST

            Dim MaxRequestsperSecond As Integer = CRESTHistory.GetRatePerSecond

            For i = 0 To Pairs.Count - 1

                ' Add limiting if needed here - only wait if we go over the per request limit and only for the time left
                PricesUpdated = CRESTHistory.UpdateMarketHistory(Pairs(i).ItemID, Pairs(i).RegionID, False)

                ' Only do limiting if we actually update something 
                If PricesUpdated Then
                    BatchCounter += 1

                    If BatchCounter = MaxBatches Then
                        ' Need to see if we are over the time limit and sleep
                        BatchEnd = Now

                        ' Figure out the difference between the max time for 30 requests and our 30 requests
                        Dim Difference As Integer = CInt((1000 / MaxRequestsperSecond * MaxBatches) - ((BatchEnd.Ticks - BatchStart.Ticks) / 10000))
                        If Difference > 0 Then
                            Threading.Thread.Sleep(Difference)
                        End If
                        ' Reset
                        BatchCounter = 0
                        BatchStart = Now
                    End If

                    If CRESTHistory.RecordsInserted >= 50000 Then
                        Call CommitSQLiteTransaction()
                        Call BeginSQLiteTransaction()
                        CRESTHistory.RecordsInserted = 0
                    End If
                End If

                ' For each record, update the progress bar
                Call IncrementToolStripProgressBar(pnlProgressBar)
                Application.DoEvents()
            Next

            ' Finish updating the DB
            Call CommitSQLiteTransaction()

            ' Reset DB variables
            'Call ExecuteNonQuerySQL("PRAGMA synchronous = NORMAL; PRAGMA locking_mode = NORMAL; PRAGMA temp_store = DEFAULT")

            ' Done updating, hide the progress bar
            pnlProgressBar.Visible = False
            pnlStatus.Text = ""
            Application.DoEvents()

        End If

UpdateProgramPrices:

        ' Update all the prices in the program
        Call UpdateProgramPrices()

ExitSub:

        Application.DoEvents()
        tabMain.Enabled = True ' Disable tab
        Me.Refresh()
        Me.Cursor = Cursors.Default
        pnlProgressBar.Visible = False
        pnlStatus.Text = ""

    End Sub

    ' Loads prices from the cache into the ITEM_PRICES table based on the info selected on the main form
    Private Sub LoadPrices(ByVal SentItems As List(Of PriceItem), ByVal SearchRegions As List(Of String), ByVal SearchSystem As String)
        Dim readerPrices As SQLiteDataReader
        Dim SQL As String = ""
        Dim i As Integer
        Dim RegionList As String
        Dim SelectedPrice As Double

        Dim PriceType As String = "" ' Default

        ' First update the cache
        If Not UpdatePricesCache(SentItems, SearchRegions, SearchSystem) Then
            ' Update Failed, don't reload everything
            Exit Sub
        End If

        ' Working
        pnlStatus.Text = "Updating Item Prices..."
        RegionList = ""
        pnlProgressBar.Value = 0
        pnlProgressBar.Minimum = 0
        pnlProgressBar.Maximum = SentItems.Count + 1
        pnlProgressBar.Visible = True

        Application.DoEvents()

        ' First build the region list, this will be the same for all items in the list
        If SearchSystem = "" Then
            For i = 0 To SearchRegions.Count - 1
                RegionList = RegionList & SearchRegions(i)

                If i < SearchRegions.Count - 1 Then
                    RegionList = RegionList & ","
                End If
            Next
        Else
            RegionList = SearchSystem
        End If

        Call BeginSQLiteTransaction()

        ' Select the prices from the cache table
        For i = 0 To SentItems.Count - 1
            If chkSplitPrices.Checked = True Then
                ' Use combo values for min or max. If manufacture, then it's an item
                If SentItems(i).Manufacture Then
                    Select Case cmbItemsSplitPrices.Text
                        Case "Min Sell"
                            PriceType = "sellMin"
                        Case "Max Sell"
                            PriceType = "sellMax"
                        Case "Avg Sell"
                            PriceType = "sellAvg"
                        Case "Median Sell"
                            PriceType = "sellMedian"
                        Case "Percentile Sell"
                            PriceType = "sellPercentile"
                        Case "Min Buy"
                            PriceType = "buyMin"
                        Case "Max Buy"
                            PriceType = "buyMax"
                        Case "Avg Buy"
                            PriceType = "buyAvg"
                        Case "Median Buy"
                            PriceType = "buyMedian"
                        Case "Percentile Buy"
                            PriceType = "buyPercentile"
                        Case "Min Buy & Sell"
                            PriceType = "allMin"
                        Case "Max Buy & Sell"
                            PriceType = "allMax"
                        Case "Avg Buy & Sell"
                            PriceType = "allAvg"
                        Case "Median Buy & Sell"
                            PriceType = "allMedian"
                        Case "Percentile Buy & Sell"
                            PriceType = "allPercentile"
                    End Select
                Else ' Raw
                    Select Case cmbRawMatsSplitPrices.Text
                        Case "Min Sell"
                            PriceType = "sellMin"
                        Case "Max Sell"
                            PriceType = "sellMax"
                        Case "Avg Sell"
                            PriceType = "sellAvg"
                        Case "Median Sell"
                            PriceType = "sellMedian"
                        Case "Percentile Sell"
                            PriceType = "sellPercentile"
                        Case "Min Buy"
                            PriceType = "buyMin"
                        Case "Max Buy"
                            PriceType = "buyMax"
                        Case "Avg Buy"
                            PriceType = "buyAvg"
                        Case "Median Buy"
                            PriceType = "buyMedian"
                        Case "Percentile Buy"
                            PriceType = "buyPercentile"
                        Case "Min Buy & Sell"
                            PriceType = "allMin"
                        Case "Max Buy & Sell"
                            PriceType = "allMax"
                        Case "Avg Buy & Sell"
                            PriceType = "allAvg"
                        Case "Median Buy & Sell"
                            PriceType = "allMedian"
                        Case "Percentile Buy & Sell"
                            PriceType = "allPercentile"
                    End Select
                End If
            Else
                If rbtnMedBuySell.Checked Then ' Both or"ALL"
                    PriceType = "allMedian"
                ElseIf rbtnAvgBuySell.Checked Then
                    PriceType = "allAvg"
                ElseIf rbtnMaxBuySell.Checked Then
                    PriceType = "allMax"
                ElseIf rbtnMinBuySell.Checked Then
                    PriceType = "allMin"
                ElseIf rbtnPercentileBuySell.Checked Then
                    PriceType = "allPercentile"
                ElseIf rbtnMedBuy.Checked Then ' Buy
                    PriceType = "buyMedian"
                ElseIf rbtnAvgBuy.Checked Then
                    PriceType = "buyAvg"
                ElseIf rbtnMaxBuy.Checked Then
                    PriceType = "buyMax"
                ElseIf rbtnMinBuy.Checked Then
                    PriceType = "buyMin"
                ElseIf rbtnPercentileBuy.Checked Then
                    PriceType = "buyPercentile"
                ElseIf rbtnMedSell.Checked Then ' Sell
                    PriceType = "sellMedian"
                ElseIf rbtnAvgSell.Checked Then
                    PriceType = "sellAvg"
                ElseIf rbtnMaxSell.Checked Then
                    PriceType = "sellMax"
                ElseIf rbtnMinSell.Checked Then
                    PriceType = "sellMin"
                ElseIf rbtnPercentileSell.Checked Then
                    PriceType = "sellPercentile"
                End If
            End If

            ' Load the data based on the option selected
            SQL = "SELECT " & PriceType & " FROM ITEM_PRICES_CACHE WHERE TYPEID = " & CStr(SentItems(i).TypeID) & " AND REGIONLIST = '" & RegionList & "' ORDER BY DateTime(UPDATEDATE) DESC"

            DBCommand = New SQLiteCommand(SQL, DB)
            readerPrices = DBCommand.ExecuteReader

            ' Grab the first record, which will be the latest one, if no record just leave what is already in item prices
            If readerPrices.Read Then
                SelectedPrice = readerPrices.GetDouble(0)
                ' Now Update the ITEM_PRICES table, set price and price type
                SQL = "UPDATE ITEM_PRICES SET PRICE = " & CStr(SelectedPrice) & ", PRICE_TYPE = '" & PriceType & "' WHERE ITEM_ID = " & CStr(SentItems(i).TypeID)
                Call ExecuteNonQuerySQL(SQL)

                readerPrices.Close()
                readerPrices = Nothing
                DBCommand = Nothing
            End If

            ' For each record, update the progress bar
            Call IncrementToolStripProgressBar(pnlProgressBar)

            Application.DoEvents()
        Next

        Call CommitSQLiteTransaction()

        ' Done updating, hide the progress bar
        pnlProgressBar.Visible = False
        pnlStatus.Text = ""
        Application.DoEvents()

    End Sub

    ' Adds prices for each type id and region to the cache by using the (my) EVE Central API Wrapper Class. 
    Private Function UpdatePricesCache(ByVal CacheItems As List(Of PriceItem), ByVal SearchRegions As List(Of String), ByVal SearchSystem As String) As Boolean
        ' Rewrite Variables
        Dim TypeIDUpdatePriceList As New List(Of Long)

        Dim i As Integer
        Dim SQL As String = ""
        Dim PriceRecords As List(Of EVECentralPrice)
        Dim EVECentralPrices = New EVECentralAPI
        Dim EVECentralError As MyError

        Dim RegionSystemSearchList As String = "" ' Used for querying the Price Cache for regions
        Dim TotalUpdateItems As Integer = 0 ' For progress bar, only count the ones we update
        Dim InsertRecord As Boolean = False
        Dim QueryEVECentral As Boolean = False
        Dim readerPriceCheck As SQLiteDataReader

        ' First build the region list for storing in database and sending to EVE Central API
        If SearchSystem = "" Then
            For i = 0 To SearchRegions.Count - 1
                RegionSystemSearchList = RegionSystemSearchList & SearchRegions(i)

                If i < SearchRegions.Count - 1 Then
                    RegionSystemSearchList = RegionSystemSearchList & ","
                End If
            Next
        Else
            RegionSystemSearchList = SearchSystem
        End If

        ' Reset the value of the progress bar
        pnlProgressBar.Value = 0
        If CacheItems.Count <> 0 Then
            pnlProgressBar.Maximum = CacheItems.Count - 1
        Else
            pnlProgressBar.Maximum = 0
        End If

        pnlProgressBar.Visible = True

        pnlStatus.Text = "Checking Items..."
        Application.DoEvents()

        ' Loop through the list of items to get full query of just those that need to be updated
        For i = 0 To CacheItems.Count - 1

            ' Reset Insert
            InsertRecord = False

            ' See if the record is in the cache first
            SQL = "SELECT * FROM ITEM_PRICES_CACHE WHERE TYPEID = " & CStr(CacheItems(i).TypeID) & " AND REGIONLIST = '" & RegionSystemSearchList & "'"

            DBCommand = New SQLiteCommand(SQL, DB)
            readerPriceCheck = DBCommand.ExecuteReader

            If Not readerPriceCheck.HasRows Then
                ' Not found
                InsertRecord = True
                readerPriceCheck.Close()
                readerPriceCheck = Nothing
                DBCommand = Nothing
            Else
                readerPriceCheck.Close()
                readerPriceCheck = Nothing
                DBCommand = Nothing

                ' There is a record, see if it needs to be updated (only update every 6 hours)
                SQL = "SELECT UPDATEDATE FROM ITEM_PRICES_CACHE WHERE TYPEID = " & CStr(CacheItems(i).TypeID) & " AND REGIONLIST = '" & RegionSystemSearchList & "'"
                DBCommand = New SQLiteCommand(SQL, DB)
                readerPriceCheck = DBCommand.ExecuteReader

                ' If no record or the max date
                If readerPriceCheck.Read Then
                    ' If older than the interval, add a new record
                    If DateTime.ParseExact(readerPriceCheck.GetString(0), SQLiteDateFormat, LocalCulture) < DateAdd(DateInterval.Hour, -1 * UserApplicationSettings.EVECentralRefreshInterval, Now) Then
                        InsertRecord = True
                    End If
                End If

                readerPriceCheck.Close()
                readerPriceCheck = Nothing
                DBCommand = Nothing

            End If

            ' Add to query item list for EVE Central
            If InsertRecord Then
                ' Add to the list
                TypeIDUpdatePriceList.Add(CacheItems(i).TypeID)

                ' Count up the update items
                TotalUpdateItems = TotalUpdateItems + 1
                ' We are inserting at least one record, so query eve central
                QueryEVECentral = True

            End If

            ' For each record, update the progress bar
            Call IncrementToolStripProgressBar(pnlProgressBar)

            Application.DoEvents()
        Next

        ' Don't show until download is done
        pnlProgressBar.Visible = False
        ' Reset the value of the progress bar
        pnlProgressBar.Value = 0
        ' Set the maximum updates for the progress bar
        pnlProgressBar.Maximum = TotalUpdateItems + 1

        If QueryEVECentral Then
            pnlStatus.Text = "Downloading Item Prices..."
            Application.DoEvents()

            ' Get the list of records to insert
            PriceRecords = EVECentralPrices.GetPrices(SearchRegions, SearchSystem, TypeIDUpdatePriceList)

            If IsNothing(PriceRecords) Then
                ' There was an error in the request 
                EVECentralError = EVECentralPrices.GetErrorData
                MsgBox("EVE Central Server is Unavailable" & Chr(13) & EVECentralError.Description & Chr(13) & "Please try again later", vbExclamation, Me.Text)
                UpdatePricesCache = False
                Exit Function
            End If

            ' Show the progress bar now and update status
            pnlProgressBar.Visible = True
            pnlStatus.Text = "Updating Price Cache..."
            Application.DoEvents()

            Call BeginSQLiteTransaction()

            ' Loop through the price records and insert each one
            For i = 0 To PriceRecords.Count - 1

                ' Insert record in Cache
                With PriceRecords(i)
                    ' The max price from both buy and sell should not be 0, so only add if not
                    If .AllMaxPrice <> 0 Then
                        ' First, delete the record
                        SQL = "DELETE FROM ITEM_PRICES_CACHE WHERE TYPEID = " & CStr(.TypeID) & " AND REGIONLIST = '" & .RegionList & "'"
                        Call ExecuteNonQuerySQL(SQL)

                        ' Set the region list of the price data first
                        SQL = "INSERT INTO ITEM_PRICES_CACHE (typeID, allVolume, allAvg, allMax, allMin, allStdDev, allMedian, allPercentile, "
                        SQL = SQL & "buyVolume, buyAvg, buyMax, buyMin, buyStdDev, buyMedian, buyPercentile, "
                        SQL = SQL & "sellVolume, sellAvg, sellMax, sellMin, sellStdDev, sellMedian, sellPercentile, RegionList, UpdateDate) VALUES "
                        SQL = SQL & "(" & CStr(.TypeID) & "," & CStr(.AllVolume) & "," & CStr(.AllAvgPrice) & "," & CStr(.AllMaxPrice) & "," & CStr(.AllMinPrice) & "," & CStr(.AllStdDev) & "," & CStr(.AllMedian) & "," & CStr(.AllPercentile) & ","
                        SQL = SQL & CStr(.BuyVolume) & "," & CStr(.BuyAvgPrice) & "," & CStr(.BuyMaxPrice) & "," & CStr(.BuyMinPrice) & "," & CStr(.BuyStdDev) & "," & CStr(.BuyMedian) & "," & CStr(.BuyPercentile) & ","
                        SQL = SQL & CStr(.SellVolume) & "," & CStr(.SellAvgPrice) & "," & CStr(.SellMaxPrice) & "," & CStr(.SellMinPrice) & "," & CStr(.SellStdDev) & "," & CStr(.SellMedian) & "," & CStr(.SellPercentile) & ","
                        SQL = SQL & "'" & .RegionList & "','" & Format(Now, SQLiteDateFormat) & "')"
                    Else
                        ' We probably didn't get any good prices back, so only update the date and wait for the next update
                        SQL = "UPDATE ITEM_PRICES_CACHE SET UpdateDate = '" & Format(Now, SQLiteDateFormat) & "' WHERE TYPEID = " & CStr(.TypeID) & " AND REGIONLIST = '" & .RegionList & "'"
                    End If
                End With

                Call ExecuteNonQuerySQL(SQL)

                ' For each record, update the progress bar
                Call IncrementToolStripProgressBar(pnlProgressBar)

                Application.DoEvents()
            Next

            Call CommitSQLiteTransaction()

        End If

        ' Done updating, hide the progress bar
        pnlProgressBar.Visible = False
        UpdatePricesCache = True
        pnlStatus.Text = ""
        Application.DoEvents()

    End Function

    ' Function just queries the items table based on the item type selection then updates the list
    Public Sub UpdatePriceList()
        Dim readerMats As SQLiteDataReader
        Dim SQL As String
        Dim TechSQL As String = ""
        Dim TechChecked As Boolean = False
        Dim lstViewRow As ListViewItem
        Dim ItemChecked As Boolean = False

        ' See if we want to run the update
        ' This will happen in times of things like selecting all boxes
        If Not RunUpdatePriceList Then
            Exit Sub
        End If

        ' Working
        Me.Cursor = Cursors.WaitCursor
        pnlStatus.Text = "Refreshing List..."
        Application.DoEvents()

        ' Add the marketGroupID to the list for checks later
        SQL = "SELECT ITEM_ID, ITEM_NAME, ITEM_GROUP, PRICE, MANUFACTURE, marketGroupID FROM ITEM_PRICES, INVENTORY_TYPES"
        SQL = SQL & " WHERE ITEM_PRICES.ITEM_ID = INVENTORY_TYPES.typeID AND ("

        ' Raw materials - non-manufacturable
        If chkMinerals.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Mineral' OR "
            ItemChecked = True
        End If
        If chkIceProducts.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Ice Product' OR "
            ItemChecked = True
        End If
        If chkPlanetary.Checked Then
            SQL = SQL & "(ITEM_CATEGORY LIKE 'Planetary%' OR ITEM_NAME IN ('Oxygen','Water')) OR "
            ItemChecked = True
        End If
        If chkDatacores.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Datacores' OR "
            ItemChecked = True
        End If
        If chkDecryptors.Checked Then
            SQL = SQL & "ITEM_GROUP LIKE '%Decryptor%' OR " ' Storyline decryptors are category 'Commodity'
            ItemChecked = True
        End If
        If chkGas.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Harvestable Cloud' OR "
            ItemChecked = True
        End If
        If chkBPCs.Checked Then
            SQL = SQL & "ITEM_CATEGORY = 'Blueprint' OR "
            ItemChecked = True
        End If
        If chkMisc.Checked Then ' Commodities = Shattered Villard Wheel
            SQL = SQL & "(ITEM_GROUP IN ('General','Livestock','Radioactive','Biohazard','Commodities', 'Miscellaneous', 'Unknown Components') AND ITEM_NAME NOT IN ('Oxygen','Water', 'Elite Drone AI')) OR "
            ItemChecked = True
        End If
        If chkSalvage.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Salvaged Materials' OR "
            ItemChecked = True
        End If
        If chkAncientSalvage.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Ancient Salvage' OR "
            ItemChecked = True
        End If
        If chkAncientRelics.Checked Then
            SQL = SQL & "ITEM_CATEGORY = 'Ancient Relics' OR "
            ItemChecked = True
        End If
        If chkPolymers.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Hybrid Polymers' OR "
            ItemChecked = True
        End If
        If chkRawMats.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Moon Materials' OR "
            ItemChecked = True
        End If
        If chkProcessedMats.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Intermediate Materials' OR "
            ItemChecked = True
        End If
        If chkAdvancedMats.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Composite' OR "
            ItemChecked = True
        End If
        If chkMatsandCompounds.Checked Then
            SQL = SQL & "ITEM_GROUP IN ('Materials and Compounds', 'Artifacts and Prototypes') OR "
            ItemChecked = True
        End If
        If chkDroneComponents.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Rogue Drone Components' OR ITEM_NAME = 'Elite Drone AI' OR "
            ItemChecked = True
        End If
        If chkBoosterMats.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Biochemical Material' OR "
            ItemChecked = True
        End If
        If chkAsteroids.Checked Then
            SQL = SQL & "ITEM_CATEGORY = 'Asteroid' OR "
            ItemChecked = True
        End If

        ' Other Manufacturables
        If chkCapT2Components.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Advanced Capital Construction Components' OR "
            ItemChecked = True
        End If
        If chkCapitalComponents.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Capital Construction Components' OR "
            ItemChecked = True
        End If
        If chkComponents.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Construction Components' OR "
            ItemChecked = True
        End If
        If chkHybrid.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Hybrid Tech Components' OR "
            ItemChecked = True
        End If
        If chkTools.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Tool' OR "
            ItemChecked = True
        End If
        If chkFuelBlocks.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Fuel Block' OR "
            ItemChecked = True
        End If
        If chkStationComponents.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Station Components' OR "
            ItemChecked = True
        End If
        If chkImplants.Checked Then
            SQL = SQL & "ITEM_GROUP = 'Cyberimplant' OR "
            ItemChecked = True
        End If
        If chkDeployables.Checked Then
            SQL = SQL & "ITEM_CATEGORY = 'Deployable' OR "
            ItemChecked = True
        End If
        If chkCelestials.Checked Then
            SQL = SQL & "(ITEM_CATEGORY IN ('Celestial','Orbitals','Sovereignty Structures', 'Station','Accessories', 'Infrastructure Upgrades') AND ITEM_GROUP <> 'Harvestable Cloud') OR "
            ItemChecked = True
        End If

        ' Manufactured Items
        If chkShips.Checked Or chkModules.Checked Or chkDrones.Checked Or chkBoosters.Checked Or chkRigs.Checked Or chkSubsystems.Checked Or chkStructures.Checked Or chkCharges.Checked Then

            ' Make sure we have at least one tech checked that is enabled
            TechChecked = CheckTechChecks()

            If Not TechChecked And Not ItemChecked Then
                ' There isn't an item checked before this and these items all require tech, so exit
                ItemChecked = False
            Else
                ItemChecked = True
            End If

            ' If they choose a tech level, then build this part of the SQL query
            If TechChecked Then
                If PriceCheckT1Enabled Then
                    If chkPricesT1.Checked Then
                        ' Add to SQL query for tech level
                        TechSQL = TechSQL & "ITEM_TYPE = 1 OR "
                    End If
                End If

                If PriceCheckT2Enabled Then
                    If chkPricesT2.Checked Then
                        ' Add to SQL query for tech level
                        TechSQL = TechSQL & "ITEM_TYPE = 2 OR "
                    End If
                End If

                If PriceCheckT3Enabled Then
                    If chkPricesT3.Checked Then
                        ' Add to SQL query for tech level
                        TechSQL = TechSQL & "ITEM_TYPE = 14 OR "
                    End If
                End If

                ' Add the Pirate, Storyline, Navy search string
                ' Storyline
                If PriceCheckT4Enabled Then
                    If chkPricesT4.Checked Then
                        ' Add to SQL query for tech level
                        TechSQL = TechSQL & "ITEM_TYPE = 3 OR "
                    End If
                End If

                ' Navy
                If PriceCheckT5Enabled Then
                    If chkPricesT5.Checked Then
                        ' Add to SQL query for tech level
                        TechSQL = TechSQL & "ITEM_TYPE = 16 OR "
                    End If
                End If

                ' Pirate
                If PriceCheckT6Enabled Then
                    If chkPricesT6.Checked Then
                        ' Add to SQL query for tech level
                        TechSQL = TechSQL & "ITEM_TYPE = 15 OR "
                    End If
                End If

                ' Format TechSQL - Add on Meta codes - 21,22,23,24 are T3
                If TechSQL <> "" Then
                    TechSQL = "(" & TechSQL.Substring(0, TechSQL.Length - 3) & " OR ITEM_TYPE IN (21,22,23,24)) "
                End If

                ' Build Tech 1,2,3 Manufactured Items
                If chkCharges.Checked Then
                    SQL = SQL & "(ITEM_CATEGORY = 'Charge' AND " & TechSQL
                    If cmbPriceChargeTypes.Text <> "All Charge Types" Then
                        SQL = SQL & " AND ITEM_GROUP = '" & cmbPriceChargeTypes.Text & "'"
                    End If
                    SQL = SQL & ") OR "
                End If
                If chkDrones.Checked Then
                    SQL = SQL & "(ITEM_CATEGORY = 'Drone' AND " & TechSQL & ") OR "
                End If
                If chkModules.Checked Then ' Not rigs but Modules
                    SQL = SQL & "(ITEM_CATEGORY = 'Module' AND ITEM_GROUP NOT LIKE 'Rig%' AND " & TechSQL & ") OR "
                End If
                If chkShips.Checked Then
                    SQL = SQL & "(ITEM_CATEGORY = 'Ship' AND " & TechSQL
                    If cmbPriceShipTypes.Text <> "All Ship Types" Then
                        SQL = SQL & " AND ITEM_GROUP = '" & cmbPriceShipTypes.Text & "'"
                    End If
                    SQL = SQL & ") OR "
                End If
                If chkSubsystems.Checked Then
                    SQL = SQL & "(ITEM_CATEGORY = 'Subsystem' AND " & TechSQL & ") OR "
                End If
                If chkBoosters.Checked Then
                    SQL = SQL & "(ITEM_GROUP = 'Booster' AND " & TechSQL & ") OR "
                End If
                If chkRigs.Checked Then ' Rigs
                    SQL = SQL & "(ITEM_CATEGORY = 'Module' AND ITEM_GROUP LIKE 'Rig%' AND " & TechSQL & ") OR "
                End If
                If chkStructures.Checked Then
                    SQL = SQL & "(ITEM_CATEGORY = 'Starbase' AND " & TechSQL & ") OR "
                End If
            Else
                ' No tech level chosen, so just continue with other options and skip these that require a tech selection
            End If
        End If

        ' Leave function if no items checked
        If Not ItemChecked Then
            lstPricesView.Items.Clear()
        Else
            ' Take off last OR and add the final )
            SQL = SQL.Substring(0, SQL.Length - 4)
            SQL = SQL & ")"

            ' Search based on text
            If txtPriceItemFilter.Text <> "" Then
                SQL = SQL & " AND ITEM_NAME LIKE '%" & FormatDBString(Trim(txtPriceItemFilter.Text)) & "%' "
            End If

            ' See if we want prices that are 0 only
            If chkUpdatePricesNoPrice.Checked Then
                SQL = SQL & " AND PRICE = 0 "
            End If

            SQL = SQL & " ORDER BY ITEM_GROUP, ITEM_CATEGORY, ITEM_NAME"

            DBCommand = New SQLiteCommand(SQL, DB)
            readerMats = DBCommand.ExecuteReader

            ' Clear List
            lstPricesView.Items.Clear()
            'lstViewPrices.Hide()
            lstPricesView.BeginUpdate()
            Me.Cursor = Cursors.WaitCursor

            ' Fill list
            While readerMats.Read
                'ITEM_ID, ITEM_NAME, ITEM_GROUP, PRICE, MANUFACTURE
                lstViewRow = lstPricesView.Items.Add(CStr(readerMats.GetValue(0)))
                'The remaining columns are subitems  
                lstViewRow.SubItems.Add(CStr(readerMats.GetString(2)))
                lstViewRow.SubItems.Add(CStr(readerMats.GetString(1)))
                lstViewRow.SubItems.Add(FormatNumber(readerMats.GetDouble(3), 2))
                lstViewRow.SubItems.Add(CStr(readerMats.GetValue(4)))
                If IsDBNull(readerMats.GetValue(5)) Then
                    lstViewRow.SubItems.Add("")
                Else
                    lstViewRow.SubItems.Add(CStr(readerMats.GetInt64(5)))
                End If
            End While

            readerMats.Close()
            readerMats = Nothing
            DBCommand = Nothing

            lstPricesView.Show()
            Me.Cursor = Cursors.Default
            lstPricesView.EndUpdate()
        End If

        ' Reset
        txtListEdit.Visible = False
        Me.Cursor = Cursors.Default
        Application.DoEvents()
        pnlStatus.Text = ""

    End Sub

    ' Makes sure a tech is enabled and checked for items that require tech based on saved values, not current due to disabling form
    Private Function CheckTechChecks() As Boolean

        If PriceCheckT1Enabled Then
            If TechCheckBoxes(1).Checked Then
                Return True
            End If
        End If

        If PriceCheckT2Enabled Then
            If TechCheckBoxes(2).Checked Then
                Return True
            End If
        End If

        If PriceCheckT3Enabled Then
            If TechCheckBoxes(3).Checked Then
                Return True
            End If
        End If

        If PriceCheckT4Enabled Then
            If TechCheckBoxes(4).Checked Then
                Return True
            End If
        End If

        If PriceCheckT5Enabled Then
            If TechCheckBoxes(5).Checked Then
                Return True
            End If
        End If

        If PriceCheckT6Enabled Then
            If TechCheckBoxes(6).Checked Then
                Return True
            End If
        End If

        Return False

    End Function

    ' Loads the solar systems into the combo for system prices
    Private Sub LoadPriceSolarSystems()
        Dim SQL As String
        Dim readerSS As SQLiteDataReader

        ' Load the select systems combobox with systems - no WH systems
        SQL = "SELECT solarSystemName FROM SOLAR_SYSTEMS, REGIONS AS R WHERE SOLAR_SYSTEMS.regionID = R.regionID "
        SQL = SQL & "AND R.regionName NOT LIKE 'A-R%' AND R.regionName NOT LIKE 'B-R%' AND R.regionName NOT LIKE 'C-R%' "
        SQL = SQL & "AND R.regionName NOT LIKE 'D-R%' AND R.regionName NOT LIKE 'E-R%' AND R.regionName NOT LIKE 'F-R%' "
        SQL = SQL & "AND solarSystemName <> '0.0' "
        SQL = SQL & "ORDER BY solarSystemName"

        DBCommand = New SQLiteCommand(SQL, DB)
        readerSS = DBCommand.ExecuteReader

        While readerSS.Read
            cmbPriceSystems.Items.Add(readerSS.GetString(0))
        End While

        readerSS.Close()
        readerSS = Nothing
        DBCommand = Nothing

        cmbPriceSystems.Text = "Select System"

    End Sub

    Private Sub LoadPriceShipTypes()
        Dim SQL As String
        Dim readerShipType As SQLiteDataReader

        ' Load the select systems combobox with systems
        SQL = "SELECT groupName from inventory_types, inventory_groups, inventory_categories "
        SQL = SQL & "WHERE  inventory_types.groupID = inventory_groups.groupID "
        SQL = SQL & "AND inventory_groups.categoryID = inventory_categories.categoryID "
        SQL = SQL & "AND categoryname = 'Ship' AND groupName NOT IN ('Rookie ship','Prototype Exploration Ship') "
        SQL = SQL & "AND inventory_types.published <> 0 and inventory_groups.published <> 0 and inventory_categories.published <> 0 "
        SQL = SQL & "GROUP BY groupName "

        DBCommand = New SQLiteCommand(SQL, DB)
        readerShipType = DBCommand.ExecuteReader

        cmbPriceShipTypes.Items.Add("All Ship Types")

        While readerShipType.Read
            cmbPriceShipTypes.Items.Add(readerShipType.GetString(0))
        End While

        readerShipType.Close()
        readerShipType = Nothing
        DBCommand = Nothing

        cmbPriceShipTypes.Text = "All Ship Types"

    End Sub

    Private Sub LoadPriceChargeTypes()
        Dim SQL As String
        Dim readerChargeType As SQLiteDataReader

        ' Load the select systems combobox with systems
        SQL = "SELECT groupName from inventory_types, inventory_groups, inventory_categories "
        SQL = SQL & "WHERE  inventory_types.groupID = inventory_groups.groupID "
        SQL = SQL & "AND inventory_groups.categoryID = inventory_categories.categoryID "
        SQL = SQL & "AND categoryname = 'Charge' "
        SQL = SQL & "AND inventory_types.published <> 0 and inventory_groups.published <> 0 and inventory_categories.published <> 0 "
        SQL = SQL & "GROUP BY groupName "

        DBCommand = New SQLiteCommand(SQL, DB)
        readerChargeType = DBCommand.ExecuteReader

        cmbPriceChargeTypes.Items.Add("All Charge Types")

        While readerChargeType.Read
            cmbPriceChargeTypes.Items.Add(readerChargeType.GetString(0))
        End While

        readerChargeType.Close()
        readerChargeType = Nothing
        DBCommand = Nothing

        cmbPriceChargeTypes.Text = "All Charge Types"

    End Sub

#End Region

#Region "Manufacturing"

#Region "Manufacturing Object Functions"

    Private Sub lblCalcBaseFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcBaseFacilityDefault.Click
        If lblCalcBaseFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcBaseFacility()
        End If
    End Sub

    Private Sub lblCalcComponentFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcComponentFacilityDefault.Click
        If lblCalcComponentFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcComponentFacility()
        End If
    End Sub

    Private Sub lblCalcCopyFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcCopyFacilityDefault.Click
        If lblCalcCopyFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcCopyFacility()
        End If
    End Sub

    Private Sub lblCalcInventionFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcInventionFacilityDefault.Click
        If lblCalcInventionFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcT2InventionFacility()
        End If
    End Sub

    Private Sub lblCalcT3InventionFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcT3InventionFacilityDefault.Click
        If lblCalcT3InventionFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcT3InventionFacility()
        End If
    End Sub

    Private Sub lblCalcSuperFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcSuperFacilityDefault.Click
        If lblCalcSuperFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcSuperFacility()
        End If
    End Sub

    Private Sub lblCalcCapitalFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcCapitalFacilityDefault.Click
        If lblCalcCapitalFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcCapFacility()
        End If
    End Sub

    Private Sub lblCalcT3FacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcT3FacilityDefault.Click
        If lblCalcT3FacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcT3Facility()
        End If
    End Sub

    Private Sub lblCalcSubsystemFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcSubsystemFacilityDefault.Click
        If lblCalcSubsystemFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcSubsystemFacility()
        End If
    End Sub

    Private Sub lblCalcBoosterFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcBoosterFacilityDefault.Click
        If lblCalcBoosterFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcBoosterFacility()
        End If
    End Sub

    Private Sub lblCalcNoPOSFacilityDefault_Click(sender As System.Object, e As System.EventArgs) Handles lblCalcNoPOSFacilityDefault.Click
        If lblCalcNoPOSFacilityDefault.ForeColor = SystemColors.ButtonShadow Then
            Call LoadDefaultCalcNoPOSFacility()
        End If
    End Sub

    ' CalcBaseFacility functions
    Private Sub cmbCalcBaseFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcBaseFacilityType.DropDown
        PreviousCalcBaseFacilityType = cmbCalcBaseFacilityType.Text
    End Sub

    Private Sub cmbCalcBaseFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcBaseFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcBaseFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcBaseFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcBaseFacilityType <> cmbCalcBaseFacilityType.Text And Not FirstLoad Then
            If Not LoadingFacilityTypes And Not FirstLoad Then
                Call LoadFacilityRegions(0, 0, True, _
                                         ActivityManufacturing, cmbCalcBaseFacilityType, cmbCalcBaseFacilityRegion, cmbCalcBaseFacilitySystem, cmbCalcBaseFacilityorArray, _
                                         lblCalcBaseFacilityBonus, lblCalcBaseFacilityDefault, _
                                         lblCalcBaseFacilityManualME, txtCalcBaseFacilityManualME, _
                                         lblCalcBaseFacilityManualTE, txtCalcBaseFacilityManualTE, _
                                         lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax, _
                                         btnCalcBaseFacilitySave, lblCalcBaseFacilityTaxRate, CalcTab, chkCalcBaseFacilityIncludeUsage)
                Call cmbCalcBaseFacilityRegion.Focus()
            End If

            ' hide array selection for non-pos, hide the other drop downs
            If cmbCalcBaseFacilityType.Text = POSFacility Then
                Call SetPOSMultiUseArraysVisibility(True, False)
            Else
                Call SetPOSMultiUseArraysVisibility(False, False)
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcBaseFacilityBonus, lblCalcBaseFacilityTaxRate, _
                                        lblCalcBaseFacilityManualME, lblCalcBaseFacilityManualTE, _
                                        txtCalcBaseFacilityManualME, txtCalcBaseFacilityManualTE, _
                                        lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax)
            CalcBaseFacilityLoaded = False
        End If
    End Sub

    Private Sub cmbCalcBaseFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcBaseFacilityRegion.DropDown
        If Not FirstLoad And Not CalcBaseFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcBaseFacilityRegion = cmbCalcBaseFacilityRegion.Text
            Call LoadFacilityRegions(0, 0, False, _
                                     ActivityManufacturing, cmbCalcBaseFacilityType, cmbCalcBaseFacilityRegion, cmbCalcBaseFacilitySystem, cmbCalcBaseFacilityorArray, _
                                     lblCalcBaseFacilityBonus, lblCalcBaseFacilityDefault, _
                                     lblCalcBaseFacilityManualME, txtCalcBaseFacilityManualME, _
                                     lblCalcBaseFacilityManualTE, txtCalcBaseFacilityManualTE, _
                                     lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax, _
                                     btnCalcBaseFacilitySave, lblCalcBaseFacilityTaxRate, CalcTab, chkCalcBaseFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcBaseFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcBaseFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcBaseFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcBaseFacilityRegion.SelectedIndexChanged

        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcBaseFacilityRegion <> cmbCalcBaseFacilityRegion.Text Then
            Call LoadFacilitySystems(0, 0, True, _
                                     ActivityManufacturing, cmbCalcBaseFacilityType, cmbCalcBaseFacilityRegion, cmbCalcBaseFacilitySystem, cmbCalcBaseFacilityorArray, _
                                     lblCalcBaseFacilityBonus, lblCalcBaseFacilityTaxRate, _
                                     lblCalcBaseFacilityManualME, txtCalcBaseFacilityManualME, _
                                     lblCalcBaseFacilityManualTE, txtCalcBaseFacilityManualTE, _
                                     lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax, _
                                     lblCalcBaseFacilityDefault, btnCalcBaseFacilitySave, CalcTab, chkCalcBaseFacilityIncludeUsage)
            Call cmbCalcBaseFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcBaseFacilityBonus, lblCalcBaseFacilityTaxRate, _
                             lblCalcBaseFacilityManualME, lblCalcBaseFacilityManualTE, _
                             txtCalcBaseFacilityManualME, txtCalcBaseFacilityManualTE, _
                             lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax)
            CalcBaseFacilityLoaded = False
            PreviousCalcBaseFacilityRegion = cmbCalcBaseFacilityRegion.Text

            ' Make sure the pos facility stuff is still hidden
            ' hide array selection for non-pos, hide the other drop downs
            If cmbCalcBaseFacilityType.Text = POSFacility Then
                Call SetPOSMultiUseArraysVisibility(True, False)
            Else
                Call SetPOSMultiUseArraysVisibility(False, False)
            End If

        End If
    End Sub

    Private Sub cmbCalcBaseFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcBaseFacilitySystem.DropDown
        If Not CalcBaseFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcBaseFacilitySystem = cmbCalcBaseFacilitySystem.Text
            Call LoadFacilitySystems(0, 0, False, _
                                     ActivityManufacturing, cmbCalcBaseFacilityType, cmbCalcBaseFacilityRegion, cmbCalcBaseFacilitySystem, cmbCalcBaseFacilityorArray, _
                                     lblCalcBaseFacilityBonus, lblCalcBaseFacilityTaxRate, _
                                     lblCalcBaseFacilityManualME, txtCalcBaseFacilityManualME, _
                                     lblCalcBaseFacilityManualTE, txtCalcBaseFacilityManualTE, _
                                     lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax, _
                                     lblCalcBaseFacilityDefault, btnCalcBaseFacilitySave, CalcTab, chkCalcBaseFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcBaseFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcBaseFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcBaseFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcBaseFacilitySystem.SelectedIndexChanged
        Dim OverrideFacilityName As String = ""
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcBaseFacilitySystem <> cmbCalcBaseFacilitySystem.Text Then

            If cmbCalcBaseFacilityType.Text = OutpostFacility Then
                OverrideFacilityName = ""
                Autoload = True
            ElseIf cmbCalcBaseFacilityType.Text = POSFacility Then
                OverrideFacilityName = "CalcBase" ' Will trigger an autoload
            End If

            ' Load the facility and set the auto
            Call LoadFacilities(0, 0, False, _
                                ActivityManufacturing, cmbCalcBaseFacilityType, cmbCalcBaseFacilityRegion, cmbCalcBaseFacilitySystem, cmbCalcBaseFacilityorArray, _
                                lblCalcBaseFacilityBonus, lblCalcBaseFacilityDefault, _
                                lblCalcBaseFacilityManualME, txtCalcBaseFacilityManualME, _
                                lblCalcBaseFacilityManualTE, txtCalcBaseFacilityManualTE, _
                                lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax, _
                                btnCalcBaseFacilitySave, lblCalcBaseFacilityTaxRate, CalcTab, _
                                chkCalcBaseFacilityIncludeUsage, Nothing, Nothing, chkCalcBaseFacilityIncludeUsage.Checked, Autoload, OverrideFacilityName)

            If cmbCalcBaseFacilityType.Text = POSFacility Then
                ' Hide all these labels so we can see the other blocks
                Call HideFacilityBonusBoxes(lblCalcBaseFacilityBonus, lblCalcBaseFacilityTaxRate, _
                                            lblCalcBaseFacilityManualME, lblCalcBaseFacilityManualTE, _
                                            txtCalcBaseFacilityManualME, txtCalcBaseFacilityManualTE, _
                                            lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax)

                ' See if this is the default pos
                With DefaultCalcBaseManufacturingFacility
                    If cmbCalcBaseFacilityRegion.Text = .RegionName _
                        And cmbCalcBaseFacilitySystem.Text = .SolarSystemName _
                        And chkCalcBaseFacilityIncludeUsage.Checked = .IncludeActivityUsage Then
                        ' Is the default, set it
                        btnCalcBaseFacilitySave.Enabled = False
                        lblCalcBaseFacilityDefault.ForeColor = SystemColors.Highlight
                        Call ResetToolTipforDefaultFacilityLabel(lblCalcBaseFacilityDefault, False)
                        SelectedCalcBaseManufacturingFacility.IsDefault = True
                    Else
                        ' Allow saving of default
                        btnCalcBaseFacilitySave.Enabled = True
                        lblCalcBaseFacilityDefault.ForeColor = SystemColors.ButtonShadow
                        Call ResetToolTipforDefaultFacilityLabel(lblCalcBaseFacilityDefault, True)
                        SelectedCalcBaseManufacturingFacility.IsDefault = False
                    End If
                End With

            End If

            ' Hide for non-pos but show and enable for pos
            If cmbCalcBaseFacilityType.Text = POSFacility Then
                Call SetPOSMultiUseArraysVisibility(True, True)
            Else
                Call SetPOSMultiUseArraysVisibility(False, False)
            End If

            If Autoload Or cmbCalcBaseFacilityType.Text = POSFacility Then
                ' reload bp Use the original ME and TE values when they change the meta level
                CalcBaseFacilityLoaded = True
            Else
                CalcBaseFacilityLoaded = False
            End If

            Call cmbCalcBaseFacilityorArray.Focus()
            PreviousCalcBaseFacilitySystem = cmbCalcBaseFacilitySystem.Text
        End If

    End Sub

    Private Sub SetPOSMultiUseArraysVisibility(ByVal Visible As Boolean, ByVal Enabled As Boolean)
        If Visible Then
            cmbCalcBaseFacilityorArray.Visible = False
            ' Show the POS modules for multi-use
            cmbCalcPOSFuelBlocks.Visible = True
            cmbCalcPOSLargeShips.Visible = True
            cmbCalcPOSModules.Visible = True
            lblCalcPOSFuelBlocks.Visible = True
            lblCalcPOSLargeShips.Visible = True
            lblCalcPOSModules.Visible = True
        Else
            cmbCalcBaseFacilityorArray.Visible = True
            ' Hide the POS modules for multi-use
            cmbCalcPOSFuelBlocks.Visible = False
            cmbCalcPOSLargeShips.Visible = False
            cmbCalcPOSModules.Visible = False
            lblCalcPOSFuelBlocks.Visible = False
            lblCalcPOSLargeShips.Visible = False
            lblCalcPOSModules.Visible = False
        End If

        If Enabled Then
            ' Enable the POS modules for multi-use
            cmbCalcPOSFuelBlocks.Enabled = True
            cmbCalcPOSLargeShips.Enabled = True
            cmbCalcPOSModules.Enabled = True
            lblCalcPOSFuelBlocks.Enabled = True
            lblCalcPOSLargeShips.Enabled = True
            lblCalcPOSModules.Enabled = True
        Else
            ' Disable the POS modules for multi-use
            cmbCalcPOSFuelBlocks.Enabled = False
            cmbCalcPOSLargeShips.Enabled = False
            cmbCalcPOSModules.Enabled = False
            lblCalcPOSFuelBlocks.Enabled = False
            lblCalcPOSLargeShips.Enabled = False
            lblCalcPOSModules.Enabled = False
        End If

    End Sub

    Private Sub cmbCalcBaseFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcBaseFacilityorArray.DropDown
        If Not CalcBaseFacilitiesLoaded And Not FirstLoad And cmbCalcBaseFacilityType.Text <> POSFacility Then
            Call LoadFacilities(0, 0, False, _
                                ActivityManufacturing, cmbCalcBaseFacilityType, cmbCalcBaseFacilityRegion, cmbCalcBaseFacilitySystem, cmbCalcBaseFacilityorArray, _
                                lblCalcBaseFacilityBonus, lblCalcBaseFacilityDefault, _
                                lblCalcBaseFacilityManualME, txtCalcBaseFacilityManualME, _
                                lblCalcBaseFacilityManualTE, txtCalcBaseFacilityManualTE, _
                                lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax, _
                                btnCalcBaseFacilitySave, lblCalcBaseFacilityTaxRate, CalcTab, _
                                chkCalcBaseFacilityIncludeUsage, Nothing, Nothing, Nothing, chkCalcBaseFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcBaseFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcBaseFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcBaseFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcBaseFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcBaseFacilityEquipment <> cmbCalcBaseFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(IndustryType.Manufacturing, _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, 0, 0, _
                                      ActivityManufacturing, cmbCalcBaseFacilityType.Text, cmbCalcBaseFacilityorArray.Text, _
                                      cmbCalcBaseFacilityRegion, cmbCalcBaseFacilitySystem, cmbCalcBaseFacilityorArray, _
                                      lblCalcBaseFacilityBonus, lblCalcBaseFacilityDefault, _
                                      lblCalcBaseFacilityManualME, txtCalcBaseFacilityManualME, _
                                      lblCalcBaseFacilityManualTE, txtCalcBaseFacilityManualTE, _
                                      lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax, _
                                      btnCalcBaseFacilitySave, lblCalcBaseFacilityTaxRate, _
                                      chkCalcBaseFacilityIncludeUsage, Nothing, Nothing, CalcTab, CalcBaseFacilityLoaded, chkCalcBaseFacilityIncludeUsage.Checked)

            If txtCalcBaseFacilityManualME.Visible Then
                Call txtCalcBaseFacilityManualME.Focus()
            End If

            PreviousCalcBaseFacilityEquipment = cmbCalcBaseFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcBaseFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcBaseFacilitySave.Click

        SelectedCalcBaseManufacturingFacility.IncludeActivityUsage = chkCalcBaseFacilityIncludeUsage.Checked
        Call SelectedCalcBaseManufacturingFacility.SaveFacility(CalcTab)
        Call UpdateMMTMTaxDataforOutpost(SelectedCalcBaseManufacturingFacility, IndustryActivities.Manufacturing)
        DefaultCalcBaseManufacturingFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)

        If cmbCalcPOSFuelBlocks.Visible Then
            ' Save the three POS module selections for multi-modules
            ' Always reset each to the current facility and then set the facility name by the text box entry
            SelectedCalcPOSFuelBlockFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)
            SelectedCalcPOSFuelBlockFacility.ProductionType = IndustryType.POSFuelBlockManufacturing
            SelectedCalcPOSFuelBlockFacility.FacilityName = GetCalcPOSMultiUseArrayName(cmbCalcPOSFuelBlocks.Text)
            Call SelectedCalcPOSFuelBlockFacility.SaveFacility(CalcTab)
            DefaultCalcPOSFuelBlockFacility = CType(SelectedCalcPOSFuelBlockFacility.Clone, IndustryFacility)

            SelectedCalcPOSLargeShipFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)
            SelectedCalcPOSLargeShipFacility.ProductionType = IndustryType.POSLargeShipManufacturing
            SelectedCalcPOSLargeShipFacility.FacilityName = GetCalcPOSMultiUseArrayName(cmbCalcPOSLargeShips.Text)
            Call SelectedCalcPOSLargeShipFacility.SaveFacility(CalcTab)
            DefaultCalcPOSLargeShipFacility = CType(SelectedCalcPOSLargeShipFacility.Clone, IndustryFacility)

            SelectedCalcPOSModuleFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)
            SelectedCalcPOSModuleFacility.ProductionType = IndustryType.POSModuleManufacturing
            SelectedCalcPOSModuleFacility.FacilityName = GetCalcPOSMultiUseArrayName(cmbCalcPOSModules.Text)
            Call SelectedCalcPOSModuleFacility.SaveFacility(CalcTab)
            DefaultCalcPOSModuleFacility = CType(SelectedCalcPOSModuleFacility.Clone, IndustryFacility)
        End If

        lblCalcBaseFacilityDefault.ForeColor = SystemColors.Highlight
        Call ResetToolTipforDefaultFacilityLabel(lblCalcBaseFacilityDefault, False)

        ' They just saved it
        btnCalcBaseFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcBaseFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcBaseFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcBaseFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcBaseFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcBaseFacilityManualME, SelectedCalcBaseManufacturingFacility, _
                                      cmbCalcBaseFacilityType, btnCalcBaseFacilitySave, lblCalcBaseFacilityDefault)
    End Sub

    Private Sub txtCalcBaseFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcBaseFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcBaseFacilityManualME, cmbCalcBaseFacilityType, SelectedCalcBaseManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcBaseFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcBaseFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcBaseFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcBaseFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcBaseFacilityManualTE, SelectedCalcBaseManufacturingFacility, _
                                      cmbCalcBaseFacilityType, btnCalcBaseFacilitySave, lblCalcBaseFacilityDefault)
    End Sub

    Private Sub txtCalcBaseFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcBaseFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcBaseFacilityManualTE, cmbCalcBaseFacilityType, SelectedCalcBaseManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcBaseFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcBaseFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcBaseFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcBaseFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcBaseFacilityManualTax, SelectedCalcBaseManufacturingFacility, _
                                      cmbCalcBaseFacilityType, btnCalcBaseFacilitySave, lblCalcBaseFacilityDefault)
    End Sub

    Private Sub txtCalcBaseFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcBaseFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcBaseFacilityManualTax, cmbCalcBaseFacilityType, SelectedCalcBaseManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcBaseFacilityIncludeCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcBaseFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then

            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityManufacturing, 0, 0, cmbCalcBaseFacilityType.Text), _
                               chkCalcBaseFacilityIncludeUsage, CalcTab, cmbCalcBaseFacilityType.Text, cmbCalcBaseFacilityorArray, _
                               lblCalcBaseFacilityDefault, btnCalcBaseFacilitySave)

            If cmbCalcBaseFacilityType.Text = POSFacility Then
                ' For this check, if a POS is selected, we need to check all three multi-array types plus the base facility
                Call SetDefaultFacilitybyCheck(IndustryType.POSModuleManufacturing, _
                   chkCalcBaseFacilityIncludeUsage, CalcTab, cmbCalcBaseFacilityType.Text, cmbCalcBaseFacilityorArray, _
                   lblCalcBaseFacilityDefault, btnCalcBaseFacilitySave)

                Call SetDefaultFacilitybyCheck(IndustryType.POSFuelBlockManufacturing, _
                   chkCalcBaseFacilityIncludeUsage, CalcTab, cmbCalcBaseFacilityType.Text, cmbCalcBaseFacilityorArray, _
                   lblCalcBaseFacilityDefault, btnCalcBaseFacilitySave)

                Call SetDefaultFacilitybyCheck(IndustryType.POSLargeShipManufacturing, _
                   chkCalcBaseFacilityIncludeUsage, CalcTab, cmbCalcBaseFacilityType.Text, cmbCalcBaseFacilityorArray, _
                   lblCalcBaseFacilityDefault, btnCalcBaseFacilitySave)

            End If

            Call ResetRefresh()
        End If
    End Sub

    ' CalcComponentFacility functions
    Private Sub chkCalcCapComponents_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcCapComponentsFacility.CheckedChanged

        LoadingFacilityActivities = True
        If chkCalcCapComponentsFacility.Checked Then
            chkCalcComponentFacilityIncludeUsage.Checked = DefaultCalcCapitalComponentManufacturingFacility.IncludeActivityUsage
        Else
            chkCalcComponentFacilityIncludeUsage.Checked = DefaultCalcComponentManufacturingFacility.IncludeActivityUsage
        End If
        Call SetComponentFacilityLoaded(chkCalcCapComponentsFacility.Checked, False)
        Call LoadFacility(GetComponentsIndustryType(chkCalcCapComponentsFacility.Checked), False, False, _
                          GetComponentActivityType(chkCalcCapComponentsFacility.Checked), cmbCalcComponentFacilityType, _
                          cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                          lblCalcComponentFacilityBonus, lblCalcComponentFacilityDefault, _
                          lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                          lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                          lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                          btnCalcComponentFacilitySave, lblCalcComponentFacilityTaxRate, _
                          CalcTab, chkCalcComponentFacilityIncludeUsage, Nothing, Nothing, Nothing, TempCalcComponentFacilityLoaded, _
                          Nothing, 1, GetComponentsGroupID(chkCalcCapComponentsFacility.Checked), -1, False)
        Call SetComponentFacilityLoaded(chkCalcCapComponentsFacility.Checked, TempCalcComponentFacilityLoaded) ' Set if the facility loaded here
        LoadingFacilityActivities = False
        CalcComponentFacilitiesLoaded = False ' Reset dropdowns
    End Sub

    Private Sub cmbCalcComponentFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcComponentFacilityType.DropDown
        PreviousFacilityType = cmbCalcComponentFacilityType.Text
    End Sub

    Private Sub cmbCalcComponentFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcComponentFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcComponentFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcComponentFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcComponentFacilityType <> cmbCalcComponentFacilityType.Text Then
            If Not LoadingFacilityTypes And Not FirstLoad Then
                Call LoadFacilityRegions(GetComponentsGroupID(chkCalcCapComponentsFacility.Checked), -1, True, _
                                         GetComponentActivityType(chkCalcCapComponentsFacility.Checked), cmbCalcComponentFacilityType, cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                                         lblCalcComponentFacilityBonus, lblCalcComponentFacilityDefault, _
                                         lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                                         lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                                         lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                                         btnCalcComponentFacilitySave, lblCalcComponentFacilityTaxRate, CalcTab, chkCalcComponentFacilityIncludeUsage)
                Call cmbCalcComponentFacilityRegion.Focus()
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcComponentFacilityBonus, lblCalcComponentFacilityTaxRate, _
                                        lblCalcComponentFacilityManualME, lblCalcComponentFacilityManualTE, _
                                        txtCalcComponentFacilityManualME, txtCalcComponentFacilityManualTE, _
                                        lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax)
            Call SetComponentFacilityLoaded(chkCalcCapComponentsFacility.Checked, False)
            PreviousFacilityType = cmbCalcComponentFacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcComponentFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcComponentFacilityRegion.DropDown
        If Not FirstLoad And Not CalcComponentFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcComponentFacilityRegion = cmbCalcComponentFacilityRegion.Text
            Call LoadFacilityRegions(GetComponentsGroupID(chkCalcCapComponentsFacility.Checked), -1, False, _
                                     GetComponentActivityType(chkCalcCapComponentsFacility.Checked), cmbCalcComponentFacilityType, cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                                     lblCalcComponentFacilityBonus, lblCalcComponentFacilityDefault, _
                                     lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                                     lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                                     lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                                     btnCalcComponentFacilitySave, lblCalcComponentFacilityTaxRate, CalcTab, chkCalcComponentFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcComponentFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcComponentFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcComponentFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcComponentFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcComponentFacilityRegion <> cmbCalcComponentFacilityRegion.Text Then
            Call LoadFacilitySystems(GetComponentsGroupID(chkCalcCapComponentsFacility.Checked), -1, True, _
                                     GetComponentActivityType(chkCalcCapComponentsFacility.Checked), cmbCalcComponentFacilityType, cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                                     lblCalcComponentFacilityBonus, lblCalcComponentFacilityTaxRate, _
                                     lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                                     lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                                     lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                                     lblCalcComponentFacilityDefault, btnCalcComponentFacilitySave, CalcTab, chkCalcComponentFacilityIncludeUsage)
            Call cmbCalcComponentFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcBaseFacilityBonus, lblCalcBaseFacilityTaxRate, _
                            lblCalcBaseFacilityManualME, lblCalcBaseFacilityManualTE, _
                            txtCalcBaseFacilityManualME, txtCalcBaseFacilityManualTE, _
                            lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax)
            Call SetComponentFacilityLoaded(chkCalcCapComponentsFacility.Checked, False)
        End If
    End Sub

    Private Sub cmbCalcComponentFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcComponentFacilitySystem.DropDown
        If Not CalcComponentFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcComponentFacilitySystem = cmbCalcComponentFacilitySystem.Text
            Call LoadFacilitySystems(GetComponentsGroupID(chkCalcCapComponentsFacility.Checked), -1, False, _
                                     GetComponentActivityType(chkCalcCapComponentsFacility.Checked), cmbCalcComponentFacilityType, cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                                     lblCalcComponentFacilityBonus, lblCalcComponentFacilityTaxRate, _
                                     lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                                     lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                                     lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                                     lblCalcComponentFacilityDefault, btnCalcComponentFacilitySave, CalcTab, chkCalcComponentFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcComponentFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcComponentFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcComponentFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcComponentFacilitySystem.SelectedIndexChanged
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcComponentFacilitySystem <> cmbCalcComponentFacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(GetComponentsGroupID(chkCalcCapComponentsFacility.Checked), -1, False, _
                                GetComponentActivityType(chkCalcCapComponentsFacility.Checked), cmbCalcComponentFacilityType, cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                                lblCalcComponentFacilityBonus, lblCalcComponentFacilityDefault, _
                                lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                                lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                                lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                                btnCalcComponentFacilitySave, lblCalcComponentFacilityTaxRate, CalcTab, _
                                chkCalcComponentFacilityIncludeUsage, Nothing, Nothing, Autoload, chkCalcComponentFacilityIncludeUsage.Checked)

            Call cmbCalcComponentFacilityorArray.Focus()
            If Autoload Then
                CalcComponentFacilitiesLoaded = True
            Else
                CalcComponentFacilitiesLoaded = False
            End If
            PreviousCalcComponentFacilitySystem = cmbCalcComponentFacilitySystem.Text
            Call SetComponentFacilityLoaded(chkCalcCapComponentsFacility.Checked, False)
        End If

    End Sub

    Private Sub cmbCalcComponentFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcComponentFacilityorArray.DropDown
        If Not CalcComponentFacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(GetComponentsGroupID(chkCalcCapComponentsFacility.Checked), -1, False, _
                                GetComponentActivityType(chkCalcCapComponentsFacility.Checked), cmbCalcComponentFacilityType, cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                                lblCalcComponentFacilityBonus, lblCalcComponentFacilityDefault, _
                                lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                                lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                                lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                                btnCalcComponentFacilitySave, lblCalcComponentFacilityTaxRate, CalcTab, _
                                chkCalcComponentFacilityIncludeUsage, Nothing, Nothing, Nothing, chkCalcComponentFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcComponentFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcComponentFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcComponentFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcComponentFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcComponentFacilityEquipment <> cmbCalcComponentFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(GetComponentsIndustryType(chkCalcCapComponentsFacility.Checked), _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, GetComponentsGroupID(chkCalcCapComponentsFacility.Checked), -1, _
                                      GetComponentActivityType(chkCalcCapComponentsFacility.Checked), cmbCalcComponentFacilityType.Text, cmbCalcComponentFacilityorArray.Text, _
                                      cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                                      lblCalcComponentFacilityBonus, lblCalcComponentFacilityDefault, _
                                      lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                                      lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                                      lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                                      btnCalcComponentFacilitySave, lblCalcComponentFacilityTaxRate, _
                                      chkCalcComponentFacilityIncludeUsage, Nothing, Nothing, CalcTab, TempCalcComponentFacilityLoaded, chkCalcComponentFacilityIncludeUsage.Checked)
            Call SetComponentFacilityLoaded(chkCalcCapComponentsFacility.Checked, TempCalcComponentFacilityLoaded)
            If txtCalcComponentFacilityManualME.Visible Then
                Call txtCalcComponentFacilityManualME.Focus()
            End If

            PreviousCalcComponentFacilityEquipment = cmbCalcComponentFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcComponentFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcComponentFacilitySave.Click

        If chkCalcCapComponentsFacility.Checked Then
            SelectedCalcCapitalComponentManufacturingFacility.IncludeActivityUsage = chkCalcComponentFacilityIncludeUsage.Checked
            Call SelectedCalcCapitalComponentManufacturingFacility.SaveFacility(CalcTab)
            Call UpdateMMTMTaxDataforOutpost(SelectedCalcCapitalComponentManufacturingFacility, IndustryActivities.Manufacturing)
            DefaultCalcCapitalComponentManufacturingFacility = CType(SelectedCalcCapitalComponentManufacturingFacility.Clone, IndustryFacility)
        Else
            SelectedCalcComponentManufacturingFacility.IncludeActivityUsage = chkCalcComponentFacilityIncludeUsage.Checked
            Call SelectedCalcComponentManufacturingFacility.SaveFacility(CalcTab)
            Call UpdateMMTMTaxDataforOutpost(SelectedCalcComponentManufacturingFacility, IndustryActivities.Manufacturing)
            DefaultCalcComponentManufacturingFacility = CType(SelectedCalcComponentManufacturingFacility.Clone, IndustryFacility)
        End If

        lblCalcComponentFacilityDefault.Visible = True
        ' They just saved it
        btnCalcComponentFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcComponentFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcComponentFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcComponentFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcComponentFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcComponentFacilityManualME, SelectedCalcComponentManufacturingFacility, _
                                      cmbCalcComponentFacilityType, btnCalcComponentFacilitySave, lblCalcComponentFacilityDefault)
    End Sub

    Private Sub txtCalcComponentFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcComponentFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcComponentFacilityManualME, cmbCalcComponentFacilityType, SelectedCalcComponentManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcComponentFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcComponentFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcComponentFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcComponentFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcComponentFacilityManualTE, SelectedCalcComponentManufacturingFacility, _
                                      cmbCalcComponentFacilityType, btnCalcComponentFacilitySave, lblCalcComponentFacilityDefault)
    End Sub

    Private Sub txtCalcComponentFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcComponentFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcComponentFacilityManualTE, cmbCalcComponentFacilityType, SelectedCalcComponentManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcComponentFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcComponentFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcComponentFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcComponentFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcComponentFacilityManualTax, SelectedCalcComponentManufacturingFacility, _
                                      cmbCalcComponentFacilityType, btnCalcComponentFacilitySave, lblCalcComponentFacilityDefault)
    End Sub

    Private Sub txtCalcComponentFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcComponentFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcComponentFacilityManualTax, cmbCalcComponentFacilityType, SelectedCalcComponentManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcComponentFacilityIncludeCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcComponentFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            Call SetDefaultFacilitybyCheck(GetProductionType(GetComponentActivityType(chkCalcCapComponentsFacility.Checked), _
                                                             GetComponentsGroupID(chkCalcCapComponentsFacility.Checked), -1, cmbCalcComponentFacilityType.Text), _
                                                     chkCalcComponentFacilityIncludeUsage, CalcTab, cmbCalcComponentFacilityType.Text, _
                                                     cmbCalcComponentFacilityorArray, lblCalcComponentFacilityDefault, btnCalcComponentFacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    ' CalcInventionFacility functions
    Private Sub cmbCalcInventionFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcInventionFacilityType.DropDown
        PreviousFacilityType = cmbCalcInventionFacilityType.Text
    End Sub

    Private Sub cmbCalcInventionFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcInventionFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcInventionFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcInventionFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcInventionFacilityType <> cmbCalcInventionFacilityType.Text Then
            ' Might not want to set a facility for copy or invention
            If Not LoadingFacilityTypes And Not FirstLoad And cmbCalcInventionFacilityType.Text <> None Then
                Call LoadFacilityRegions(0, 0, True, _
                                         ActivityInvention, cmbCalcInventionFacilityType, cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                                         lblCalcInventionFacilityBonus, lblCalcInventionFacilityDefault, _
                                         lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                                         lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                                         lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                                         btnCalcInventionFacilitySave, lblCalcInventionFacilityTaxRate, CalcTab, chkCalcInventionFacilityIncludeUsage)
                ' Make sure these are enabled when changed
                chkCalcInventionFacilityIncludeUsage.Enabled = True
                chkCalcInventionFacilityIncludeCost.Enabled = True
                chkCalcInventionFacilityIncludeTime.Enabled = True
                lblCalcInventionInclude.Enabled = True
                Call cmbCalcInventionFacilityRegion.Focus()

            ElseIf cmbCalcInventionFacilityType.Text = None Then
                Call SetNoFacility(cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, chkCalcInventionFacilityIncludeUsage, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime)
                ' Allow this to be saved as a default though
                btnCalcInventionFacilitySave.Enabled = True
                ' changed so not the default
                lblCalcInventionFacilityDefault.Visible = False
                ' Save the facility locally
                ' For a pos, need to display the results and reload the bp
                Dim Defaults As New ProgramSettings
                ' Call display because it loads the facility
                Call DisplayFacilityBonus(IndustryType.Invention, _
                               Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, 0, 0, _
                               ActivityInvention, cmbCalcInventionFacilityType.Text, cmbCalcInventionFacilityorArray.Text, _
                               cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                               lblCalcInventionFacilityBonus, lblCalcInventionFacilityDefault, _
                               lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                               lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                               lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                               btnCalcInventionFacilitySave, lblCalcInventionFacilityTaxRate, _
                               chkCalcInventionFacilityIncludeUsage, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime, _
                               CalcTab, CalcInventionFacilityLoaded, chkCalcInventionFacilityIncludeUsage.Checked)
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcInventionFacilityBonus, lblCalcInventionFacilityTaxRate, _
                                        lblCalcInventionFacilityManualME, lblCalcInventionFacilityManualTE, _
                                        txtCalcInventionFacilityManualME, txtCalcInventionFacilityManualTE, _
                                        lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax)
            CalcInventionFacilityLoaded = False
            PreviousFacilityType = cmbCalcInventionFacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcInventionFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcInventionFacilityRegion.DropDown
        If Not FirstLoad And Not CalcInventionFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcInventionFacilityRegion = cmbCalcInventionFacilityRegion.Text
            Call LoadFacilityRegions(0, 0, False, _
                                     ActivityInvention, cmbCalcInventionFacilityType, cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                                     lblCalcInventionFacilityBonus, lblCalcInventionFacilityDefault, _
                                     lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                                     lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                                     lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                                     btnCalcInventionFacilitySave, lblCalcInventionFacilityTaxRate, CalcTab, chkCalcInventionFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcInventionFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcInventionFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcInventionFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcInventionFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcInventionFacilityRegion <> cmbCalcInventionFacilityRegion.Text Then
            Call LoadFacilitySystems(0, 0, True, _
                                     ActivityInvention, cmbCalcInventionFacilityType, cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                                     lblCalcInventionFacilityBonus, lblCalcInventionFacilityTaxRate, _
                                     lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                                     lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                                     lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                                     lblCalcInventionFacilityDefault, btnCalcInventionFacilitySave, CalcTab, chkCalcInventionFacilityIncludeUsage)
            Call cmbCalcInventionFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcInventionFacilityBonus, lblCalcInventionFacilityTaxRate, _
                                        lblCalcInventionFacilityManualME, lblCalcInventionFacilityManualTE, _
                                        txtCalcInventionFacilityManualME, txtCalcInventionFacilityManualTE, _
                                        lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax)
            CalcInventionFacilityLoaded = False
        End If
    End Sub

    Private Sub cmbCalcInventionFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcInventionFacilitySystem.DropDown
        If Not CalcInventionFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcInventionFacilitySystem = cmbCalcInventionFacilitySystem.Text
            Call LoadFacilitySystems(0, 0, False, _
                                     ActivityInvention, cmbCalcInventionFacilityType, cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                                     lblCalcInventionFacilityBonus, lblCalcInventionFacilityTaxRate, _
                                     lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                                     lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                                     lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                                     lblCalcInventionFacilityDefault, btnCalcInventionFacilitySave, CalcTab, chkCalcInventionFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcInventionFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcInventionFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcInventionFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcInventionFacilitySystem.SelectedIndexChanged
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcInventionFacilitySystem <> cmbCalcInventionFacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(0, ShipCategoryID, False, _
                                ActivityInvention, cmbCalcInventionFacilityType, cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                                lblCalcInventionFacilityBonus, lblCalcInventionFacilityDefault, _
                                lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                                lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                                lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                                btnCalcInventionFacilitySave, lblCalcInventionFacilityTaxRate, CalcTab, _
                                chkCalcInventionFacilityIncludeUsage, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime, Autoload, chkCalcInventionFacilityIncludeUsage.Checked)

            Call cmbCalcInventionFacilityorArray.Focus()
            If Autoload Then
                CalcInventionFacilitiesLoaded = True
            Else
                CalcInventionFacilitiesLoaded = False
            End If
            PreviousCalcInventionFacilitySystem = cmbCalcInventionFacilitySystem.Text
        End If

    End Sub

    Private Sub cmbCalcInventionFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcInventionFacilityorArray.DropDown
        If Not CalcInventionFacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(0, ShipCategoryID, False, _
                                ActivityInvention, cmbCalcInventionFacilityType, cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                                lblCalcInventionFacilityBonus, lblCalcInventionFacilityDefault, _
                                lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                                lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                                lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                                btnCalcInventionFacilitySave, lblCalcInventionFacilityTaxRate, CalcTab, _
                                chkCalcInventionFacilityIncludeUsage, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime, Nothing, chkCalcInventionFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcInventionFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcInventionFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcInventionFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcInventionFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcInventionFacilityEquipment <> cmbCalcInventionFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(IndustryType.Invention, _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, 0, 0, _
                                      ActivityInvention, cmbCalcInventionFacilityType.Text, cmbCalcInventionFacilityorArray.Text, _
                                      cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                                      lblCalcInventionFacilityBonus, lblCalcInventionFacilityDefault, _
                                      lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                                      lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                                      lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                                      btnCalcInventionFacilitySave, lblCalcInventionFacilityTaxRate, _
                                      chkCalcInventionFacilityIncludeUsage, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime, _
                                      CalcTab, CalcInventionFacilityLoaded, chkCalcInventionFacilityIncludeUsage.Checked)

            If txtCalcInventionFacilityManualME.Visible Then
                Call txtCalcInventionFacilityManualME.Focus()
            End If

            PreviousCalcInventionFacilityEquipment = cmbCalcInventionFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcInventionFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcInventionFacilitySave.Click

        SelectedCalcInventionFacility.IncludeActivityUsage = chkCalcInventionFacilityIncludeUsage.Checked
        SelectedCalcInventionFacility.IncludeActivityTime = chkCalcInventionFacilityIncludeTime.Checked
        Call SelectedCalcInventionFacility.SaveFacility(CalcTab)
        Call UpdateMMTMTaxDataforOutpost(SelectedCalcInventionFacility, IndustryActivities.Invention)
        DefaultCalcInventionFacility = CType(SelectedCalcInventionFacility.Clone, IndustryFacility)

        lblCalcInventionFacilityDefault.Visible = True
        ' They just saved it
        btnCalcInventionFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcInventionFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcInventionFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcInventionFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcInventionFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcInventionFacilityManualME, SelectedCalcInventionFacility, _
                                      cmbCalcInventionFacilityType, btnCalcInventionFacilitySave, lblCalcInventionFacilityDefault)
    End Sub

    Private Sub txtCalcInventionFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcInventionFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcInventionFacilityManualME, cmbCalcInventionFacilityType, SelectedCalcInventionFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcInventionFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcInventionFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcInventionFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcInventionFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcInventionFacilityManualTE, SelectedCalcInventionFacility, _
                                      cmbCalcInventionFacilityType, btnCalcInventionFacilitySave, lblCalcInventionFacilityDefault)
    End Sub

    Private Sub txtCalcInventionFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcInventionFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcInventionFacilityManualTE, cmbCalcInventionFacilityType, SelectedCalcInventionFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcInventionFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcInventionFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcInventionFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcInventionFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcInventionFacilityManualTax, SelectedCalcInventionFacility, _
                                      cmbCalcInventionFacilityType, btnCalcInventionFacilitySave, lblCalcInventionFacilityDefault)
    End Sub

    Private Sub txtCalcInventionFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcInventionFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcInventionFacilityManualTax, cmbCalcInventionFacilityType, SelectedCalcInventionFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcInventionFacilityIncludeCost_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcInventionFacilityIncludeCost.CheckedChanged
        If Not FirstLoad Then
            ' Set the include cost check
            SelectedCalcInventionFacility.IncludeActivityCost = chkCalcInventionFacilityIncludeCost.Checked
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityInvention, 0, 0, cmbCalcInventionFacilityType.Text), _
                                                         chkCalcInventionFacilityIncludeUsage, CalcTab, cmbCalcInventionFacilityType.Text, _
                                                         cmbCalcInventionFacilityorArray, lblCalcInventionFacilityDefault, _
                                                         btnCalcInventionFacilitySave, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime)
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcInventionFacilityIncludeTime_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcInventionFacilityIncludeTime.CheckedChanged
        If Not FirstLoad Then
            ' Set the include time check
            SelectedCalcInventionFacility.IncludeActivityTime = chkCalcInventionFacilityIncludeTime.Checked
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityInvention, 0, 0, cmbCalcInventionFacilityType.Text), _
                                                         chkCalcInventionFacilityIncludeUsage, CalcTab, cmbCalcInventionFacilityType.Text, _
                                                         cmbCalcInventionFacilityorArray, lblCalcInventionFacilityDefault, _
                                                         btnCalcInventionFacilitySave, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime)
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcInventionFacilityIncludeUsage_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcInventionFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityInvention, 0, 0, cmbCalcInventionFacilityType.Text), _
                                                         chkCalcInventionFacilityIncludeUsage, CalcTab, cmbCalcInventionFacilityType.Text, _
                                                         cmbCalcInventionFacilityorArray, lblCalcInventionFacilityDefault, _
                                                         btnCalcInventionFacilitySave, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime)
            Call ResetRefresh()
        End If
    End Sub

    ' CalcT3InventionFacility functions
    Private Sub cmbCalcT3InventionFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcT3InventionFacilityType.DropDown
        PreviousFacilityType = cmbCalcT3InventionFacilityType.Text
    End Sub

    Private Sub cmbCalcT3InventionFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcT3InventionFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcT3InventionFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcT3InventionFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcT3InventionFacilityType <> cmbCalcT3InventionFacilityType.Text Then
            ' Might not want to set a facility for copy or T3Invention
            If Not LoadingFacilityTypes And Not FirstLoad And cmbCalcT3InventionFacilityType.Text <> None Then
                Call LoadFacilityRegions(StrategicCruiserGroupID, SubsystemCategoryID, True, _
                                         ActivityInvention, cmbCalcT3InventionFacilityType, cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                                         lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityDefault, _
                                         lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                                         lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                                         lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                                         btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityTaxRate, CalcTab, chkCalcT3InventionFacilityIncludeUsage)
                ' Make sure these are enabled when changed
                chkCalcT3InventionFacilityIncludeUsage.Enabled = True
                chkCalcT3InventionFacilityIncludeCost.Enabled = True
                chkCalcT3InventionFacilityIncludeTime.Enabled = True
                lblCalcT3InventionInclude.Enabled = True
                Call cmbCalcT3InventionFacilityRegion.Focus()

            ElseIf cmbCalcT3InventionFacilityType.Text = None Then
                Call SetNoFacility(cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, chkCalcT3InventionFacilityIncludeUsage, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime, lblCalcT3InventionInclude)
                ' Allow this to be saved as a default though
                btnCalcT3InventionFacilitySave.Enabled = True
                ' changed so not the default
                lblCalcT3InventionFacilityDefault.Visible = False
                ' Save the facility locally
                ' For a pos, need to display the results and reload the bp
                Dim Defaults As New ProgramSettings
                ' Call display because it loads the facility
                Call DisplayFacilityBonus(IndustryType.T3Invention, _
                               Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, StrategicCruiserGroupID, SubsystemCategoryID, _
                               ActivityInvention, cmbCalcT3InventionFacilityType.Text, cmbCalcT3InventionFacilityorArray.Text, _
                               cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                               lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityDefault, _
                               lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                               lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                               lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                               btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityTaxRate, _
                               chkCalcT3InventionFacilityIncludeUsage, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime, _
                               CalcTab, CalcT3InventionFacilityLoaded, chkCalcT3InventionFacilityIncludeUsage.Checked)
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityTaxRate, _
                                        lblCalcT3InventionFacilityManualME, lblCalcT3InventionFacilityManualTE, _
                                        txtCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualTE, _
                                        lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax)
            CalcT3InventionFacilityLoaded = False
            PreviousFacilityType = cmbCalcT3InventionFacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcT3InventionFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcT3InventionFacilityRegion.DropDown
        If Not FirstLoad And Not CalcT3InventionFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcT3InventionFacilityRegion = cmbCalcT3InventionFacilityRegion.Text
            Call LoadFacilityRegions(StrategicCruiserGroupID, SubsystemCategoryID, False, _
                                     ActivityInvention, cmbCalcT3InventionFacilityType, cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                                     lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityDefault, _
                                     lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                                     lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                                     lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                                     btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityTaxRate, CalcTab, chkCalcT3InventionFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcT3InventionFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcT3InventionFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcT3InventionFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcT3InventionFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcT3InventionFacilityRegion <> cmbCalcT3InventionFacilityRegion.Text Then
            Call LoadFacilitySystems(StrategicCruiserGroupID, SubsystemCategoryID, True, _
                                     ActivityInvention, cmbCalcT3InventionFacilityType, cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                                     lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityTaxRate, _
                                     lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                                     lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                                     lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                                     lblCalcT3InventionFacilityDefault, btnCalcT3InventionFacilitySave, CalcTab, chkCalcT3FacilityIncludeUsage)
            Call cmbCalcT3InventionFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityTaxRate, _
                                        lblCalcT3InventionFacilityManualME, lblCalcT3InventionFacilityManualTE, _
                                        txtCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualTE, _
                                        lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax)
            CalcT3InventionFacilityLoaded = False
        End If
    End Sub

    Private Sub cmbCalcT3InventionFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcT3InventionFacilitySystem.DropDown
        If Not CalcT3InventionFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcT3InventionFacilitySystem = cmbCalcT3InventionFacilitySystem.Text
            Call LoadFacilitySystems(StrategicCruiserGroupID, SubsystemCategoryID, False, _
                                     ActivityInvention, cmbCalcT3InventionFacilityType, cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                                     lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityTaxRate, _
                                     lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                                     lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                                     lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                                     lblCalcT3InventionFacilityDefault, btnCalcT3InventionFacilitySave, CalcTab, chkCalcT3FacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcT3InventionFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcT3InventionFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcT3InventionFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcT3InventionFacilitySystem.SelectedIndexChanged
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcT3InventionFacilitySystem <> cmbCalcT3InventionFacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(StrategicCruiserGroupID, SubsystemCategoryID, False, _
                                ActivityInvention, cmbCalcT3InventionFacilityType, cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                                lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityDefault, _
                                lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                                lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                                lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                                btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityTaxRate, CalcTab, _
                                chkCalcT3InventionFacilityIncludeUsage, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime, Autoload, chkCalcT3InventionFacilityIncludeUsage.Checked)

            Call cmbCalcT3InventionFacilityorArray.Focus()
            If Autoload Then
                CalcT3InventionFacilitiesLoaded = True
            Else
                CalcT3InventionFacilitiesLoaded = False
            End If
            PreviousCalcT3InventionFacilitySystem = cmbCalcT3InventionFacilitySystem.Text
        End If

    End Sub

    Private Sub cmbCalcT3InventionFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcT3InventionFacilityorArray.DropDown
        If Not CalcT3InventionFacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(StrategicCruiserGroupID, SubsystemCategoryID, False, _
                                ActivityInvention, cmbCalcT3InventionFacilityType, cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                                lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityDefault, _
                                lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                                lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                                lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                                btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityTaxRate, CalcTab, _
                                chkCalcT3InventionFacilityIncludeUsage, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime, Nothing, chkCalcT3InventionFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcT3InventionFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcT3InventionFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcT3InventionFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcT3InventionFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcT3InventionFacilityEquipment <> cmbCalcT3InventionFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(IndustryType.T3Invention, _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, StrategicCruiserGroupID, SubsystemCategoryID, _
                                      ActivityInvention, cmbCalcT3InventionFacilityType.Text, cmbCalcT3InventionFacilityorArray.Text, _
                                      cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                                      lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityDefault, _
                                      lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                                      lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                                      lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                                      btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityTaxRate, _
                                      chkCalcT3InventionFacilityIncludeUsage, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime, _
                                      CalcTab, CalcT3InventionFacilityLoaded, chkCalcT3InventionFacilityIncludeUsage.Checked)

            If txtCalcT3InventionFacilityManualME.Visible Then
                Call txtCalcT3InventionFacilityManualME.Focus()
            End If

            PreviousCalcT3InventionFacilityEquipment = cmbCalcT3InventionFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcT3InventionFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcT3InventionFacilitySave.Click

        SelectedCalcT3InventionFacility.IncludeActivityUsage = chkCalcT3InventionFacilityIncludeUsage.Checked
        SelectedCalcT3InventionFacility.IncludeActivityCost = chkCalcT3InventionFacilityIncludeCost.Checked
        SelectedCalcT3InventionFacility.IncludeActivityTime = chkCalcT3InventionFacilityIncludeTime.Checked
        Call SelectedCalcT3InventionFacility.SaveFacility(CalcTab)
        Call UpdateMMTMTaxDataforOutpost(SelectedCalcT3InventionFacility, IndustryActivities.Invention)
        DefaultCalcT3InventionFacility = CType(SelectedCalcT3InventionFacility.Clone, IndustryFacility)

        lblCalcT3InventionFacilityDefault.Visible = True
        ' They just saved it
        btnCalcT3InventionFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcT3InventionFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcT3InventionFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcT3InventionFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcT3InventionFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcT3InventionFacilityManualME, SelectedCalcT3InventionFacility, _
                                      cmbCalcT3InventionFacilityType, btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityDefault)
    End Sub

    Private Sub txtCalcT3InventionFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcT3InventionFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcT3InventionFacilityManualME, cmbCalcT3InventionFacilityType, SelectedCalcT3InventionFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcT3InventionFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcT3InventionFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcT3InventionFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcT3InventionFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcT3InventionFacilityManualTE, SelectedCalcT3InventionFacility, _
                                      cmbCalcT3InventionFacilityType, btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityDefault)
    End Sub

    Private Sub txtCalcT3InventionFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcT3InventionFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcT3InventionFacilityManualTE, cmbCalcT3InventionFacilityType, SelectedCalcT3InventionFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcT3InventionFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcT3InventionFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcT3InventionFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcT3InventionFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcT3InventionFacilityManualTax, SelectedCalcT3InventionFacility, _
                                      cmbCalcT3InventionFacilityType, btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityDefault)
    End Sub

    Private Sub txtCalcT3InventionFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcT3InventionFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcT3InventionFacilityManualTax, cmbCalcT3InventionFacilityType, SelectedCalcT3InventionFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcT3InventionFacilityIncludeCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcT3InventionFacilityIncludeCost.CheckedChanged
        If Not FirstLoad Then
            ' Set the include cost
            SelectedCalcT3InventionFacility.IncludeActivityCost = chkCalcT3InventionFacilityIncludeCost.Checked
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityInvention, StrategicCruiserGroupID, -1, cmbCalcT3InventionFacilityType.Text), _
                                                     chkCalcT3InventionFacilityIncludeUsage, CalcTab, cmbCalcT3InventionFacilityType.Text, _
                                                     cmbCalcT3InventionFacilityorArray, lblCalcT3InventionFacilityDefault, _
                                                     btnCalcT3InventionFacilitySave, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime)
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcT3InventionFacilityIncludeTime_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcT3InventionFacilityIncludeTime.CheckedChanged
        If Not FirstLoad Then
            ' Set the include time
            SelectedCalcT3InventionFacility.IncludeActivityTime = chkCalcT3InventionFacilityIncludeTime.Checked
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityInvention, StrategicCruiserGroupID, -1, cmbCalcT3InventionFacilityType.Text), _
                                                     chkCalcT3InventionFacilityIncludeUsage, CalcTab, cmbCalcT3InventionFacilityType.Text, _
                                                     cmbCalcT3InventionFacilityorArray, lblCalcT3InventionFacilityDefault, _
                                                     btnCalcT3InventionFacilitySave, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime)
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcT3InventionFacilityIncludeUsage_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcT3InventionFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            ' Set the include time
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityInvention, StrategicCruiserGroupID, -1, cmbCalcT3InventionFacilityType.Text), _
                                                     chkCalcT3InventionFacilityIncludeUsage, CalcTab, cmbCalcT3InventionFacilityType.Text, _
                                                     cmbCalcT3InventionFacilityorArray, lblCalcT3InventionFacilityDefault, _
                                                     btnCalcT3InventionFacilitySave, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime)
            Call ResetRefresh()
        End If
    End Sub

    ' CalcCopyFacility functions
    Private Sub cmbCalcCopyFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcCopyFacilityType.DropDown
        PreviousCalcCopyFacilityType = cmbCalcCopyFacilityType.Text
    End Sub

    Private Sub cmbCalcCopyFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcCopyFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcCopyFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcCopyFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcCopyFacilityType <> cmbCalcCopyFacilityType.Text Then
            ' Might not want to set a facility for copy or invention
            If Not LoadingFacilityTypes And Not FirstLoad And cmbCalcCopyFacilityType.Text <> None Then
                Call LoadFacilityRegions(0, 0, True, _
                                         ActivityCopying, cmbCalcCopyFacilityType, cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                                         lblCalcCopyFacilityBonus, lblCalcCopyFacilityDefault, _
                                         lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                                         lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                                         lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                                         btnCalcCopyFacilitySave, lblCalcCopyFacilityTaxRate, CalcTab, chkCalcCopyFacilityIncludeUsage)
                ' Make sure these are enabled when changed
                chkCalcCopyFacilityIncludeUsage.Enabled = True
                chkCalcCopyFacilityIncludeCost.Enabled = True
                chkCalcCopyFacilityIncludeTime.Enabled = True
                lblCalcCopyInclude.Enabled = True
                Call cmbCalcCopyFacilityRegion.Focus()

            ElseIf cmbCalcCopyFacilityType.Text = None Then
                Call SetNoFacility(cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, chkCalcCopyFacilityIncludeUsage, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeTime)
                ' Allow this to be saved as a default though
                btnCalcCopyFacilitySave.Enabled = True
                ' changed so not the default
                lblCalcCopyFacilityDefault.Visible = False
                ' Save the facility locally
                ' For a pos, need to display the results and reload the bp
                Dim Defaults As New ProgramSettings
                ' Call display because it loads the facility
                Call DisplayFacilityBonus(IndustryType.Copying, _
                               Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, 0, 0, _
                               ActivityCopying, cmbCalcCopyFacilityType.Text, cmbCalcCopyFacilityorArray.Text, _
                               cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                               lblCalcCopyFacilityBonus, lblCalcCopyFacilityDefault, _
                               lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                               lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                               lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                               btnCalcCopyFacilitySave, lblCalcCopyFacilityTaxRate, _
                               chkCalcCopyFacilityIncludeUsage, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeTime, _
                               CalcTab, CalcCopyFacilityLoaded, chkCalcCopyFacilityIncludeUsage.Checked)
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcCopyFacilityBonus, lblCalcCopyFacilityTaxRate, _
                                        lblCalcCopyFacilityManualME, lblCalcCopyFacilityManualTE, _
                                        txtCalcCopyFacilityManualME, txtCalcCopyFacilityManualTE, _
                                        lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax)
            CalcCopyFacilityLoaded = False
            PreviousCalcCopyFacilityType = cmbCalcCopyFacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcCopyFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcCopyFacilityRegion.DropDown
        If Not FirstLoad And Not CalcCopyFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcCopyFacilityRegion = cmbCalcCopyFacilityRegion.Text
            Call LoadFacilityRegions(0, 0, False, _
                                     ActivityCopying, cmbCalcCopyFacilityType, cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                                     lblCalcCopyFacilityBonus, lblCalcCopyFacilityDefault, _
                                     lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                                     lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                                     lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                                     btnCalcCopyFacilitySave, lblCalcCopyFacilityTaxRate, CalcTab, chkCalcCopyFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcCopyFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcCopyFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcCopyFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcCopyFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcCopyFacilityRegion <> cmbCalcCopyFacilityRegion.Text Then
            Call LoadFacilitySystems(0, 0, True, _
                                     ActivityCopying, cmbCalcCopyFacilityType, cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                                     lblCalcCopyFacilityBonus, lblCalcCopyFacilityTaxRate, _
                                     lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                                     lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                                     lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                                     lblCalcCopyFacilityDefault, btnCalcCopyFacilitySave, CalcTab, chkCalcCopyFacilityIncludeUsage)
            Call cmbCalcCopyFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcCopyFacilityBonus, lblCalcCopyFacilityTaxRate, _
                            lblCalcCopyFacilityManualME, lblCalcCopyFacilityManualTE, _
                            txtCalcCopyFacilityManualME, txtCalcCopyFacilityManualTE, _
                            lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax)
            CalcCopyFacilityLoaded = False
        End If
    End Sub

    Private Sub cmbCalcCopyFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcCopyFacilitySystem.DropDown
        If Not CalcCopyFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcCopyFacilitySystem = cmbCalcCopyFacilitySystem.Text
            Call LoadFacilitySystems(0, 0, False, _
                                     ActivityCopying, cmbCalcCopyFacilityType, cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                                     lblCalcCopyFacilityBonus, lblCalcCopyFacilityTaxRate, _
                                     lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                                     lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                                     lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                                     lblCalcCopyFacilityDefault, btnCalcCopyFacilitySave, CalcTab, chkCalcCopyFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcCopyFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcCopyFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcCopyFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcCopyFacilitySystem.SelectedIndexChanged
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcCopyFacilitySystem <> cmbCalcCopyFacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(0, ShipCategoryID, False, _
                                ActivityCopying, cmbCalcCopyFacilityType, cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                                lblCalcCopyFacilityBonus, lblCalcCopyFacilityDefault, _
                                lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                                lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                                lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                                btnCalcCopyFacilitySave, lblCalcCopyFacilityTaxRate, CalcTab, _
                                chkCalcCopyFacilityIncludeUsage, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeTime, Autoload, chkCalcCopyFacilityIncludeUsage.Checked)

            Call cmbCalcCopyFacilityorArray.Focus()
            If Autoload Then
                CalcCopyFacilitiesLoaded = True
            Else
                CalcCopyFacilitiesLoaded = False
            End If
            PreviousCalcCopyFacilitySystem = cmbCalcCopyFacilitySystem.Text
        End If

    End Sub

    Private Sub cmbCalcCopyFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcCopyFacilityorArray.DropDown
        If Not CalcCopyFacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(0, ShipCategoryID, False, _
                                ActivityCopying, cmbCalcCopyFacilityType, cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                                lblCalcCopyFacilityBonus, lblCalcCopyFacilityDefault, _
                                lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                                lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                                lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                                btnCalcCopyFacilitySave, lblCalcCopyFacilityTaxRate, CalcTab, _
                                chkCalcCopyFacilityIncludeUsage, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeTime, Nothing, chkCalcCopyFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcCopyFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcCopyFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcCopyFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcCopyFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcCopyFacilityEquipment <> cmbCalcCopyFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(IndustryType.Copying, _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, 0, 0, _
                                      ActivityCopying, cmbCalcCopyFacilityType.Text, cmbCalcCopyFacilityorArray.Text, _
                                      cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                                      lblCalcCopyFacilityBonus, lblCalcCopyFacilityDefault, _
                                      lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                                      lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                                      lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                                      btnCalcCopyFacilitySave, lblCalcCopyFacilityTaxRate, _
                                      chkCalcCopyFacilityIncludeUsage, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeCost, _
                                      CalcTab, CalcCopyFacilityLoaded, chkCalcCopyFacilityIncludeUsage.Checked)

            If txtCalcCopyFacilityManualME.Visible Then
                Call txtCalcCopyFacilityManualME.Focus()
            End If

            PreviousCalcCopyFacilityEquipment = cmbCalcCopyFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcCopyFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcCopyFacilitySave.Click

        SelectedCalcCopyFacility.IncludeActivityUsage = chkCalcCopyFacilityIncludeUsage.Checked
        SelectedCalcCopyFacility.IncludeActivityCost = chkCalcCopyFacilityIncludeCost.Checked
        SelectedCalcCopyFacility.IncludeActivityTime = chkCalcCopyFacilityIncludeTime.Checked
        Call SelectedCalcCopyFacility.SaveFacility(CalcTab)
        Call UpdateMMTMTaxDataforOutpost(SelectedCalcCopyFacility, IndustryActivities.Copying)
        DefaultCalcCopyFacility = CType(SelectedCalcCopyFacility.Clone, IndustryFacility)

        lblCalcCopyFacilityDefault.Visible = True
        ' They just saved it
        btnCalcCopyFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)


    End Sub

    Private Sub txtCalcCopyFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcCopyFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcCopyFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcCopyFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcCopyFacilityManualME, SelectedCalcCopyFacility, _
                                      cmbCalcCopyFacilityType, btnCalcCopyFacilitySave, lblCalcCopyFacilityDefault)
    End Sub

    Private Sub txtCalcCopyFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcCopyFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcCopyFacilityManualME, cmbCalcCopyFacilityType, SelectedCalcCopyFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcCopyFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcCopyFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcCopyFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcCopyFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcCopyFacilityManualTE, SelectedCalcCopyFacility, _
                                      cmbCalcCopyFacilityType, btnCalcCopyFacilitySave, lblCalcCopyFacilityDefault)
    End Sub

    Private Sub txtCalcCopyFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcCopyFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcCopyFacilityManualTE, cmbCalcCopyFacilityType, SelectedCalcCopyFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcCopyFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcCopyFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcCopyFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcCopyFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcCopyFacilityManualTax, SelectedCalcCopyFacility, _
                                      cmbCalcCopyFacilityType, btnCalcCopyFacilitySave, lblCalcCopyFacilityDefault)
    End Sub

    Private Sub txtCalcCopyFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcCopyFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcCopyFacilityManualTax, cmbCalcCopyFacilityType, SelectedCalcCopyFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcCopyFacilityIncludeCost_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcCopyFacilityIncludeCost.CheckedChanged
        If Not FirstLoad Then
            ' Set the copy cost first
            SelectedCalcCopyFacility.IncludeActivityCost = chkCalcCopyFacilityIncludeCost.Checked
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityCopying, 0, 0, cmbCalcCopyFacilityType.Text), _
                                                     chkCalcCopyFacilityIncludeUsage, CalcTab, cmbCalcCopyFacilityType.Text, _
                                                     cmbCalcCopyFacilityorArray, lblCalcCopyFacilityDefault, _
                                                     btnCalcCopyFacilitySave, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeTime)
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcCopyFacilityIncludeTime_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcCopyFacilityIncludeTime.CheckedChanged
        If Not FirstLoad Then
            ' Set the copy time first
            SelectedCalcCopyFacility.IncludeActivityTime = chkCalcCopyFacilityIncludeTime.Checked
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityCopying, 0, 0, cmbCalcCopyFacilityType.Text), _
                                                     chkCalcCopyFacilityIncludeUsage, CalcTab, cmbCalcCopyFacilityType.Text, _
                                                     cmbCalcCopyFacilityorArray, lblCalcCopyFacilityDefault, _
                                                     btnCalcCopyFacilitySave, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeTime)
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcCopyFacilityIncludeUsage_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcCopyFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityCopying, 0, 0, cmbCalcCopyFacilityType.Text), _
                                                     chkCalcCopyFacilityIncludeUsage, CalcTab, cmbCalcCopyFacilityType.Text, _
                                                     cmbCalcCopyFacilityorArray, lblCalcCopyFacilityDefault, _
                                                     btnCalcCopyFacilitySave, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeTime)
            Call ResetRefresh()
        End If
    End Sub

    ' CalcNoPOSFacility functions
    Private Sub cmbCalcNoPOSFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcNoPOSFacilityType.DropDown
        PreviousCalcNoPOSFacilityType = cmbCalcNoPOSFacilityType.Text
    End Sub

    Private Sub cmbCalcNoPOSFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcNoPOSFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcNoPOSFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcNoPOSFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcNoPOSFacilityType <> cmbCalcNoPOSFacilityType.Text Then
            If Not LoadingFacilityTypes And Not FirstLoad Then
                Call LoadFacilityRegions(-1, SovStructureCategoryID, True, _
                                         ActivityManufacturing, cmbCalcNoPOSFacilityType, cmbCalcNoPOSFacilityRegion, cmbCalcNoPOSFacilitySystem, cmbCalcNoPOSFacilityorArray, _
                                         lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityDefault, _
                                         lblCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualME, _
                                         lblCalcNoPOSFacilityManualTE, txtCalcNoPOSFacilityManualTE, _
                                         lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax, _
                                         btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityTaxRate, CalcTab, chkCalcNoPOSFacilityIncludeUsage)
                Call cmbCalcNoPOSFacilityRegion.Focus()
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityTaxRate, _
                                        lblCalcNoPOSFacilityManualME, lblCalcNoPOSFacilityManualTE, _
                                        txtCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualTE, _
                                        lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax)
            CalcNoPOSFacilityLoaded = False
            PreviousCalcNoPOSFacilityType = cmbCalcNoPOSFacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcNoPOSFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcNoPOSFacilityRegion.DropDown
        If Not FirstLoad And Not CalcNoPOSFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcNoPOSFacilityRegion = cmbCalcNoPOSFacilityRegion.Text
            Call LoadFacilityRegions(-1, SovStructureCategoryID, False, _
                                     ActivityManufacturing, cmbCalcNoPOSFacilityType, cmbCalcNoPOSFacilityRegion, cmbCalcNoPOSFacilitySystem, cmbCalcNoPOSFacilityorArray, _
                                     lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityDefault, _
                                     lblCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualME, _
                                     lblCalcNoPOSFacilityManualTE, txtCalcNoPOSFacilityManualTE, _
                                     lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax, _
                                     btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityTaxRate, CalcTab, chkCalcNoPOSFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcNoPOSFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcNoPOSFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcNoPOSFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcNoPOSFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcNoPOSFacilityRegion <> cmbCalcNoPOSFacilityRegion.Text Then
            Call LoadFacilitySystems(-1, SovStructureCategoryID, True, _
                                     ActivityManufacturing, cmbCalcNoPOSFacilityType, cmbCalcNoPOSFacilityRegion, cmbCalcNoPOSFacilitySystem, cmbCalcNoPOSFacilityorArray, _
                                     lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityTaxRate, _
                                     lblCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualME, _
                                     lblCalcNoPOSFacilityManualTE, txtCalcNoPOSFacilityManualTE, _
                                     lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax, _
                                     lblCalcNoPOSFacilityDefault, btnCalcNoPOSFacilitySave, CalcTab, chkCalcNoPOSFacilityIncludeUsage)
            Call cmbCalcNoPOSFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityTaxRate, _
                            lblCalcNoPOSFacilityManualME, lblCalcNoPOSFacilityManualTE, _
                            txtCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualTE, _
                            lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax)
            CalcNoPOSFacilityLoaded = False
        End If
    End Sub

    Private Sub cmbCalcNoPOSFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcNoPOSFacilitySystem.DropDown
        If Not CalcNoPOSFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcNoPOSFacilitySystem = cmbCalcNoPOSFacilitySystem.Text
            Call LoadFacilitySystems(-1, SovStructureCategoryID, False, _
                                     ActivityManufacturing, cmbCalcNoPOSFacilityType, cmbCalcNoPOSFacilityRegion, cmbCalcNoPOSFacilitySystem, cmbCalcNoPOSFacilityorArray, _
                                     lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityTaxRate, _
                                     lblCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualME, _
                                     lblCalcNoPOSFacilityManualTE, txtCalcNoPOSFacilityManualTE, _
                                     lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax, _
                                     lblCalcNoPOSFacilityDefault, btnCalcNoPOSFacilitySave, CalcTab, chkCalcNoPOSFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcNoPOSFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcNoPOSFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcNoPOSFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcNoPOSFacilitySystem.SelectedIndexChanged

        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcNoPOSFacilitySystem <> cmbCalcNoPOSFacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(-1, SovStructureCategoryID, False, _
                                ActivityManufacturing, cmbCalcNoPOSFacilityType, cmbCalcNoPOSFacilityRegion, cmbCalcNoPOSFacilitySystem, cmbCalcNoPOSFacilityorArray, _
                                lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityDefault, _
                                lblCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualME, _
                                lblCalcNoPOSFacilityManualTE, txtCalcNoPOSFacilityManualTE, _
                                lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax, _
                                btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityTaxRate, CalcTab, _
                                chkCalcNoPOSFacilityIncludeUsage, Nothing, Nothing, Autoload, chkCalcNoPOSFacilityIncludeUsage.Checked)

            Call cmbCalcNoPOSFacilityorArray.Focus()
            If Autoload Then
                CalcNoPOSFacilitiesLoaded = True
            Else
                CalcNoPOSFacilitiesLoaded = False
            End If
            PreviousCalcNoPOSFacilitySystem = cmbCalcNoPOSFacilitySystem.Text
        End If

    End Sub

    Private Sub cmbCalcNoPOSFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcNoPOSFacilityorArray.DropDown
        If Not CalcNoPOSFacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(-1, SovStructureCategoryID, False, _
                                ActivityManufacturing, cmbCalcNoPOSFacilityType, cmbCalcNoPOSFacilityRegion, cmbCalcNoPOSFacilitySystem, cmbCalcNoPOSFacilityorArray, _
                                lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityDefault, _
                                lblCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualME, _
                                lblCalcNoPOSFacilityManualTE, txtCalcNoPOSFacilityManualTE, _
                                lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax, _
                                btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityTaxRate, CalcTab, _
                                chkCalcNoPOSFacilityIncludeUsage, Nothing, Nothing, Nothing, chkCalcNoPOSFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcNoPOSFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcNoPOSFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcNoPOSFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcNoPOSFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcNoPOSFacilityEquipment <> cmbCalcNoPOSFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(IndustryType.NoPOSManufacturing, _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, -1, SovStructureCategoryID, _
                                      ActivityManufacturing, cmbCalcNoPOSFacilityType.Text, cmbCalcNoPOSFacilityorArray.Text, _
                                      cmbCalcNoPOSFacilityRegion, cmbCalcNoPOSFacilitySystem, cmbCalcNoPOSFacilityorArray, _
                                      lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityDefault, _
                                      lblCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualME, _
                                      lblCalcNoPOSFacilityManualTE, txtCalcNoPOSFacilityManualTE, _
                                      lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax, _
                                      btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityTaxRate, _
                                      chkCalcNoPOSFacilityIncludeUsage, Nothing, Nothing, CalcTab, CalcNoPOSFacilityLoaded, chkCalcNoPOSFacilityIncludeUsage.Checked)

            If txtCalcNoPOSFacilityManualME.Visible Then
                Call txtCalcNoPOSFacilityManualME.Focus()
            End If

            PreviousCalcNoPOSFacilityEquipment = cmbCalcNoPOSFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcNoPOSFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcNoPOSFacilitySave.Click

        SelectedCalcNoPOSFacility.IncludeActivityUsage = chkCalcNoPOSFacilityIncludeUsage.Checked
        Call SelectedCalcNoPOSFacility.SaveFacility(CalcTab)
        Call UpdateMMTMTaxDataforOutpost(SelectedCalcNoPOSFacility, IndustryActivities.Manufacturing)
        DefaultCalcNoPOSFacility = CType(SelectedCalcNoPOSFacility.Clone, IndustryFacility)

        lblCalcNoPOSFacilityDefault.Visible = True
        ' They just saved it
        btnCalcNoPOSFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcNoPOSFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcNoPOSFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcNoPOSFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcNoPOSFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcNoPOSFacilityManualME, SelectedCalcNoPOSFacility, _
                                      cmbCalcNoPOSFacilityType, btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityDefault)
    End Sub

    Private Sub txtCalcNoPOSFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcNoPOSFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcNoPOSFacilityManualME, cmbCalcNoPOSFacilityType, SelectedCalcNoPOSFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcNoPOSFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcNoPOSFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcNoPOSFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcNoPOSFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcNoPOSFacilityManualTE, SelectedCalcNoPOSFacility, _
                                      cmbCalcNoPOSFacilityType, btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityDefault)
    End Sub

    Private Sub txtCalcNoPOSFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcNoPOSFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcNoPOSFacilityManualTE, cmbCalcNoPOSFacilityType, SelectedCalcNoPOSFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcNoPOSFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcNoPOSFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcNoPOSFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcNoPOSFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcNoPOSFacilityManualTax, SelectedCalcNoPOSFacility, _
                                      cmbCalcNoPOSFacilityType, btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityDefault)
    End Sub

    Private Sub txtCalcNoPOSFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcNoPOSFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcNoPOSFacilityManualTax, cmbCalcNoPOSFacilityType, SelectedCalcNoPOSFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcNoPOSFacilityIncludeCost_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcNoPOSFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityManufacturing, -1, SovStructureCategoryID, cmbCalcNoPOSFacilityType.Text), _
                               chkCalcNoPOSFacilityIncludeUsage, CalcTab, cmbCalcNoPOSFacilityType.Text, cmbCalcNoPOSFacilityorArray, _
                               lblCalcNoPOSFacilityDefault, btnCalcNoPOSFacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    ' CalcSuperFacility functions
    Private Sub cmbCalcSuperFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcSuperFacilityType.DropDown
        PreviousCalcSuperFacilityType = cmbCalcSuperFacilityType.Text
    End Sub

    Private Sub cmbCalcSuperFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcSuperFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcSuperFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcSuperFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcSuperFacilityType <> cmbCalcSuperFacilityType.Text Then

            If Not LoadingFacilityTypes And Not FirstLoad Then
                Call LoadFacilityRegions(SupercarrierGroupID, -1, True, _
                                         ActivityManufacturing, cmbCalcSuperFacilityType, cmbCalcSuperFacilityRegion, cmbCalcSuperFacilitySystem, cmbCalcSuperFacilityorArray, _
                                         lblCalcSuperFacilityBonus, lblCalcSuperFacilityDefault, _
                                         lblCalcSuperFacilityManualME, txtCalcSuperFacilityManualME, _
                                         lblCalcSuperFacilityManualTE, txtCalcSuperFacilityManualTE, _
                                         lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax, _
                                         btnCalcSuperFacilitySave, lblCalcSuperFacilityTaxRate, CalcTab, chkCalcSuperFacilityIncludeUsage)
                Call cmbCalcSuperFacilityRegion.Focus()
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcSuperFacilityBonus, lblCalcSuperFacilityTaxRate, _
                                        lblCalcSuperFacilityManualME, lblCalcSuperFacilityManualTE, _
                                        txtCalcSuperFacilityManualME, txtCalcSuperFacilityManualTE, _
                                        lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax)
            CalcSuperFacilityLoaded = False
            PreviousCalcSuperFacilityType = cmbCalcSuperFacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcSuperFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcSuperFacilityRegion.DropDown
        If Not FirstLoad And Not CalcSuperFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcSuperFacilityRegion = cmbCalcSuperFacilityRegion.Text
            Call LoadFacilityRegions(SupercarrierGroupID, -1, False, _
                                     ActivityManufacturing, cmbCalcSuperFacilityType, cmbCalcSuperFacilityRegion, cmbCalcSuperFacilitySystem, cmbCalcSuperFacilityorArray, _
                                     lblCalcSuperFacilityBonus, lblCalcSuperFacilityDefault, _
                                     lblCalcSuperFacilityManualME, txtCalcSuperFacilityManualME, _
                                     lblCalcSuperFacilityManualTE, txtCalcSuperFacilityManualTE, _
                                     lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax, _
                                     btnCalcSuperFacilitySave, lblCalcSuperFacilityTaxRate, CalcTab, chkCalcSuperFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcSuperFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcSuperFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcSuperFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcSuperFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcSuperFacilityRegion <> cmbCalcSuperFacilityRegion.Text Then
            Call LoadFacilitySystems(SupercarrierGroupID, -1, True, _
                                     ActivityManufacturing, cmbCalcSuperFacilityType, cmbCalcSuperFacilityRegion, cmbCalcSuperFacilitySystem, cmbCalcSuperFacilityorArray, _
                                     lblCalcSuperFacilityBonus, lblCalcSuperFacilityTaxRate, _
                                     lblCalcSuperFacilityManualME, txtCalcSuperFacilityManualME, _
                                     lblCalcSuperFacilityManualTE, txtCalcSuperFacilityManualTE, _
                                     lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax, _
                                     lblCalcSuperFacilityDefault, btnCalcSuperFacilitySave, CalcTab, chkCalcSuperFacilityIncludeUsage)
            Call cmbCalcSuperFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcSuperFacilityBonus, lblCalcSuperFacilityTaxRate, _
                            lblCalcSuperFacilityManualME, lblCalcSuperFacilityManualTE, _
                            txtCalcSuperFacilityManualME, txtCalcSuperFacilityManualTE, _
                            lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax)
            CalcSuperFacilityLoaded = False
        End If
    End Sub

    Private Sub cmbCalcSuperFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcSuperFacilitySystem.DropDown
        If Not CalcSuperFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcSuperFacilitySystem = cmbCalcSuperFacilitySystem.Text
            Call LoadFacilitySystems(SupercarrierGroupID, -1, False, _
                                     ActivityManufacturing, cmbCalcSuperFacilityType, cmbCalcSuperFacilityRegion, cmbCalcSuperFacilitySystem, cmbCalcSuperFacilityorArray, _
                                     lblCalcSuperFacilityBonus, lblCalcSuperFacilityTaxRate, _
                                     lblCalcSuperFacilityManualME, txtCalcSuperFacilityManualME, _
                                     lblCalcSuperFacilityManualTE, txtCalcSuperFacilityManualTE, _
                                     lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax, _
                                     lblCalcSuperFacilityDefault, btnCalcSuperFacilitySave, CalcTab, chkCalcSuperFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcSuperFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcSuperFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcSuperFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcSuperFacilitySystem.SelectedIndexChanged
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcSuperFacilitySystem <> cmbCalcSuperFacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(SupercarrierGroupID, -1, False, _
                                ActivityManufacturing, cmbCalcSuperFacilityType, cmbCalcSuperFacilityRegion, cmbCalcSuperFacilitySystem, cmbCalcSuperFacilityorArray, _
                                lblCalcSuperFacilityBonus, lblCalcSuperFacilityDefault, _
                                lblCalcSuperFacilityManualME, txtCalcSuperFacilityManualME, _
                                lblCalcSuperFacilityManualTE, txtCalcSuperFacilityManualTE, _
                                lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax, _
                                btnCalcSuperFacilitySave, lblCalcSuperFacilityTaxRate, CalcTab, _
                                chkCalcSuperFacilityIncludeUsage, Nothing, Nothing, Autoload, chkCalcSuperFacilityIncludeUsage.Checked)

            Call cmbCalcSuperFacilityorArray.Focus()
            If Autoload Then
                CalcSuperFacilitiesLoaded = True
            Else
                CalcSuperFacilitiesLoaded = False
            End If
            PreviousCalcSuperFacilitySystem = cmbCalcSuperFacilitySystem.Text
        End If

    End Sub

    Private Sub cmbCalcSuperFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcSuperFacilityorArray.DropDown
        If Not CalcSuperFacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(SupercarrierGroupID, -1, False, _
                                ActivityManufacturing, cmbCalcSuperFacilityType, cmbCalcSuperFacilityRegion, cmbCalcSuperFacilitySystem, cmbCalcSuperFacilityorArray, _
                                lblCalcSuperFacilityBonus, lblCalcSuperFacilityDefault, _
                                lblCalcSuperFacilityManualME, txtCalcSuperFacilityManualME, _
                                lblCalcSuperFacilityManualTE, txtCalcSuperFacilityManualTE, _
                                lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax, _
                                btnCalcSuperFacilitySave, lblCalcSuperFacilityTaxRate, CalcTab, _
                                chkCalcSuperFacilityIncludeUsage, Nothing, Nothing, Nothing, chkCalcSuperFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcSuperFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcSuperFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcSuperFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcSuperFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcSuperFacilityEquipment <> cmbCalcSuperFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(IndustryType.SuperManufacturing, _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, SupercarrierGroupID, -1, _
                                      ActivityManufacturing, cmbCalcSuperFacilityType.Text, cmbCalcSuperFacilityorArray.Text, _
                                      cmbCalcSuperFacilityRegion, cmbCalcSuperFacilitySystem, cmbCalcSuperFacilityorArray, _
                                      lblCalcSuperFacilityBonus, lblCalcSuperFacilityDefault, _
                                      lblCalcSuperFacilityManualME, txtCalcSuperFacilityManualME, _
                                      lblCalcSuperFacilityManualTE, txtCalcSuperFacilityManualTE, _
                                      lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax, _
                                      btnCalcSuperFacilitySave, lblCalcSuperFacilityTaxRate, _
                                      chkCalcSuperFacilityIncludeUsage, Nothing, Nothing, CalcTab, CalcSuperFacilityLoaded, chkCalcSuperFacilityIncludeUsage.Checked)

            If txtCalcSuperFacilityManualME.Visible Then
                Call txtCalcSuperFacilityManualME.Focus()
            End If

            PreviousCalcSuperFacilityEquipment = cmbCalcSuperFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcSuperFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcSuperFacilitySave.Click

        SelectedCalcSuperManufacturingFacility.IncludeActivityUsage = chkCalcSuperFacilityIncludeUsage.Checked
        Call SelectedCalcSuperManufacturingFacility.SaveFacility(CalcTab)
        Call UpdateMMTMTaxDataforOutpost(SelectedCalcSuperManufacturingFacility, IndustryActivities.Manufacturing)
        DefaultCalcSuperManufacturingFacility = CType(SelectedCalcSuperManufacturingFacility.Clone, IndustryFacility)

        lblCalcSuperFacilityDefault.Visible = True
        ' They just saved it
        btnCalcSuperFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcSuperFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcSuperFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcSuperFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcSuperFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcSuperFacilityManualME, SelectedCalcSuperManufacturingFacility, _
                                      cmbCalcSuperFacilityType, btnCalcSuperFacilitySave, lblCalcSuperFacilityDefault)
    End Sub

    Private Sub txtCalcSuperFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcSuperFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcSuperFacilityManualME, cmbCalcSuperFacilityType, SelectedCalcSuperManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcSuperFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcSuperFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcSuperFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcSuperFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcSuperFacilityManualTE, SelectedCalcSuperManufacturingFacility, _
                                      cmbCalcSuperFacilityType, btnCalcSuperFacilitySave, lblCalcSuperFacilityDefault)
    End Sub

    Private Sub txtCalcSuperFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcSuperFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcSuperFacilityManualTE, cmbCalcSuperFacilityType, SelectedCalcSuperManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcSuperFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcSuperFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcSuperFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcSuperFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcSuperFacilityManualTax, SelectedCalcSuperManufacturingFacility, _
                                      cmbCalcSuperFacilityType, btnCalcSuperFacilitySave, lblCalcSuperFacilityDefault)
    End Sub

    Private Sub txtCalcSuperFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcSuperFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcSuperFacilityManualTax, cmbCalcSuperFacilityType, SelectedCalcSuperManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcSuperFacilityIncludeCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcSuperFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityManufacturing, SupercarrierGroupID, -1, cmbCalcSuperFacilityType.Text), _
                               chkCalcSuperFacilityIncludeUsage, CalcTab, cmbCalcSuperFacilityType.Text, cmbCalcSuperFacilityorArray, _
                               lblCalcSuperFacilityDefault, btnCalcSuperFacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    ' CalcCapitalFacility functions
    Private Sub cmbCalcCapitalFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcCapitalFacilityType.DropDown
        PreviousCalcCapitalFacilityType = cmbCalcCapitalFacilityType.Text
    End Sub

    Private Sub cmbCalcCapitalFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcCapitalFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcCapitalFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcCapitalFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcCapitalFacilityType <> cmbCalcCapitalFacilityType.Text Then
            If Not LoadingFacilityTypes And Not FirstLoad Then
                Call LoadFacilityRegions(DreadnoughtGroupID, -1, True, _
                                         ActivityManufacturing, cmbCalcCapitalFacilityType, cmbCalcCapitalFacilityRegion, cmbCalcCapitalFacilitySystem, cmbCalcCapitalFacilityorArray, _
                                         lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityDefault, _
                                         lblCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualME, _
                                         lblCalcCapitalFacilityManualTE, txtCalcCapitalFacilityManualTE, _
                                         lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax, _
                                         btnCalcCapitalFacilitySave, lblCalcCapitalFacilityTaxRate, CalcTab, chkCalcCapitalFacilityIncludeUsage)
                Call cmbCalcCapitalFacilityRegion.Focus()
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityTaxRate, _
                                        lblCalcCapitalFacilityManualME, lblCalcCapitalFacilityManualTE, _
                                        txtCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualTE, _
                                        lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax)
            CalcCapitalFacilityLoaded = False
            PreviousCalcCapitalFacilityType = cmbCalcCapitalFacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcCapitalFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcCapitalFacilityRegion.DropDown
        If Not FirstLoad And Not CalcCapitalFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcCapitalFacilityRegion = cmbCalcCapitalFacilityRegion.Text
            Call LoadFacilityRegions(DreadnoughtGroupID, -1, False, _
                                     ActivityManufacturing, cmbCalcCapitalFacilityType, cmbCalcCapitalFacilityRegion, cmbCalcCapitalFacilitySystem, cmbCalcCapitalFacilityorArray, _
                                     lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityDefault, _
                                     lblCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualME, _
                                     lblCalcCapitalFacilityManualTE, txtCalcCapitalFacilityManualTE, _
                                     lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax, _
                                     btnCalcCapitalFacilitySave, lblCalcCapitalFacilityTaxRate, CalcTab, chkCalcCapitalFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcCapitalFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcCapitalFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcCapitalFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcCapitalFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcCapitalFacilityRegion <> cmbCalcCapitalFacilityRegion.Text Then
            Call LoadFacilitySystems(DreadnoughtGroupID, -1, True, _
                                     ActivityManufacturing, cmbCalcCapitalFacilityType, cmbCalcCapitalFacilityRegion, cmbCalcCapitalFacilitySystem, cmbCalcCapitalFacilityorArray, _
                                     lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityTaxRate, _
                                     lblCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualME, _
                                     lblCalcCapitalFacilityManualTE, txtCalcCapitalFacilityManualTE, _
                                     lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax, _
                                     lblCalcCapitalFacilityDefault, btnCalcCapitalFacilitySave, CalcTab, chkCalcCapitalFacilityIncludeUsage)
            Call cmbCalcCapitalFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityTaxRate, _
                             lblCalcCapitalFacilityManualME, lblCalcCapitalFacilityManualTE, _
                             txtCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualTE, _
                             lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax)
            CalcCapitalFacilityLoaded = False
        End If
    End Sub

    Private Sub cmbCalcCapitalFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcCapitalFacilitySystem.DropDown
        If Not CalcCapitalFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcCapitalFacilitySystem = cmbCalcCapitalFacilitySystem.Text
            Call LoadFacilitySystems(DreadnoughtGroupID, -1, False, _
                                     ActivityManufacturing, cmbCalcCapitalFacilityType, cmbCalcCapitalFacilityRegion, cmbCalcCapitalFacilitySystem, cmbCalcCapitalFacilityorArray, _
                                     lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityTaxRate, _
                                     lblCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualME, _
                                     lblCalcCapitalFacilityManualTE, txtCalcCapitalFacilityManualTE, _
                                     lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax, _
                                     lblCalcCapitalFacilityDefault, btnCalcCapitalFacilitySave, CalcTab, chkCalcCapitalFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcCapitalFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcCapitalFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcCapitalFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcCapitalFacilitySystem.SelectedIndexChanged
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcCapitalFacilitySystem <> cmbCalcCapitalFacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(DreadnoughtGroupID, -1, False, _
                                ActivityManufacturing, cmbCalcCapitalFacilityType, cmbCalcCapitalFacilityRegion, cmbCalcCapitalFacilitySystem, cmbCalcCapitalFacilityorArray, _
                                lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityDefault, _
                                lblCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualME, _
                                lblCalcCapitalFacilityManualTE, txtCalcCapitalFacilityManualTE, _
                                lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax, _
                                btnCalcCapitalFacilitySave, lblCalcCapitalFacilityTaxRate, CalcTab, _
                                chkCalcSuperFacilityIncludeUsage, Nothing, Nothing, Autoload, chkCalcSuperFacilityIncludeUsage.Checked)

            Call cmbCalcCapitalFacilityorArray.Focus()
            If Autoload Then
                CalcCapitalFacilitiesLoaded = True
            Else
                CalcCapitalFacilitiesLoaded = False
            End If
            PreviousCalcCapitalFacilitySystem = cmbCalcCapitalFacilitySystem.Text
        End If

    End Sub

    Private Sub cmbCalcCapitalFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcCapitalFacilityorArray.DropDown
        If Not CalcCapitalFacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(DreadnoughtGroupID, -1, False, _
                                ActivityManufacturing, cmbCalcCapitalFacilityType, cmbCalcCapitalFacilityRegion, cmbCalcCapitalFacilitySystem, cmbCalcCapitalFacilityorArray, _
                                lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityDefault, _
                                lblCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualME, _
                                lblCalcCapitalFacilityManualTE, txtCalcCapitalFacilityManualTE, _
                                lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax, _
                                btnCalcCapitalFacilitySave, lblCalcCapitalFacilityTaxRate, CalcTab, _
                                chkCalcCapitalFacilityIncludeUsage, Nothing, Nothing, Nothing, chkCalcCapitalFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcCapitalFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcCapitalFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcCapitalFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcCapitalFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcCapitalFacilityEquipment <> cmbCalcCapitalFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(IndustryType.CapitalManufacturing, _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, DreadnoughtGroupID, -1, _
                                      ActivityManufacturing, cmbCalcCapitalFacilityType.Text, cmbCalcCapitalFacilityorArray.Text, _
                                      cmbCalcCapitalFacilityRegion, cmbCalcCapitalFacilitySystem, cmbCalcCapitalFacilityorArray, _
                                      lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityDefault, _
                                      lblCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualME, _
                                      lblCalcCapitalFacilityManualTE, txtCalcCapitalFacilityManualTE, _
                                      lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax, _
                                      btnCalcCapitalFacilitySave, lblCalcCapitalFacilityTaxRate, _
                                      chkCalcCapitalFacilityIncludeUsage, Nothing, Nothing, CalcTab, CalcCapitalFacilityLoaded, chkCalcCapitalFacilityIncludeUsage.Checked)

            If txtCalcCapitalFacilityManualME.Visible Then
                Call txtCalcCapitalFacilityManualME.Focus()
            End If

            PreviousCalcCapitalFacilityEquipment = cmbCalcCapitalFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcCapitalFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcCapitalFacilitySave.Click

        SelectedCalcCapitalManufacturingFacility.IncludeActivityUsage = chkCalcCapitalFacilityIncludeUsage.Checked
        Call SelectedCalcCapitalManufacturingFacility.SaveFacility(CalcTab)
        Call UpdateMMTMTaxDataforOutpost(SelectedCalcCapitalManufacturingFacility, IndustryActivities.Manufacturing)
        DefaultCalcCapitalManufacturingFacility = CType(SelectedCalcCapitalManufacturingFacility.Clone, IndustryFacility)

        lblCalcCapitalFacilityDefault.Visible = True
        ' They just saved it
        btnCalcCapitalFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcCapitalFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcCapitalFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcCapitalFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcCapitalFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcCapitalFacilityManualME, SelectedCalcCapitalManufacturingFacility, _
                                      cmbCalcCapitalFacilityType, btnCalcCapitalFacilitySave, lblCalcCapitalFacilityDefault)
    End Sub

    Private Sub txtCalcCapitalFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcCapitalFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcCapitalFacilityManualME, cmbCalcCapitalFacilityType, SelectedCalcCapitalManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcCapitalFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcCapitalFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcCapitalFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcCapitalFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcCapitalFacilityManualTE, SelectedCalcCapitalManufacturingFacility, _
                                      cmbCalcCapitalFacilityType, btnCalcCapitalFacilitySave, lblCalcCapitalFacilityDefault)
    End Sub

    Private Sub txtCalcCapitalFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcCapitalFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcCapitalFacilityManualTE, cmbCalcCapitalFacilityType, SelectedCalcCapitalManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcCapitalFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcCapitalFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcCapitalFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcCapitalFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcCapitalFacilityManualTax, SelectedCalcCapitalManufacturingFacility, _
                                      cmbCalcCapitalFacilityType, btnCalcCapitalFacilitySave, lblCalcCapitalFacilityDefault)
    End Sub

    Private Sub txtCalcCapitalFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcCapitalFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcCapitalFacilityManualTax, cmbCalcCapitalFacilityType, SelectedCalcCapitalManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcCapitalFacilityIncludeCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcCapitalFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityManufacturing, DreadnoughtGroupID, -1, cmbCalcCapitalFacilityType.Text), _
                                                     chkCalcCapitalFacilityIncludeUsage, CalcTab, cmbCalcCapitalFacilityType.Text, _
                                                     cmbCalcCapitalFacilityorArray, lblCalcCapitalFacilityDefault, btnCalcCapitalFacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    ' CalcT3Facility functions
    Private Sub chkCalcT3Destroyers_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcT3DestroyersFacility.CheckedChanged
        LoadingFacilityActivities = True
        Call SetT3FacilityLoaded(chkCalcT3DestroyersFacility.Checked, False)
        If chkCalcT3DestroyersFacility.Checked Then
            chkCalcCapitalFacilityIncludeUsage.Checked = DefaultCalcT3DestroyerManufacturingFacility.IncludeActivityUsage
        Else
            chkCalcCapitalFacilityIncludeUsage.Checked = DefaultCalcT3CruiserManufacturingFacility.IncludeActivityUsage
        End If
        Call LoadFacility(GetT3ShipIndustryType(chkCalcT3DestroyersFacility.Checked), False, False, _
                          ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                          lblCalcT3FacilityBonus, lblCalcT3FacilityDefault, _
                          lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                          lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                          lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                          btnCalcT3FacilitySave, lblCalcT3FacilityTaxRate, _
                          CalcTab, chkCalcT3FacilityIncludeUsage, Nothing, Nothing, Nothing, TempCalcT3FacilityLoaded, Nothing, _
                          1, GetT3ShipGroupID(chkCalcT3DestroyersFacility.Checked), -1, False)
        Call SetT3FacilityLoaded(chkCalcT3DestroyersFacility.Checked, TempCalcT3FacilityLoaded)
        LoadingFacilityActivities = False
        CalcT3FacilitiesLoaded = False
    End Sub

    Private Sub cmbCalcT3FacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcT3FacilityType.DropDown
        PreviousCalcT3FacilityType = cmbCalcT3FacilityType.Text
    End Sub

    Private Sub cmbCalcT3FacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcT3FacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcT3FacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcT3FacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcT3FacilityType <> cmbCalcT3FacilityType.Text Then
            If Not LoadingFacilityTypes And Not FirstLoad Then
                Call LoadFacilityRegions(GetT3ShipGroupID(chkCalcT3DestroyersFacility.Checked), -1, True, _
                                         ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                                         lblCalcT3FacilityBonus, lblCalcT3FacilityDefault, _
                                         lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                                         lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                                         lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                                         btnCalcT3FacilitySave, lblCalcT3FacilityTaxRate, CalcTab, chkCalcT3FacilityIncludeUsage)
                Call cmbCalcT3FacilityRegion.Focus()
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcT3FacilityBonus, lblCalcT3FacilityTaxRate, _
                                        lblCalcT3FacilityManualME, lblCalcT3FacilityManualTE, _
                                        txtCalcT3FacilityManualME, txtCalcT3FacilityManualTE, _
                                        lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax)
            Call SetT3FacilityLoaded(chkCalcT3DestroyersFacility.Checked, False)
            PreviousCalcT3FacilityType = cmbCalcT3FacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcT3FacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcT3FacilityRegion.DropDown
        If Not FirstLoad And Not CalcT3FacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcT3FacilityRegion = cmbCalcT3FacilityRegion.Text
            Call LoadFacilityRegions(GetT3ShipGroupID(chkCalcT3DestroyersFacility.Checked), -1, False, _
                                     ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                                     lblCalcT3FacilityBonus, lblCalcT3FacilityDefault, _
                                     lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                                     lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                                     lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                                     btnCalcT3FacilitySave, lblCalcT3FacilityTaxRate, CalcTab, chkCalcT3FacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcT3FacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcT3FacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcT3FacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcT3FacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcT3FacilityRegion <> cmbCalcT3FacilityRegion.Text Then
            Call LoadFacilitySystems(GetT3ShipGroupID(chkCalcT3DestroyersFacility.Checked), -1, True, _
                                     ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                                     lblCalcT3FacilityBonus, lblCalcT3FacilityTaxRate, _
                                     lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                                     lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                                     lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                                     lblCalcT3FacilityDefault, btnCalcT3FacilitySave, CalcTab, chkCalcT3FacilityIncludeUsage)
            Call cmbCalcT3FacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcT3FacilityBonus, lblCalcT3FacilityTaxRate, _
                            lblCalcT3FacilityManualME, lblCalcT3FacilityManualTE, _
                            txtCalcT3FacilityManualME, txtCalcT3FacilityManualTE, _
                            lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax)
            Call SetT3FacilityLoaded(chkCalcT3DestroyersFacility.Checked, False)
        End If
    End Sub

    Private Sub cmbCalcT3FacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcT3FacilitySystem.DropDown
        If Not CalcT3FacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcT3FacilitySystem = cmbCalcT3FacilitySystem.Text
            Call LoadFacilitySystems(GetT3ShipGroupID(chkCalcT3DestroyersFacility.Checked), -1, False, _
                                     ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                                     lblCalcT3FacilityBonus, lblCalcT3FacilityTaxRate, _
                                     lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                                     lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                                     lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                                     lblCalcT3FacilityDefault, btnCalcT3FacilitySave, CalcTab, chkCalcT3FacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcT3FacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcT3FacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcT3FacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcT3FacilitySystem.SelectedIndexChanged
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcT3FacilitySystem <> cmbCalcT3FacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(GetT3ShipGroupID(chkCalcT3DestroyersFacility.Checked), -1, False, _
                                ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                                lblCalcT3FacilityBonus, lblCalcT3FacilityDefault, _
                                lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                                lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                                lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                                btnCalcT3FacilitySave, lblCalcT3FacilityTaxRate, CalcTab, _
                                chkCalcT3FacilityIncludeUsage, Nothing, Nothing, Autoload, chkCalcT3FacilityIncludeUsage.Checked)

            Call cmbCalcT3FacilityorArray.Focus()
            If Autoload Then
                CalcT3FacilitiesLoaded = True
            Else
                CalcT3FacilitiesLoaded = False
            End If
            PreviousCalcT3FacilitySystem = cmbCalcT3FacilitySystem.Text
        End If

    End Sub

    Private Sub cmbCalcT3FacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcT3FacilityorArray.DropDown
        If Not CalcT3FacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(GetT3ShipGroupID(chkCalcT3DestroyersFacility.Checked), -1, False, _
                                ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                                lblCalcT3FacilityBonus, lblCalcT3FacilityDefault, _
                                lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                                lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                                lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                                btnCalcT3FacilitySave, lblCalcT3FacilityTaxRate, CalcTab, _
                                chkCalcT3FacilityIncludeUsage, Nothing, Nothing, Nothing, chkCalcT3FacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcT3FacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcT3FacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcT3FacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcT3FacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcT3FacilityEquipment <> cmbCalcT3FacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(GetT3ShipIndustryType(chkCalcT3DestroyersFacility.Checked), _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, GetT3ShipGroupID(chkCalcT3DestroyersFacility.Checked), -1, _
                                      ActivityManufacturing, cmbCalcT3FacilityType.Text, cmbCalcT3FacilityorArray.Text, _
                                      cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                                      lblCalcT3FacilityBonus, lblCalcT3FacilityDefault, _
                                      lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                                      lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                                      lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                                      btnCalcT3FacilitySave, lblCalcT3FacilityTaxRate, _
                                      chkCalcT3FacilityIncludeUsage, Nothing, Nothing, CalcTab, TempCalcT3FacilityLoaded, chkCalcT3FacilityIncludeUsage.Checked)
            Call SetT3FacilityLoaded(chkCalcT3DestroyersFacility.Checked, TempCalcT3FacilityLoaded)
            If txtCalcT3FacilityManualME.Visible Then
                Call txtCalcT3FacilityManualME.Focus()
            End If

            PreviousCalcT3FacilityEquipment = cmbCalcT3FacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcT3FacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcT3FacilitySave.Click

        If chkCalcT3DestroyersFacility.Checked Then
            SelectedCalcT3DestroyerManufacturingFacility.IncludeActivityUsage = chkCalcT3FacilityIncludeUsage.Checked
            Call SelectedCalcT3DestroyerManufacturingFacility.SaveFacility(CalcTab)
            Call UpdateMMTMTaxDataforOutpost(SelectedCalcT3DestroyerManufacturingFacility, IndustryActivities.Manufacturing)
            DefaultCalcT3DestroyerManufacturingFacility = CType(SelectedCalcT3DestroyerManufacturingFacility.Clone, IndustryFacility)
        Else
            SelectedCalcT3CruiserManufacturingFacility.IncludeActivityUsage = chkCalcT3FacilityIncludeUsage.Checked
            Call SelectedCalcT3CruiserManufacturingFacility.SaveFacility(CalcTab)
            Call UpdateMMTMTaxDataforOutpost(SelectedCalcT3CruiserManufacturingFacility, IndustryActivities.Manufacturing)
            DefaultCalcT3CruiserManufacturingFacility = CType(SelectedCalcT3CruiserManufacturingFacility.Clone, IndustryFacility)
        End If

        lblCalcT3FacilityDefault.Visible = True
        ' They just saved it
        btnCalcT3FacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcT3FacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcT3FacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcT3FacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcT3FacilityManualME.KeyUp
        If chkCalcT3DestroyersFacility.Checked Then
            Call OutpostMETETaxText_KeyUp("ME", txtCalcT3FacilityManualME, SelectedCalcT3DestroyerManufacturingFacility, _
                                          cmbCalcT3FacilityType, btnCalcT3FacilitySave, lblCalcT3FacilityDefault)
        Else
            Call OutpostMETETaxText_KeyUp("ME", txtCalcT3FacilityManualME, SelectedCalcT3CruiserManufacturingFacility, _
                              cmbCalcT3FacilityType, btnCalcT3FacilitySave, lblCalcT3FacilityDefault)
        End If
    End Sub

    Private Sub txtCalcT3FacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcT3FacilityManualME.LostFocus
        If chkCalcT3DestroyersFacility.Checked Then
            Call OutpostMETETaxText_LostFocus(txtCalcT3FacilityManualME, cmbCalcT3FacilityType, SelectedCalcT3DestroyerManufacturingFacility.MaterialMultiplier, False)
        Else
            Call OutpostMETETaxText_LostFocus(txtCalcT3FacilityManualME, cmbCalcT3FacilityType, SelectedCalcT3CruiserManufacturingFacility.MaterialMultiplier, False)
        End If
    End Sub

    Private Sub txtCalcT3FacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcT3FacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcT3FacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcT3FacilityManualTE.KeyUp
        If chkCalcT3DestroyersFacility.Checked Then
            Call OutpostMETETaxText_KeyUp("TE", txtCalcT3FacilityManualTE, SelectedCalcT3DestroyerManufacturingFacility, _
                                          cmbCalcT3FacilityType, btnCalcT3FacilitySave, lblCalcT3FacilityDefault)
        Else
            Call OutpostMETETaxText_KeyUp("TE", txtCalcT3FacilityManualTE, SelectedCalcT3CruiserManufacturingFacility, _
                              cmbCalcT3FacilityType, btnCalcT3FacilitySave, lblCalcT3FacilityDefault)
        End If
    End Sub

    Private Sub txtCalcT3FacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcT3FacilityManualTE.LostFocus
        If chkCalcT3DestroyersFacility.Checked Then
            Call OutpostMETETaxText_LostFocus(txtCalcT3FacilityManualTE, cmbCalcT3FacilityType, SelectedCalcT3DestroyerManufacturingFacility.MaterialMultiplier, False)
        Else
            Call OutpostMETETaxText_LostFocus(txtCalcT3FacilityManualTE, cmbCalcT3FacilityType, SelectedCalcT3CruiserManufacturingFacility.MaterialMultiplier, False)
        End If
    End Sub

    Private Sub txtCalcT3FacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcT3FacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcT3FacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcT3FacilityManualTax.KeyUp
        If chkCalcT3DestroyersFacility.Checked Then
            Call OutpostMETETaxText_KeyUp("Tax", txtCalcT3FacilityManualTax, SelectedCalcT3DestroyerManufacturingFacility, _
                                          cmbCalcT3FacilityType, btnCalcT3FacilitySave, lblCalcT3FacilityDefault)
        Else
            Call OutpostMETETaxText_KeyUp("Tax", txtCalcT3FacilityManualTax, SelectedCalcT3CruiserManufacturingFacility, _
                              cmbCalcT3FacilityType, btnCalcT3FacilitySave, lblCalcT3FacilityDefault)
        End If
    End Sub

    Private Sub txtCalcT3FacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcT3FacilityManualTax.LostFocus
        If chkCalcT3DestroyersFacility.Checked Then
            Call OutpostMETETaxText_LostFocus(txtCalcT3FacilityManualTax, cmbCalcT3FacilityType, SelectedCalcT3DestroyerManufacturingFacility.MaterialMultiplier, False)
        Else
            Call OutpostMETETaxText_LostFocus(txtCalcT3FacilityManualTax, cmbCalcT3FacilityType, SelectedCalcT3CruiserManufacturingFacility.MaterialMultiplier, False)
        End If
    End Sub

    Private Sub chkCalcT3FacilityIncludeCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcT3FacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityManufacturing, GetT3ShipGroupID(chkCalcT3DestroyersFacility.Checked), _
                                            -1, cmbCalcT3FacilityType.Text), _
                                            chkCalcT3FacilityIncludeUsage, CalcTab, cmbCalcT3FacilityType.Text, _
                                            cmbCalcT3FacilityorArray, lblCalcT3FacilityDefault, btnCalcT3FacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    ' CalcSubsystemFacility functions
    Private Sub cmbCalcSubsystemFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcSubsystemFacilityType.DropDown
        PreviousCalcSubsystemFacilityType = cmbCalcSubsystemFacilityType.Text
    End Sub

    Private Sub cmbCalcSubsystemFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcSubsystemFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcSubsystemFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcSubsystemFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcSubsystemFacilityType <> cmbCalcSubsystemFacilityType.Text Then
            If Not LoadingFacilityTypes And Not FirstLoad Then
                Call LoadFacilityRegions(-1, SubsystemCategoryID, True, _
                                         ActivityManufacturing, cmbCalcSubsystemFacilityType, cmbCalcSubsystemFacilityRegion, cmbCalcSubsystemFacilitySystem, cmbCalcSubsystemFacilityorArray, _
                                         lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityDefault, _
                                         lblCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualME, _
                                         lblCalcSubsystemFacilityManualTE, txtCalcSubsystemFacilityManualTE, _
                                         lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax, _
                                         btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityTaxRate, CalcTab, chkCalcSubsystemFacilityIncludeUsage)
                Call cmbCalcSubsystemFacilityRegion.Focus()
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityTaxRate, _
                                        lblCalcSubsystemFacilityManualME, lblCalcSubsystemFacilityManualTE, _
                                        txtCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualTE, _
                                        lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax)
            CalcSubsystemFacilityLoaded = False
            PreviousCalcSubsystemFacilityType = cmbCalcSubsystemFacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcSubsystemFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcSubsystemFacilityRegion.DropDown
        If Not FirstLoad And Not CalcSubsystemFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcSubsystemFacilityRegion = cmbCalcSubsystemFacilityRegion.Text
            Call LoadFacilityRegions(-1, SubsystemCategoryID, False, _
                                     ActivityManufacturing, cmbCalcSubsystemFacilityType, cmbCalcSubsystemFacilityRegion, cmbCalcSubsystemFacilitySystem, cmbCalcSubsystemFacilityorArray, _
                                     lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityDefault, _
                                     lblCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualME, _
                                     lblCalcSubsystemFacilityManualTE, txtCalcSubsystemFacilityManualTE, _
                                     lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax, _
                                     btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityTaxRate, CalcTab, chkCalcSubsystemFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcSubsystemFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcSubsystemFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcSubsystemFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcSubsystemFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcSubsystemFacilityRegion <> cmbCalcSubsystemFacilityRegion.Text Then
            Call LoadFacilitySystems(-1, SubsystemCategoryID, True, _
                                     ActivityManufacturing, cmbCalcSubsystemFacilityType, cmbCalcSubsystemFacilityRegion, cmbCalcSubsystemFacilitySystem, cmbCalcSubsystemFacilityorArray, _
                                     lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityTaxRate, _
                                     lblCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualME, _
                                     lblCalcSubsystemFacilityManualTE, txtCalcSubsystemFacilityManualTE, _
                                     lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax, _
                                     lblCalcSubsystemFacilityDefault, btnCalcSubsystemFacilitySave, CalcTab, chkCalcSubsystemFacilityIncludeUsage)
            Call cmbCalcSubsystemFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityTaxRate, _
                             lblCalcSubsystemFacilityManualME, lblCalcSubsystemFacilityManualTE, _
                             txtCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualTE, _
                             lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax)
            CalcSubsystemFacilityLoaded = False
        End If
    End Sub

    Private Sub cmbCalcSubsystemFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcSubsystemFacilitySystem.DropDown
        If Not CalcSubsystemFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcSubsystemFacilitySystem = cmbCalcSubsystemFacilitySystem.Text
            Call LoadFacilitySystems(-1, SubsystemCategoryID, False, _
                                     ActivityManufacturing, cmbCalcSubsystemFacilityType, cmbCalcSubsystemFacilityRegion, cmbCalcSubsystemFacilitySystem, cmbCalcSubsystemFacilityorArray, _
                                     lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityTaxRate, _
                                     lblCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualME, _
                                     lblCalcSubsystemFacilityManualTE, txtCalcSubsystemFacilityManualTE, _
                                     lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax, _
                                     lblCalcSubsystemFacilityDefault, btnCalcSubsystemFacilitySave, CalcTab, chkCalcSubsystemFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcSubsystemFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcSubsystemFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcSubsystemFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcSubsystemFacilitySystem.SelectedIndexChanged
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcSubsystemFacilitySystem <> cmbCalcSubsystemFacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(-1, SubsystemCategoryID, False, _
                                ActivityManufacturing, cmbCalcSubsystemFacilityType, cmbCalcSubsystemFacilityRegion, cmbCalcSubsystemFacilitySystem, cmbCalcSubsystemFacilityorArray, _
                                lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityDefault, _
                                lblCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualME, _
                                lblCalcSubsystemFacilityManualTE, txtCalcSubsystemFacilityManualTE, _
                                lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax, _
                                btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityTaxRate, CalcTab, _
                                chkCalcSubsystemFacilityIncludeUsage, Nothing, Nothing, Autoload, chkCalcSubsystemFacilityIncludeUsage.Checked)

            Call cmbCalcSubsystemFacilityorArray.Focus()
            If Autoload Then
                CalcSubsystemFacilitiesLoaded = True
            Else
                CalcSubsystemFacilitiesLoaded = False
            End If
            PreviousCalcSubsystemFacilitySystem = cmbCalcSubsystemFacilitySystem.Text
        End If

    End Sub

    Private Sub cmbCalcSubsystemFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcSubsystemFacilityorArray.DropDown
        If Not CalcSubsystemFacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(-1, SubsystemCategoryID, False, _
                                ActivityManufacturing, cmbCalcSubsystemFacilityType, cmbCalcSubsystemFacilityRegion, cmbCalcSubsystemFacilitySystem, cmbCalcSubsystemFacilityorArray, _
                                lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityDefault, _
                                lblCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualME, _
                                lblCalcSubsystemFacilityManualTE, txtCalcSubsystemFacilityManualTE, _
                                lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax, _
                                btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityTaxRate, CalcTab, _
                                chkCalcSubsystemFacilityIncludeUsage, Nothing, Nothing, Nothing, chkCalcSubsystemFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcSubsystemFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcSubsystemFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcSubsystemFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcSubsystemFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcSubsystemFacilityEquipment <> cmbCalcSubsystemFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(IndustryType.SubsystemManufacturing, _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, -1, SubsystemCategoryID, _
                                      ActivityManufacturing, cmbCalcSubsystemFacilityType.Text, cmbCalcSubsystemFacilityorArray.Text, _
                                      cmbCalcSubsystemFacilityRegion, cmbCalcSubsystemFacilitySystem, cmbCalcSubsystemFacilityorArray, _
                                      lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityDefault, _
                                      lblCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualME, _
                                      lblCalcSubsystemFacilityManualTE, txtCalcSubsystemFacilityManualTE, _
                                      lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax, _
                                      btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityTaxRate, _
                                      chkCalcSubsystemFacilityIncludeUsage, Nothing, Nothing, CalcTab, CalcSubsystemFacilityLoaded, chkCalcSubsystemFacilityIncludeUsage.Checked)

            If txtCalcSubsystemFacilityManualME.Visible Then
                Call txtCalcSubsystemFacilityManualME.Focus()
            End If

            PreviousCalcSubsystemFacilityEquipment = cmbCalcSubsystemFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcSubsystemFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcSubsystemFacilitySave.Click

        SelectedCalcSubsystemManufacturingFacility.IncludeActivityUsage = chkCalcSubsystemFacilityIncludeUsage.Checked
        Call SelectedCalcSubsystemManufacturingFacility.SaveFacility(CalcTab)
        Call UpdateMMTMTaxDataforOutpost(SelectedCalcSubsystemManufacturingFacility, IndustryActivities.Manufacturing)
        DefaultCalcSubsystemManufacturingFacility = CType(SelectedCalcSubsystemManufacturingFacility.Clone, IndustryFacility)

        lblCalcSubsystemFacilityDefault.Visible = True
        ' They just saved it
        btnCalcSubsystemFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcSubsystemFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcSubsystemFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcSubsystemFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcSubsystemFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcSubsystemFacilityManualME, SelectedCalcSubsystemManufacturingFacility, _
                                      cmbCalcSubsystemFacilityType, btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityDefault)
    End Sub

    Private Sub txtCalcSubsystemFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcSubsystemFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcSubsystemFacilityManualME, cmbCalcSubsystemFacilityType, SelectedCalcSubsystemManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcSubsystemFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcSubsystemFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcSubsystemFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcSubsystemFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcSubsystemFacilityManualTE, SelectedCalcSubsystemManufacturingFacility, _
                                      cmbCalcSubsystemFacilityType, btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityDefault)
    End Sub

    Private Sub txtCalcSubsystemFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcSubsystemFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcSubsystemFacilityManualTE, cmbCalcSubsystemFacilityType, SelectedCalcSubsystemManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcSubsystemFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcSubsystemFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcSubsystemFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcSubsystemFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcSubsystemFacilityManualTax, SelectedCalcSubsystemManufacturingFacility, _
                                      cmbCalcSubsystemFacilityType, btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityDefault)
    End Sub

    Private Sub txtCalcSubsystemFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcSubsystemFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcSubsystemFacilityManualTax, cmbCalcSubsystemFacilityType, SelectedCalcSubsystemManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcSubsystemFacilityIncludeCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcSubsystemFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityManufacturing, -1, SubsystemCategoryID, cmbCalcSubsystemFacilityType.Text), _
                                                     chkCalcSubsystemFacilityIncludeUsage, CalcTab, cmbCalcSubsystemFacilityType.Text, _
                                                     cmbCalcSubsystemFacilityorArray, lblCalcSubsystemFacilityDefault, btnCalcSubsystemFacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    ' CalcBoosterFacility functions
    Private Sub cmbCalcBoosterFacilityType_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcBoosterFacilityType.DropDown
        PreviousCalcBoosterFacilityType = cmbCalcBoosterFacilityType.Text
    End Sub

    Private Sub cmbCalcBoosterFacilityType_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcBoosterFacilityType.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcBoosterFacilityType_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcBoosterFacilityType.SelectedIndexChanged
        ' Don't do anything if it's the same as the old type
        If PreviousCalcBoosterFacilityType <> cmbCalcBoosterFacilityType.Text Then
            If Not LoadingFacilityTypes And Not FirstLoad Then
                Call LoadFacilityRegions(BoosterGroupID, -1, True, _
                                         ActivityManufacturing, cmbCalcBoosterFacilityType, cmbCalcBoosterFacilityRegion, cmbCalcBoosterFacilitySystem, cmbCalcBoosterFacilityorArray, _
                                         lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityDefault, _
                                         lblCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualME, _
                                         lblCalcBoosterFacilityManualTE, txtCalcBoosterFacilityManualTE, _
                                         lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax, _
                                         btnCalcBoosterFacilitySave, lblCalcBoosterFacilityTaxRate, CalcTab, chkCalcBoosterFacilityIncludeUsage)
                Call cmbCalcBoosterFacilityRegion.Focus()
            End If

            ' Anytime this changes, set all the other ME/TE boxes to not viewed
            Call HideFacilityBonusBoxes(lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityTaxRate, _
                                        lblCalcBoosterFacilityManualME, lblCalcBoosterFacilityManualTE, _
                                        txtCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualTE, _
                                        lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax)
            CalcBoosterFacilityLoaded = False
            PreviousCalcBoosterFacilityType = cmbCalcBoosterFacilityType.Text
        End If
    End Sub

    Private Sub cmbCalcBoosterFacilityRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcBoosterFacilityRegion.DropDown
        If Not FirstLoad And Not CalcBoosterFacilityRegionsLoaded Then
            ' Save the current
            PreviousCalcBoosterFacilityRegion = cmbCalcBoosterFacilityRegion.Text
            Call LoadFacilityRegions(BoosterGroupID, -1, False, _
                                     ActivityManufacturing, cmbCalcBoosterFacilityType, cmbCalcBoosterFacilityRegion, cmbCalcBoosterFacilitySystem, cmbCalcBoosterFacilityorArray, _
                                     lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityDefault, _
                                     lblCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualME, _
                                     lblCalcBoosterFacilityManualTE, txtCalcBoosterFacilityManualTE, _
                                     lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax, _
                                     btnCalcBoosterFacilitySave, lblCalcBoosterFacilityTaxRate, CalcTab, chkCalcBoosterFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcBoosterFacilityRegion_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcBoosterFacilityRegion.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcBoosterFacilityRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcBoosterFacilityRegion.SelectedIndexChanged
        If Not LoadingFacilityRegions And Not FirstLoad And PreviousCalcBoosterFacilityRegion <> cmbCalcBoosterFacilityRegion.Text Then
            Call LoadFacilitySystems(BoosterGroupID, -1, True, _
                                     ActivityManufacturing, cmbCalcBoosterFacilityType, cmbCalcBoosterFacilityRegion, cmbCalcBoosterFacilitySystem, cmbCalcBoosterFacilityorArray, _
                                     lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityTaxRate, _
                                     lblCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualME, _
                                     lblCalcBoosterFacilityManualTE, txtCalcBoosterFacilityManualTE, _
                                     lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax, _
                                     lblCalcBoosterFacilityDefault, btnCalcBoosterFacilitySave, CalcTab, chkCalcBoosterFacilityIncludeUsage)
            Call cmbCalcBoosterFacilitySystem.Focus()
            Call HideFacilityBonusBoxes(lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityTaxRate, _
                                        lblCalcBoosterFacilityManualME, lblCalcBoosterFacilityManualTE, _
                                        txtCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualTE, _
                                        lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax)
            CalcBoosterFacilityLoaded = False
        End If
    End Sub

    Private Sub cmbCalcBoosterFacilitySystem_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcBoosterFacilitySystem.DropDown
        If Not CalcBoosterFacilitySystemsLoaded And Not FirstLoad Then
            PreviousCalcBoosterFacilitySystem = cmbCalcBoosterFacilitySystem.Text
            Call LoadFacilitySystems(BoosterGroupID, -1, False, _
                                     ActivityManufacturing, cmbCalcBoosterFacilityType, cmbCalcBoosterFacilityRegion, cmbCalcBoosterFacilitySystem, cmbCalcBoosterFacilityorArray, _
                                     lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityTaxRate, _
                                     lblCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualME, _
                                     lblCalcBoosterFacilityManualTE, txtCalcBoosterFacilityManualTE, _
                                     lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax, _
                                     lblCalcBoosterFacilityDefault, btnCalcBoosterFacilitySave, CalcTab, chkCalcBoosterFacilityIncludeUsage)
        End If
    End Sub

    Private Sub cmbCalcBoosterFacilitySystem_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcBoosterFacilitySystem.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcBoosterFacilitySystem_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcBoosterFacilitySystem.SelectedIndexChanged
        Dim Autoload As Boolean = False

        If Not LoadingFacilitySystems And Not FirstLoad And PreviousCalcBoosterFacilitySystem <> cmbCalcBoosterFacilitySystem.Text Then

            ' Load the facility
            Call LoadFacilities(BoosterGroupID, -1, False, _
                                ActivityManufacturing, cmbCalcBoosterFacilityType, cmbCalcBoosterFacilityRegion, cmbCalcBoosterFacilitySystem, cmbCalcBoosterFacilityorArray, _
                                lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityDefault, _
                                lblCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualME, _
                                lblCalcBoosterFacilityManualTE, txtCalcBoosterFacilityManualTE, _
                                lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax, _
                                btnCalcBoosterFacilitySave, lblCalcBoosterFacilityTaxRate, CalcTab, _
                                chkCalcBoosterFacilityIncludeUsage, Nothing, Nothing, Autoload, chkCalcBoosterFacilityIncludeUsage.Checked)

            Call cmbCalcBoosterFacilityorArray.Focus()
            If Autoload Then
                CalcBoosterFacilitiesLoaded = True
            Else
                CalcBoosterFacilitiesLoaded = False
            End If
            PreviousCalcBoosterFacilitySystem = cmbCalcBoosterFacilitySystem.Text
        End If

    End Sub

    Private Sub cmbCalcBoosterFacilityorArray_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcBoosterFacilityorArray.DropDown
        If Not CalcBoosterFacilitiesLoaded And Not FirstLoad Then
            Call LoadFacilities(BoosterGroupID, -1, False, _
                                ActivityManufacturing, cmbCalcBoosterFacilityType, cmbCalcBoosterFacilityRegion, cmbCalcBoosterFacilitySystem, cmbCalcBoosterFacilityorArray, _
                                lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityDefault, _
                                lblCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualME, _
                                lblCalcBoosterFacilityManualTE, txtCalcBoosterFacilityManualTE, _
                                lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax, _
                                btnCalcBoosterFacilitySave, lblCalcBoosterFacilityTaxRate, CalcTab, _
                                chkCalcBoosterFacilityIncludeUsage, Nothing, Nothing, Nothing, chkCalcBoosterFacilityIncludeUsage.Checked)
        End If
    End Sub

    Private Sub cmbCalcBoosterFacilityorArray_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcBoosterFacilityorArray.KeyPress
        e.Handled = True
    End Sub

    Private Sub cmbCalcBoosterFacilityArrayName_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcBoosterFacilityorArray.SelectedIndexChanged

        If Not LoadingFacilities And Not FirstLoad And PreviousCalcBoosterFacilityEquipment <> cmbCalcBoosterFacilityorArray.Text Then
            ' We won't have any MM or TM to send, so just do default
            Dim Defaults As New ProgramSettings

            Call DisplayFacilityBonus(IndustryType.BoosterManufacturing, _
                                      Defaults.FacilityDefaultMM, Defaults.FacilityDefaultTM, Defaults.FacilityDefaultTax, BoosterGroupID, -1, _
                                      ActivityManufacturing, cmbCalcBoosterFacilityType.Text, cmbCalcBoosterFacilityorArray.Text, _
                                      cmbCalcBoosterFacilityRegion, cmbCalcBoosterFacilitySystem, cmbCalcBoosterFacilityorArray, _
                                      lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityDefault, _
                                      lblCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualME, _
                                      lblCalcBoosterFacilityManualTE, txtCalcBoosterFacilityManualTE, _
                                      lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax, _
                                      btnCalcBoosterFacilitySave, lblCalcBoosterFacilityTaxRate, _
                                      chkCalcBoosterFacilityIncludeUsage, Nothing, Nothing, CalcTab, CalcBoosterFacilityLoaded, chkCalcBoosterFacilityIncludeUsage.Checked)

            If txtCalcBoosterFacilityManualME.Visible Then
                Call txtCalcBoosterFacilityManualME.Focus()
            End If

            PreviousCalcBoosterFacilityEquipment = cmbCalcBoosterFacilityorArray.Text

        End If
    End Sub

    Private Sub btnCalcBoosterFacilitySave_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcBoosterFacilitySave.Click

        SelectedCalcBoosterManufacturingFacility.IncludeActivityUsage = chkCalcBoosterFacilityIncludeUsage.Checked
        Call SelectedCalcBoosterManufacturingFacility.SaveFacility(CalcTab)
        Call UpdateMMTMTaxDataforOutpost(SelectedCalcBoosterManufacturingFacility, IndustryActivities.Manufacturing)
        DefaultCalcBoosterManufacturingFacility = CType(SelectedCalcBoosterManufacturingFacility.Clone, IndustryFacility)

        lblCalcBoosterFacilityDefault.Visible = True
        ' They just saved it
        btnCalcBoosterFacilitySave.Enabled = False

        MsgBox("Default Facility Saved", vbInformation, Application.ProductName)

    End Sub

    Private Sub txtCalcBoosterFacilityManualME_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcBoosterFacilityManualME.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcBoosterFacilityManualME_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcBoosterFacilityManualME.KeyUp
        Call OutpostMETETaxText_KeyUp("ME", txtCalcBoosterFacilityManualME, SelectedCalcBoosterManufacturingFacility, _
                                      cmbCalcBoosterFacilityType, btnCalcBoosterFacilitySave, lblCalcBoosterFacilityDefault)
    End Sub

    Private Sub txtCalcBoosterFacilityManualME_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcBoosterFacilityManualME.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcBoosterFacilityManualME, cmbCalcBoosterFacilityType, SelectedCalcBoosterManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcBoosterFacilityManualTE_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcBoosterFacilityManualTE.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcBoosterFacilityManualTE_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcBoosterFacilityManualTE.KeyUp
        Call OutpostMETETaxText_KeyUp("TE", txtCalcBoosterFacilityManualTE, SelectedCalcBoosterManufacturingFacility, _
                                      cmbCalcBoosterFacilityType, btnCalcBoosterFacilitySave, lblCalcBoosterFacilityDefault)
    End Sub

    Private Sub txtCalcBoosterFacilityManualTE_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcBoosterFacilityManualTE.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcBoosterFacilityManualTE, cmbCalcBoosterFacilityType, SelectedCalcBoosterManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub txtCalcBoosterFacilityManualTax_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcBoosterFacilityManualTax.KeyPress
        Call OutpostMETETaxText_KeyPress(e)
    End Sub

    Private Sub txtCalcBoosterFacilityManualTax_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCalcBoosterFacilityManualTax.KeyUp
        Call OutpostMETETaxText_KeyUp("Tax", txtCalcBoosterFacilityManualTax, SelectedCalcBoosterManufacturingFacility, _
                                      cmbCalcBoosterFacilityType, btnCalcBoosterFacilitySave, lblCalcBoosterFacilityDefault)
    End Sub

    Private Sub txtCalcBoosterFacilityManualTax_LostFocus(sender As Object, e As System.EventArgs) Handles txtCalcBoosterFacilityManualTax.LostFocus
        Call OutpostMETETaxText_LostFocus(txtCalcBoosterFacilityManualTax, cmbCalcBoosterFacilityType, SelectedCalcBoosterManufacturingFacility.MaterialMultiplier, False)
    End Sub

    Private Sub chkCalcBoosterFacilityIncludeCosts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcBoosterFacilityIncludeUsage.CheckedChanged
        If Not FirstLoad Then
            Call SetDefaultFacilitybyCheck(GetProductionType(ActivityManufacturing, BoosterGroupID, -1, cmbCalcBoosterFacilityType.Text), _
                                                     chkCalcBoosterFacilityIncludeUsage, CalcTab, cmbCalcBoosterFacilityType.Text, _
                                                     cmbCalcBoosterFacilityorArray, lblCalcBoosterFacilityDefault, btnCalcBoosterFacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    ' Team functions
    Private Sub btnCalcSaveManufacturingTeam_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcSaveManufacturingTeam.Click

        SelectedCalcManufacturingTeam.SaveTeam(TeamType.Manufacturing, CalcTab)
        lblCalcManufacturingTeamDefault.Visible = True
        btnCalcSaveManufacturingTeam.Enabled = False

        MsgBox("Manufacturing Team Saved", vbInformation, Application.ProductName)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcManufacturingTeam_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcManufacturingTeam.DropDown
        ' If you drop down, don't show the text window
        cmbCalcManufacturingTeam.AutoCompleteMode = AutoCompleteMode.None
        cmbCalcManufacturingTeam.AutoCompleteSource = AutoCompleteSource.None
        ComboMenuDown = True

        If Not CalcManufacturingTeamComboLoaded Then
            Call LoadTeamCombo(False, cmbCalcManufacturingTeam, ActivityManufacturing, txtCalcManufacturingTeamBonus, lblCalcManufacturingTeamDefault, btnCalcSaveManufacturingTeam, CalcTab)
            CalcManufacturingTeamComboLoaded = True
        End If

    End Sub

    Private Sub cmbCalcManufacturingTeam_DropDownClosed(sender As Object, e As System.EventArgs) Handles cmbCalcManufacturingTeam.DropDownClosed
        ' If it closes up, re-enable autocomplete
        Application.DoEvents()
        cmbCalcManufacturingTeam.AutoCompleteMode = AutoCompleteMode.SuggestAppend
        cmbCalcManufacturingTeam.AutoCompleteSource = AutoCompleteSource.ListItems
        ComboMenuDown = False
    End Sub

    Private Sub cmbCalcManufacturingTeam_GotFocus(sender As Object, e As System.EventArgs) Handles cmbCalcManufacturingTeam.GotFocus
        Call cmbCalcManufacturingTeam.SelectAll()
    End Sub

    Private Sub cmbCalcManufacturingTeam_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cmbCalcManufacturingTeam.KeyDown
        ' If they hit the arrow keys when the combo is dropped down (just in the combo it won't throw this)
        If e.KeyValue = Keys.Up Or e.KeyValue = Keys.Down Then
            ComboBoxArrowKeys = True
        Else
            ComboBoxArrowKeys = False
        End If

        ' If they select enter, then load the team if the text is in the combo
        If e.KeyValue = Keys.Enter Then
            Call LoadTeam(cmbCalcManufacturingTeam.SelectedItem.ToString, ActivityManufacturing, txtCalcManufacturingTeamBonus, lblCalcManufacturingTeamDefault, btnCalcSaveManufacturingTeam, CalcTab, Nothing)
        End If
    End Sub

    Private Sub cmbCalcManufacturingTeam_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles cmbCalcManufacturingTeam.MouseWheel
        ' Only set mouse boolean when the combo isn't dropped down since users might want to use the wheel and click to select
        If ComboMenuDown Then
            MouseWheelSelection = False
        Else
            MouseWheelSelection = True
        End If
    End Sub

    Private Sub cmbCalcManufacturingTeam_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcManufacturingTeam.SelectedIndexChanged
        Call LoadTeam(cmbCalcManufacturingTeam.SelectedItem.ToString, ActivityManufacturing, txtCalcManufacturingTeamBonus, lblCalcManufacturingTeamDefault, btnCalcSaveManufacturingTeam, CalcTab, Nothing)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcManufacturingTeam_SelectionChangeCommitted(sender As Object, e As System.EventArgs) Handles cmbCalcManufacturingTeam.SelectionChangeCommitted
        If Not MouseWheelSelection And Not ComboBoxArrowKeys Then
            Call ResetRefresh()
            Call LoadTeam(cmbCalcManufacturingTeam.SelectedItem.ToString, ActivityManufacturing, txtCalcManufacturingTeamBonus, lblCalcManufacturingTeamDefault, btnCalcSaveManufacturingTeam, CalcTab, Nothing)
        End If
    End Sub

    Private Sub btnCalcSaveComponentManufacturingTeam_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcSaveComponentManufacturingTeam.Click

        SelectedCalcComponentManufacturingTeam.SaveTeam(TeamType.ComponentManufacturing, CalcTab)
        lblCalcComponentManufacturingTeamDefault.Visible = True
        btnCalcSaveComponentManufacturingTeam.Enabled = False

        MsgBox("Component Manufacturing Team Saved", vbInformation, Application.ProductName)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcComponentManufacturingTeam_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcComponentManufacturingTeam.DropDown
        ' If you drop down, don't show the text window
        cmbCalcComponentManufacturingTeam.AutoCompleteMode = AutoCompleteMode.None
        cmbCalcComponentManufacturingTeam.AutoCompleteSource = AutoCompleteSource.None
        ComboMenuDown = True

        If Not CalcComponentManufacturingTeamComboLoaded Then
            Call LoadTeamCombo(False, cmbCalcComponentManufacturingTeam, ActivityComponentManufacturing, txtCalcComponentManufacturingTeamBonus, lblCalcComponentManufacturingTeamDefault, btnCalcSaveComponentManufacturingTeam, CalcTab, Nothing)
            CalcComponentManufacturingTeamComboLoaded = True
        End If

    End Sub

    Private Sub cmbCalcComponentManufacturingTeam_DropDownClosed(sender As Object, e As System.EventArgs) Handles cmbCalcComponentManufacturingTeam.DropDownClosed
        ' If it closes up, re-enable autocomplete
        Application.DoEvents()
        cmbCalcComponentManufacturingTeam.AutoCompleteMode = AutoCompleteMode.SuggestAppend
        cmbCalcComponentManufacturingTeam.AutoCompleteSource = AutoCompleteSource.ListItems
        ComboMenuDown = False
    End Sub

    Private Sub cmbCalcComponentManufacturingTeam_GotFocus(sender As Object, e As System.EventArgs) Handles cmbCalcComponentManufacturingTeam.GotFocus
        Call cmbCalcComponentManufacturingTeam.SelectAll()
    End Sub

    Private Sub cmbCalcComponentManufacturingTeam_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cmbCalcComponentManufacturingTeam.KeyDown
        ' If they hit the arrow keys when the combo is dropped down (just in the combo it won't throw this)
        If e.KeyValue = Keys.Up Or e.KeyValue = Keys.Down Then
            ComboBoxArrowKeys = True
        Else
            ComboBoxArrowKeys = False
        End If

        ' If they select enter, then load the team if the text is in the combo
        If e.KeyValue = Keys.Enter Then
            Call LoadTeam(cmbCalcComponentManufacturingTeam.SelectedItem.ToString, ActivityComponentManufacturing, txtCalcComponentManufacturingTeamBonus, lblCalcComponentManufacturingTeamDefault, btnCalcSaveComponentManufacturingTeam, CalcTab, Nothing)
        End If
    End Sub

    Private Sub cmbCalcComponentManufacturingTeam_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles cmbCalcComponentManufacturingTeam.MouseWheel
        ' Only set mouse boolean when the combo isn't dropped down since users might want to use the wheel and click to select
        If ComboMenuDown Then
            MouseWheelSelection = False
        Else
            MouseWheelSelection = True
        End If
    End Sub

    Private Sub cmbCalcComponentManufacturingTeam_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcComponentManufacturingTeam.SelectedIndexChanged
        Call LoadTeam(cmbCalcComponentManufacturingTeam.SelectedItem.ToString, ActivityComponentManufacturing, txtCalcComponentManufacturingTeamBonus, lblCalcComponentManufacturingTeamDefault, btnCalcSaveComponentManufacturingTeam, CalcTab, Nothing)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcComponentManufacturingTeam_SelectionChangeCommitted(sender As Object, e As System.EventArgs) Handles cmbCalcComponentManufacturingTeam.SelectionChangeCommitted
        If Not MouseWheelSelection And Not ComboBoxArrowKeys Then
            Call LoadTeam(cmbCalcComponentManufacturingTeam.SelectedItem.ToString, ActivityComponentManufacturing, txtCalcComponentManufacturingTeamBonus, lblCalcComponentManufacturingTeamDefault, btnCalcSaveComponentManufacturingTeam, CalcTab, Nothing)
            Call ResetRefresh()
        End If
    End Sub

    ' Save the team to xml and reset the default if not set
    Private Sub btnCalcSaveInventionTeam_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcSaveInventionTeam.Click

        SelectedCalcInventionTeam.SaveTeam(TeamType.Invention, CalcTab)
        lblCalcInventionTeamDefault.Visible = True
        btnCalcSaveInventionTeam.Enabled = False

        MsgBox("Invention Team Saved", vbInformation, Application.ProductName)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcInventionTeam_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcInventionTeam.DropDown
        ' If you drop down, don't show the text window
        cmbCalcInventionTeam.AutoCompleteMode = AutoCompleteMode.None
        cmbCalcInventionTeam.AutoCompleteSource = AutoCompleteSource.None
        ComboMenuDown = True

        If Not CalcInventionTeamComboLoaded Then
            Call LoadTeamCombo(False, cmbCalcInventionTeam, ActivityInvention, txtCalcInventionTeamBonus, lblCalcInventionTeamDefault, btnCalcSaveInventionTeam, CalcTab)
            CalcInventionTeamComboLoaded = True
        End If

    End Sub

    Private Sub cmbCalcInventionTeam_DropDownClosed(sender As Object, e As System.EventArgs) Handles cmbCalcInventionTeam.DropDownClosed
        ' If it closes up, re-enable autocomplete
        cmbCalcInventionTeam.AutoCompleteMode = AutoCompleteMode.SuggestAppend
        cmbCalcInventionTeam.AutoCompleteSource = AutoCompleteSource.ListItems
        ComboMenuDown = False
    End Sub

    Private Sub cmbCalcInventionTeam_GotFocus(sender As Object, e As System.EventArgs) Handles cmbCalcInventionTeam.GotFocus
        Call cmbCalcInventionTeam.SelectAll()
    End Sub

    Private Sub cmbCalcInventionTeam_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cmbCalcInventionTeam.KeyDown
        ' If they hit the arrow keys when the combo is dropped down (just in the combo it won't throw this)
        If e.KeyValue = Keys.Up Or e.KeyValue = Keys.Down Then
            ComboBoxArrowKeys = True
        Else
            ComboBoxArrowKeys = False
        End If

        ' If they select enter, then load the team if the text is in the combo
        If e.KeyValue = Keys.Enter Then
            Call LoadTeam(cmbCalcInventionTeam.SelectedItem.ToString, ActivityInvention, txtCalcInventionTeamBonus, lblCalcInventionTeamDefault, btnCalcSaveInventionTeam, CalcTab, Nothing)
        End If
    End Sub

    Private Sub cmbCalcInventionTeam_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles cmbCalcInventionTeam.MouseWheel
        ' Only set mouse boolean when the combo isn't dropped down since users might want to use the wheel and click to select
        If ComboMenuDown Then
            MouseWheelSelection = False
        Else
            MouseWheelSelection = True
        End If
    End Sub

    Private Sub cmbCalcInventionTeam_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcInventionTeam.SelectedIndexChanged
        Call LoadTeam(cmbCalcInventionTeam.SelectedItem.ToString, ActivityInvention, txtCalcInventionTeamBonus, lblCalcInventionTeamDefault, btnCalcSaveInventionTeam, CalcTab, Nothing)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcInventionTeam_SelectionChangeCommitted(sender As Object, e As System.EventArgs) Handles cmbCalcInventionTeam.SelectionChangeCommitted
        If Not MouseWheelSelection And Not ComboBoxArrowKeys Then
            Call ResetRefresh()
            Call LoadTeam(cmbCalcInventionTeam.SelectedItem.ToString, ActivityInvention, txtCalcInventionTeamBonus, lblCalcInventionTeamDefault, btnCalcSaveInventionTeam, CalcTab, Nothing)
        End If
    End Sub

    ' Save the team to xml and reset the default if not set
    Private Sub btnCalcSaveCopyTeam_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcSaveCopyTeam.Click

        SelectedCalcCopyTeam.SaveTeam(TeamType.Copy, CalcTab)
        lblCalcCopyTeamDefault.Visible = True
        btnCalcSaveCopyTeam.Enabled = False

        MsgBox("Copy Team Saved", vbInformation, Application.ProductName)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcCopyTeam_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcCopyTeam.DropDown
        ' If you drop down, don't show the text window
        cmbCalcCopyTeam.AutoCompleteMode = AutoCompleteMode.None
        cmbCalcCopyTeam.AutoCompleteSource = AutoCompleteSource.None
        ComboMenuDown = True

        If Not CalcCopyTeamComboLoaded Then
            Call LoadTeamCombo(False, cmbCalcCopyTeam, ActivityCopying, txtCalcCopyTeamBonus, lblCalcCopyTeamDefault, btnCalcSaveCopyTeam, CalcTab)
            CalcCopyTeamComboLoaded = True
        End If

    End Sub

    Private Sub cmbCalcCopyTeam_DropDownClosed(sender As Object, e As System.EventArgs) Handles cmbCalcCopyTeam.DropDownClosed
        ' If it closes up, re-enable autocomplete
        cmbCalcCopyTeam.AutoCompleteMode = AutoCompleteMode.SuggestAppend
        cmbCalcCopyTeam.AutoCompleteSource = AutoCompleteSource.ListItems
        ComboMenuDown = False
    End Sub

    Private Sub cmbCalcCopyTeam_GotFocus(sender As Object, e As System.EventArgs) Handles cmbCalcCopyTeam.GotFocus
        Call cmbCalcCopyTeam.SelectAll()
    End Sub

    Private Sub cmbCalcCopyTeam_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cmbCalcCopyTeam.KeyDown
        ' If they hit the arrow keys when the combo is dropped down (just in the combo it won't throw this)
        If e.KeyValue = Keys.Up Or e.KeyValue = Keys.Down Then
            ComboBoxArrowKeys = True
        Else
            ComboBoxArrowKeys = False
        End If

        ' If they select enter, then load the team if the text is in the combo
        If e.KeyValue = Keys.Enter Then
            Call LoadTeam(cmbCalcCopyTeam.SelectedItem.ToString, ActivityCopying, txtCalcCopyTeamBonus, lblCalcCopyTeamDefault, btnCalcSaveCopyTeam, CalcTab, Nothing)
        End If
    End Sub

    Private Sub cmbCalcCopyTeam_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles cmbCalcCopyTeam.MouseWheel
        ' Only set mouse boolean when the combo isn't dropped down since users might want to use the wheel and click to select
        If ComboMenuDown Then
            MouseWheelSelection = False
        Else
            MouseWheelSelection = True
        End If
    End Sub

    Private Sub cmbCalcCopyTeam_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcCopyTeam.SelectedIndexChanged
        Call LoadTeam(cmbCalcCopyTeam.SelectedItem.ToString, ActivityCopying, txtCalcCopyTeamBonus, lblCalcCopyTeamDefault, btnCalcSaveCopyTeam, CalcTab, Nothing)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcCopyTeam_SelectionChangeCommitted(sender As Object, e As System.EventArgs) Handles cmbCalcCopyTeam.SelectionChangeCommitted
        If Not MouseWheelSelection And Not ComboBoxArrowKeys Then
            Call ResetRefresh()
            Call LoadTeam(cmbCalcCopyTeam.SelectedItem.ToString, ActivityCopying, txtCalcCopyTeamBonus, lblCalcCopyTeamDefault, btnCalcSaveCopyTeam, CalcTab, Nothing)
        End If
    End Sub

    Private Sub txtBPTeamBonus_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtBPTeamBonus.KeyPress
        e.Handled = True
    End Sub

    Private Sub txtCalcManufacturingTeamBonus_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcManufacturingTeamBonus.KeyPress
        e.Handled = True
    End Sub

    Private Sub txtCalcInventionTeamBonus_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcInventionTeamBonus.KeyPress
        e.Handled = True
    End Sub

    Private Sub txtCalcCopyTeamBonus_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcCopyTeamBonus.KeyPress
        e.Handled = True
    End Sub

    Private Sub chkCalcIncludeNoTeamManufacturing_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcIncludeNoTeamManufacturing.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIncludeNoTeamComponents_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcIncludeNoTeamComponents.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIncludeNoTeamCopy_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcIncludeNoTeamCopy.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIncludeNoTeamInvention_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcIncludeNoTeamInvention.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub CheckRelicCalcChecks()
        Dim i As Integer

        If chkCalcT3.Checked Then
            If Not FirstLoad Then
                For i = 1 To CalcRelicCheckboxes.Count - 1
                    If CalcRelicCheckboxes(i).Checked Then
                        Exit Sub
                    End If
                Next

                ' One wasn't checked, display message and check wrecked
                MsgBox("Must select at least one relic type", vbExclamation, Application.ProductName)
                chkCalcRERelic1.Checked = True
            End If
        End If

    End Sub

    Private Sub CheckDecryptorChecks()
        Dim i As Integer

        ' If the optimal box is checked, don't show the others
        If chkCalcDecryptor0.Checked Then
            ' Uncheck all the others
            'chkCalcDecryptor1.Checked = False
            'chkCalcDecryptor2.Checked = False
            'chkCalcDecryptor3.Checked = False
            'chkCalcDecryptor4.Checked = False
            'chkCalcDecryptor5.Checked = False
            'chkCalcDecryptor6.Checked = False
            'chkCalcDecryptor7.Checked = False
            'chkCalcDecryptor8.Checked = False
            'chkCalcDecryptor9.Checked = False

        End If

        ' Only check decryptor checks if they have T2 bp's checked
        If chkCalcT2.Checked Then
            If Not FirstLoad Then
                For i = 1 To CalcDecryptorCheckBoxes.Count - 1
                    If CalcDecryptorCheckBoxes(i).Checked Then
                        GoTo CheckTechs
                    End If
                Next

                ' One wasn't checked, display message and check wrecked
                MsgBox("Must select at least one decryptor type", vbExclamation, Application.ProductName)
                chkCalcDecryptor1.Checked = True
            End If
        End If

CheckTechs:

        If chkCalcDecryptorforT2.Enabled And chkCalcDecryptorforT3.Enabled Then
            ' If both enabled, one needs to be checked
            If chkCalcDecryptorforT2.Checked = False And chkCalcDecryptorforT3.Checked = False Then
                MsgBox("Must select Decryptor use Tech", vbExclamation, Application.ProductName)
                chkCalcDecryptorforT2.Checked = True
            End If
        ElseIf chkCalcDecryptorforT2.Enabled Then
            If chkCalcDecryptorforT2.Checked = False Then
                MsgBox("Must select Decryptor use Tech", vbExclamation, Application.ProductName)
                chkCalcDecryptorforT2.Checked = True
            End If
        ElseIf chkCalcDecryptorforT3.Enabled Then
            If chkCalcDecryptorforT3.Checked = False Then
                MsgBox("Must select Decryptor use Tech", vbExclamation, Application.ProductName)
                chkCalcDecryptorforT3.Checked = True
            End If
        End If

    End Sub

    Private Sub txtCalcProdLines_DoubleClick(sender As Object, e As System.EventArgs) Handles txtCalcProdLines.DoubleClick
        ' Enter the max lines we have
        txtCalcProdLines.Text = CStr(MaximumProductionLines)
    End Sub

    Private Sub txtCalcProdLines_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcProdLines.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub txtCalcProdLines_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtCalcProdLines.TextChanged
        Call ResetRefresh()
    End Sub

    Private Sub txtCalcBPs_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcNumBPs.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub txtCalcBPs_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtCalcNumBPs.TextChanged
        Call ResetRefresh()
    End Sub

    Private Sub txtCalcRuns_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtCalcRuns.TextChanged
        Call ResetRefresh()
    End Sub

    Private Sub txtCalcLabLines_DoubleClick(sender As Object, e As System.EventArgs) Handles txtCalcLabLines.DoubleClick
        ' Enter the max lab lines we have
        txtCalcLabLines.Text = CStr(MaximumLaboratoryLines)
    End Sub

    Private Sub txtCalcLabLines_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcLabLines.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub txtCalcLabLines_TextChanged(sender As Object, e As System.EventArgs) Handles txtCalcLabLines.TextChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIgnoreLowSVR_CheckedChanged(sender As System.Object, e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcAvgPriceDuration_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcAvgPriceDuration.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub cmbCalcAvgPriceDuration_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcAvgPriceDuration.SelectedIndexChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIgnoreMinerals_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIgnoreT1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcTaxes_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcTaxes.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcFees_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcFees.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcUsage_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIgnoreRAMS_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIgnoreInvention_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcEstimateCopyCost_CheckedChanged(sender As System.Object, e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIgnoreInvention_CheckedChanged_1(sender As System.Object, e As System.EventArgs) Handles chkCalcIgnoreInvention.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIgnoreMinerals_CheckedChanged_1(sender As System.Object, e As System.EventArgs) Handles chkCalcIgnoreMinerals.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIgnoreT1Item_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcIgnoreT1Item.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub rbtnCalcCompareAll_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnCalcCompareAll.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub txtCalcSVRThreshold_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtCalcSVRThreshold.TextChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcSVRIncludeNull_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcSVRIncludeNull.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub rbtnCalcCompareBuildBuy_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnCalcCompareBuildBuy.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub rbtnCalcCompareRawMats_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnCalcCompareRawMats.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub rbtnCalcCompareComponents_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnCalcCompareComponents.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcShipBPCNoD_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcShipBPCD_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcNonShipBPCNoD_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcNonShipBPCD_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcCanBuild_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcCanBuild.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcCanInvent_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcCanInvent.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcCanRE_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcCanRE.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub txtTempME_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcTempME.KeyPress
        ' Only allow numbers, negative or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedMETEChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub txtTempPE_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtCalcTempTE.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedMETEChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub txtCalcItemFilter_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtCalcItemFilter.TextChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcRERelic1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRERelic1.CheckedChanged
        Call CheckRelicCalcChecks()
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcUseMaxBPCRunsNoRunsDecryptor_CheckedChanged(sender As System.Object, e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcRERelic2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRERelic2.CheckedChanged
        Call CheckRelicCalcChecks()
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcRERelic3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRERelic3.CheckedChanged
        Call CheckRelicCalcChecks()
        Call ResetRefresh()
    End Sub

    Private Sub btnCalcReset_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCalcReset.Click
        FirstManufacturingGridLoad = True ' Reset
        Call InitManufacturingTab()
        ' Load the calc types because it won't get loaded if firstmanufacturinggridload = true
        Call LoadCalcBPTypes()
    End Sub

    Private Sub btnCalcCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        CancelManufacturingCalculate = True
    End Sub

    Private Sub cmbCalcBPTypeFilter_DropDown(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmbCalcBPTypeFilter.DropDown
        If FirstLoadCalcBPTypes Then
            Call LoadCalcBPTypes()
            FirstLoadCalcBPTypes = False
        End If
    End Sub

    Private Sub cmbCalcBPTypeFilter_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmbCalcBPTypeFilter.GotFocus
        Call cmbCalcBPTypeFilter.SelectAll()
    End Sub

    Private Sub cmbCalcBPTypeFilter_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cmbCalcBPTypeFilter.KeyPress
        ' Only let them select a bp by clicking
        Dim i As Integer
        i = 0
    End Sub

    Private Sub cmbCalcBPTypeFilter_SelectedValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmbCalcBPTypeFilter.SelectedValueChanged
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcBPTypeFilter_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbCalcBPTypeFilter.Click
        Call cmbCalcBPTypeFilter.SelectAll()
    End Sub

    Private Sub chkCalcOnlyOwnedBPOInvent_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcT1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcT1.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcT2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcT2.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            EnableDisableT2T3Options()
        End If
    End Sub

    Private Sub chkCalcT3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcT3.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            Call EnableDisableT2T3Options()
        End If
    End Sub

    ' Enables and disables the checks on the screen when T2 or T3 is selected
    Private Sub EnableDisableT2T3Options()

        FirstLoadCalcBPTypes = True
        cmbCalcBPTypeFilter.Text = "All Types"
        Call ResetRefresh()

        ' If checked, show the options, disable if not
        If chkCalcT2.Checked = True Then
            chkCalcCanInvent.Enabled = True
            chkCalcCanInvent.Enabled = True
            chkCalcIncludeT2Owned.Enabled = True
            chkCalcDecryptorforT2.Enabled = True
        Else
            chkCalcCanInvent.Enabled = False
            chkCalcCanInvent.Enabled = False
            chkCalcIncludeT2Owned.Enabled = False
            chkCalcDecryptorforT2.Enabled = False
        End If

        ' If T3 checked, enable T3 options, else disable
        If chkCalcT3.Checked = True Then
            gbCalcRelics.Enabled = True
            chkCalcCanRE.Enabled = True
            chkCalcIncludeT3Owned.Enabled = True
            chkCalcDecryptorforT3.Enabled = True
        Else
            gbCalcRelics.Enabled = False
            chkCalcCanRE.Enabled = False
            chkCalcIncludeT3Owned.Enabled = False
            chkCalcDecryptorforT3.Enabled = False
        End If

        If chkCalcT3.Checked = False And chkCalcT2.Checked = False Then
            gbCalcInvention.Enabled = False
        Else
            gbCalcInvention.Enabled = True
        End If

        ' Auto check if only one option enabled
        If chkCalcDecryptorforT2.Enabled And chkCalcT2.Checked And chkCalcDecryptorforT3.Enabled = False Then
            ' Auto check this
            chkCalcDecryptorforT2.Checked = True
        ElseIf chkCalcDecryptorforT3.Enabled And chkCalcT3.Checked And chkCalcDecryptorforT2.Enabled = False Then
            ' Auto check this
            chkCalcDecryptorforT3.Checked = True
        End If

    End Sub

    Private Sub chkCalcT2_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkCalcT2.Click
        Call CheckDecryptorChecks()
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcT3_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkCalcT3.Click
        Call CheckRelicCalcChecks()
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcStoryline_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcStoryline.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcNavyFaction_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcNavyFaction.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcPirateFaction_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcPirateFaction.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcShips_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcShips.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcModules_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcModules.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDrones_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcDrones.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcAmmo_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcAmmo.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcRigs_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRigs.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcComponents_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcComponents.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcStationParts_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcStationParts.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcSubsystems_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcSubsystems.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcStructures_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcStructures.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcBoosters_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcBoosters.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcMisc_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcMisc.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcCelestials_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcCelestials.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDeployables_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcDeployables.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub rbtnCalcBPOwned_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnCalcBPOwned.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            gbCalcIncludeOwned.Enabled = True
            Call ResetRefresh()
        End If
    End Sub

    Private Sub rbtnCalcAllBPs_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles rbtnCalcAllBPs.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            gbCalcIncludeOwned.Enabled = False
            Call ResetRefresh()
        End If
    End Sub

    Private Sub rbtnCalcBPFavorites_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbtnCalcBPFavorites.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            gbCalcIncludeOwned.Enabled = True
            Call ResetRefresh()
        End If
    End Sub

    Private Sub txtCalcItemFilter_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtCalcItemFilter.KeyDown
        'Call ProcessCutCopyPasteSelect(txtCalcItemFilter, e)
        If e.KeyCode = Keys.Enter Then
            Call ResetRefresh()
            Call DisplayManufacturingResults(False)
        End If
    End Sub

    Private Sub btnCalcResetTextSearch_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCalcResetTextSearch.Click
        txtCalcItemFilter.Text = ""
        txtCalcItemFilter.Focus()
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub txtCalcBPCCosts_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedPriceChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            Else
                Call ResetRefresh()
            End If
        End If
    End Sub

    Private Sub chkCalcDecryptor0_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcDecryptor0.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptor1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcDecryptor1.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptor2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcDecryptor2.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptor3_CheckedChanged_1(sender As System.Object, e As System.EventArgs) Handles chkCalcDecryptor3.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptor4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcDecryptor4.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptor5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcDecryptor5.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptor6_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcDecryptor6.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptor7_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcDecryptor7.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptor8_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcDecryptor8.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptor9_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcDecryptor9.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptorforT2_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcDecryptorforT2.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcDecryptorforT3_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcDecryptorforT3.CheckedChanged
        If Not FirstLoad Then
            Call CheckDecryptorChecks()
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcIncludeT2Owned_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcIncludeT2Owned.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcIncludeT3Owned_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcIncludeT3Owned.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcRaceAmarr_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRaceAmarr.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcRaceCaldari_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRaceCaldari.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcRaceGallente_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRaceGallente.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcRaceMinmatar_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRaceMinmatar.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcRacePirate_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRacePirate.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcRaceOther_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkCalcRaceOther.CheckedChanged
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcSVRRegion_DropDown(sender As Object, e As System.EventArgs) Handles cmbCalcSVRRegion.DropDown
        Dim SQL As String
        Dim readerLoc As SQLiteDataReader

        cmbCalcSVRRegion.Items.Clear()

        ' Load the select systems combobox with systems
        SQL = "SELECT regionName FROM REGIONS GROUP BY regionName"

        DBCommand = New SQLiteCommand(SQL, DB)
        readerLoc = DBCommand.ExecuteReader

        While readerLoc.Read
            cmbCalcSVRRegion.Items.Add(readerLoc.GetString(0))
        End While

        readerLoc.Close()
        readerLoc = Nothing
        DBCommand = Nothing

    End Sub

    Private Sub cmbCalcSVRRegion_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcSVRRegion.SelectedIndexChanged
        Call ResetRefresh()
    End Sub

    Private Sub cmbCalcBuildTimeMod_SelectedIndexChanged(sender As System.Object, e As System.EventArgs)
        Call ResetRefresh()
    End Sub

    Private Sub chkCalcSmall_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcSmall.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcMedium_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcMedium.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcLarge_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcLarge.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub chkCalcXL_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcXL.CheckedChanged
        If Not FirstManufacturingGridLoad Then
            FirstLoadCalcBPTypes = True
            cmbCalcBPTypeFilter.Text = "All Types"
            Call ResetRefresh()
        End If
    End Sub

    Private Sub btnCalcSelectColumns_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcSelectColumns.Click
        Dim f1 As New frmSelectManufacturingTabColumns
        ManufacturingTabColumnsChanged = False
        f1.ShowDialog()

        ' Now Refresh the grid if it changed
        If ManufacturingTabColumnsChanged Then
            If lstManufacturing.Items.Count <> 0 Then
                RefreshCalcData = True
                Call DisplayManufacturingResults(False)
            Else
                Call RefreshManufacturingTabColumns()
            End If
        End If
    End Sub

    Private Sub cmbCalcPOSModules_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcPOSModules.SelectedIndexChanged
        If Not FirstLoad Then
            SelectedCalcPOSModuleFacility.FacilityName = GetCalcPOSMultiUseArrayName(cmbCalcPOSModules.Text)
            Call SetDefaultFacilitybyCheck(IndustryType.POSModuleManufacturing, _
                               chkCalcBaseFacilityIncludeUsage, CalcTab, cmbCalcBaseFacilityType.Text, cmbCalcPOSModules, _
                               lblCalcBaseFacilityDefault, btnCalcBaseFacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    Private Sub cmbCalcPOSFuelBlocks_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcPOSFuelBlocks.SelectedIndexChanged
        If Not FirstLoad Then
            SelectedCalcPOSFuelBlockFacility.FacilityName = GetCalcPOSMultiUseArrayName(cmbCalcPOSFuelBlocks.Text)
            Call SetDefaultFacilitybyCheck(IndustryType.POSFuelBlockManufacturing, _
                               chkCalcBaseFacilityIncludeUsage, CalcTab, cmbCalcBaseFacilityType.Text, cmbCalcPOSFuelBlocks, _
                               lblCalcBaseFacilityDefault, btnCalcBaseFacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    Private Sub cmbCalcPOSLargeShips_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cmbCalcPOSLargeShips.SelectedIndexChanged
        If Not FirstLoad Then
            SelectedCalcPOSLargeShipFacility.FacilityName = GetCalcPOSMultiUseArrayName(cmbCalcPOSLargeShips.Text)
            Call SetDefaultFacilitybyCheck(IndustryType.POSLargeShipManufacturing, _
                               chkCalcBaseFacilityIncludeUsage, CalcTab, cmbCalcBaseFacilityType.Text, cmbCalcPOSLargeShips, _
                               lblCalcBaseFacilityDefault, btnCalcBaseFacilitySave)
            Call ResetRefresh()
        End If
    End Sub

    Private Sub txtCalcTempME_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtCalcTempME.TextChanged
        Call VerifyMETEEntry(txtCalcTempME, "ME")
    End Sub

    Private Sub txtCalcTempTE_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtCalcTempTE.TextChanged
        Call VerifyMETEEntry(txtCalcTempTE, "TE")
    End Sub

    Private Sub chkCalcAutoCalcT2NumBPs_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCalcAutoCalcT2NumBPs.CheckedChanged
        Call ResetRefresh()
    End Sub

#End Region

#Region "Column Select Functions"

    ' Clears the list and rebuilds it with columns they selected
    Private Sub RefreshManufacturingTabColumns()

        Call LoadManufacturingTabColumnPositions()
        Call lstManufacturing.Clear()
        AddingColumns = True

        ' Add the first hidden column
        lstManufacturing.Columns.Add("Order Number")
        lstManufacturing.Columns(0).Width = 0

        ' Now load all the columns in order of the settings
        For i = 1 To ColumnPositions.Count - 1
            If ColumnPositions(i) <> "" Then
                lstManufacturing.Columns.Add(ColumnPositions(i), GetColumnWidth(ColumnPositions(i)), GetColumnAlignment(ColumnPositions(i)))
            End If
        Next

        ' Hack to get around the scroll bar not showing
        lstManufacturing.AutoResizeColumn(0, ColumnHeaderAutoResizeStyle.None)

        AddingColumns = False

    End Sub

    ' Takes the column settings and saves the order to an array
    Private Sub LoadManufacturingTabColumnPositions()

        For i = 0 To ColumnPositions.Count - 1
            ColumnPositions(i) = ""
        Next

        With UserManufacturingTabColumnSettings
            ColumnPositions(.ItemCategory) = ProgramSettings.ItemCategoryColumnName
            ColumnPositions(.ItemGroup) = ProgramSettings.ItemGroupColumnName
            ColumnPositions(.ItemName) = ProgramSettings.ItemNameColumnName
            ColumnPositions(.Owned) = ProgramSettings.OwnedColumnName
            ColumnPositions(.Tech) = ProgramSettings.TechColumnName
            ColumnPositions(.BPME) = ProgramSettings.BPMEColumnName
            ColumnPositions(.BPTE) = ProgramSettings.BPTEColumnName
            ColumnPositions(.Inputs) = ProgramSettings.InputsColumnName
            ColumnPositions(.Compared) = ProgramSettings.ComparedColumnName
            ColumnPositions(.TotalRuns) = ProgramSettings.TotalRunsColumnName
            ColumnPositions(.SingleInventedBPCRuns) = ProgramSettings.SingleInventedBPCRunsColumnName
            ColumnPositions(.ProductionLines) = ProgramSettings.ProductionLinesColumnName
            ColumnPositions(.LaboratoryLines) = ProgramSettings.LaboratoryLinesColumnName
            ColumnPositions(.TotalInventionCost) = ProgramSettings.TotalInventionCostColumnName
            ColumnPositions(.TotalCopyCost) = ProgramSettings.TotalCopyCostColumnName
            ColumnPositions(.Taxes) = ProgramSettings.TaxesColumnName
            ColumnPositions(.BrokerFees) = ProgramSettings.BrokerFeesColumnName
            ColumnPositions(.BPProductionTime) = ProgramSettings.BPProductionTimeColumnName
            ColumnPositions(.TotalProductionTime) = ProgramSettings.TotalProductionTimeColumnName
            ColumnPositions(.CopyTime) = ProgramSettings.CopyTimeColumnName
            ColumnPositions(.InventionTime) = ProgramSettings.InventionTimeColumnName
            ColumnPositions(.ItemMarketPrice) = ProgramSettings.ItemMarketPriceColumnName
            ColumnPositions(.Profit) = ProgramSettings.ProfitColumnName
            ColumnPositions(.ProfitPercentage) = ProgramSettings.ProfitPercentageColumnName
            ColumnPositions(.IskperHour) = ProgramSettings.IskperHourColumnName
            ColumnPositions(.SVR) = ProgramSettings.SVRColumnName
            ColumnPositions(.SVRxIPH) = ProgramSettings.SVRxIPHColumnName
            ColumnPositions(.TotalCost) = ProgramSettings.TotalCostColumnName
            ColumnPositions(.BaseJobCost) = ProgramSettings.BaseJobCostColumnName
            ColumnPositions(.NumBPs) = ProgramSettings.NumBPsColumnName
            ColumnPositions(.InventionChance) = ProgramSettings.InventionChanceColumnName
            ColumnPositions(.BPType) = ProgramSettings.BPTypeColumnName
            ColumnPositions(.Race) = ProgramSettings.RaceColumnName
            ColumnPositions(.VolumeperItem) = ProgramSettings.VolumeperItemColumnName
            ColumnPositions(.TotalVolume) = ProgramSettings.TotalVolumeColumnName
            ColumnPositions(.ManufacturingJobFee) = ProgramSettings.ManufacturingJobFeeColumnName
            ColumnPositions(.ManufacturingFacilityName) = ProgramSettings.ManufacturingFacilityNameColumnName
            ColumnPositions(.ManufacturingFacilitySystem) = ProgramSettings.ManufacturingFacilitySystemColumnName
            ColumnPositions(.ManufacturingFacilityRegion) = ProgramSettings.ManufacturingFacilityRegionColumnName
            ColumnPositions(.ManufacturingFacilitySystemIndex) = ProgramSettings.ManufacturingFacilitySystemIndexColumnName
            ColumnPositions(.ManufacturingFacilityTax) = ProgramSettings.ManufacturingFacilityTaxColumnName
            ColumnPositions(.ManufacturingFacilityMEBonus) = ProgramSettings.ManufacturingFacilityMEBonusColumnName
            ColumnPositions(.ManufacturingFacilityTEBonus) = ProgramSettings.ManufacturingFacilityTEBonusColumnName
            ColumnPositions(.ManufacturingFacilityUsage) = ProgramSettings.ManufacturingFacilityUsageColumnName
            ColumnPositions(.ComponentFacilityName) = ProgramSettings.ComponentFacilityNameColumnName
            ColumnPositions(.ComponentFacilitySystem) = ProgramSettings.ComponentFacilitySystemColumnName
            ColumnPositions(.ComponentFacilityRegion) = ProgramSettings.ComponentFacilityRegionColumnName
            ColumnPositions(.ComponentFacilitySystemIndex) = ProgramSettings.ComponentFacilitySystemIndexColumnName
            ColumnPositions(.ComponentFacilityTax) = ProgramSettings.ComponentFacilityTaxColumnName
            ColumnPositions(.ComponentFacilityMEBonus) = ProgramSettings.ComponentFacilityMEBonusColumnName
            ColumnPositions(.ComponentFacilityTEBonus) = ProgramSettings.ComponentFacilityTEBonusColumnName
            ColumnPositions(.ComponentFacilityUsage) = ProgramSettings.ComponentFacilityUsageColumnName
            ColumnPositions(.CopyingFacilityName) = ProgramSettings.CopyingFacilityNameColumnName
            ColumnPositions(.CopyingFacilitySystem) = ProgramSettings.CopyingFacilitySystemColumnName
            ColumnPositions(.CopyingFacilityRegion) = ProgramSettings.CopyingFacilityRegionColumnName
            ColumnPositions(.CopyingFacilitySystemIndex) = ProgramSettings.CopyingFacilitySystemIndexColumnName
            ColumnPositions(.CopyingFacilityTax) = ProgramSettings.CopyingFacilityTaxColumnName
            ColumnPositions(.CopyingFacilityMEBonus) = ProgramSettings.CopyingFacilityMEBonusColumnName
            ColumnPositions(.CopyingFacilityTEBonus) = ProgramSettings.CopyingFacilityTEBonusColumnName
            ColumnPositions(.CopyingFacilityUsage) = ProgramSettings.CopyingFacilityUsageColumnName
            ColumnPositions(.InventionFacilityName) = ProgramSettings.InventionFacilityNameColumnName
            ColumnPositions(.InventionFacilitySystem) = ProgramSettings.InventionFacilitySystemColumnName
            ColumnPositions(.InventionFacilityRegion) = ProgramSettings.InventionFacilityRegionColumnName
            ColumnPositions(.InventionFacilitySystemIndex) = ProgramSettings.InventionFacilitySystemIndexColumnName
            ColumnPositions(.InventionFacilityTax) = ProgramSettings.InventionFacilityTaxColumnName
            ColumnPositions(.InventionFacilityMEBonus) = ProgramSettings.InventionFacilityMEBonusColumnName
            ColumnPositions(.InventionFacilityTEBonus) = ProgramSettings.InventionFacilityTEBonusColumnName
            ColumnPositions(.InventionFacilityUsage) = ProgramSettings.InventionFacilityUsageColumnName
        End With

        ' First column is always the bptypeid
        ColumnPositions(0) = "BPTypeID"

    End Sub

    ' Returns the column Width for the sent column name
    Private Function GetColumnWidth(ColumnName As String) As Integer

        With UserManufacturingTabColumnSettings
            Select Case ColumnName
                Case ProgramSettings.ItemCategoryColumnName
                    Return .ItemCategoryWidth
                Case ProgramSettings.ItemGroupColumnName
                    Return .ItemGroupWidth
                Case ProgramSettings.ItemNameColumnName
                    Return .ItemNameWidth
                Case ProgramSettings.OwnedColumnName
                    Return .OwnedWidth
                Case ProgramSettings.TechColumnName
                    Return .TechWidth
                Case ProgramSettings.BPMEColumnName
                    Return .BPMEWidth
                Case ProgramSettings.BPTEColumnName
                    Return .BPTEWidth
                Case ProgramSettings.InputsColumnName
                    Return .InputsWidth
                Case ProgramSettings.ComparedColumnName
                    Return .ComparedWidth
                Case ProgramSettings.TotalRunsColumnName
                    Return .TotalRunsWidth
                Case ProgramSettings.SingleInventedBPCRunsColumnName
                    Return .SingleInventedBPCRunsWidth
                Case ProgramSettings.ProductionLinesColumnName
                    Return .ProductionLinesWidth
                Case ProgramSettings.LaboratoryLinesColumnName
                    Return .LaboratoryLinesWidth
                Case ProgramSettings.TotalInventionCostColumnName
                    Return .TotalInventionCostWidth
                Case ProgramSettings.TotalCopyCostColumnName
                    Return .TotalCopyCostWidth
                Case ProgramSettings.TaxesColumnName
                    Return .TaxesWidth
                Case ProgramSettings.BrokerFeesColumnName
                    Return .BrokerFeesWidth
                Case ProgramSettings.BPProductionTimeColumnName
                    Return .BPProductionTimeWidth
                Case ProgramSettings.TotalProductionTimeColumnName
                    Return .TotalProductionTimeWidth
                Case ProgramSettings.CopyTimeColumnName
                    Return .CopyTimeWidth
                Case ProgramSettings.InventionTimeColumnName
                    Return .InventionTimeWidth
                Case ProgramSettings.ItemMarketPriceColumnName
                    Return .ItemMarketPriceWidth
                Case ProgramSettings.ProfitColumnName
                    Return .ProfitWidth
                Case ProgramSettings.ProfitPercentageColumnName
                    Return .ProfitPercentageWidth
                Case ProgramSettings.IskperHourColumnName
                    Return .IskperHourWidth
                Case ProgramSettings.SVRColumnName
                    Return .SVRWidth
                Case ProgramSettings.SVRxIPHColumnName
                    Return .SVRxIPHWidth
                Case ProgramSettings.TotalCostColumnName
                    Return .TotalCostWidth
                Case ProgramSettings.BaseJobCostColumnName
                    Return .BaseJobCostWidth
                Case ProgramSettings.NumBPsColumnName
                    Return .NumBPsWidth
                Case ProgramSettings.InventionChanceColumnName
                    Return .InventionChanceWidth
                Case ProgramSettings.BPTypeColumnName
                    Return .BPTypeWidth
                Case ProgramSettings.RaceColumnName
                    Return .RaceWidth
                Case ProgramSettings.VolumeperItemColumnName
                    Return .VolumeperItemWidth
                Case ProgramSettings.TotalVolumeColumnName
                    Return .TotalVolumeWidth
                Case ProgramSettings.ManufacturingJobFeeColumnName
                    Return .ManufacturingJobFeeWidth
                Case ProgramSettings.ManufacturingFacilityNameColumnName
                    Return .ManufacturingFacilityNameWidth
                Case ProgramSettings.ManufacturingFacilitySystemColumnName
                    Return .ManufacturingFacilitySystemWidth
                Case ProgramSettings.ManufacturingFacilityRegionColumnName
                    Return .ManufacturingFacilityRegionWidth
                Case ProgramSettings.ManufacturingFacilitySystemIndexColumnName
                    Return .ManufacturingFacilitySystemIndexWidth
                Case ProgramSettings.ManufacturingFacilityTaxColumnName
                    Return .ManufacturingFacilityTaxWidth
                Case ProgramSettings.ManufacturingFacilityMEBonusColumnName
                    Return .ManufacturingFacilityMEBonusWidth
                Case ProgramSettings.ManufacturingFacilityTEBonusColumnName
                    Return .ManufacturingFacilityTEBonusWidth
                Case ProgramSettings.ManufacturingFacilityUsageColumnName
                    Return .ManufacturingFacilityUsageWidth
                Case ProgramSettings.ComponentFacilityNameColumnName
                    Return .ComponentFacilityNameWidth
                Case ProgramSettings.ComponentFacilitySystemColumnName
                    Return .ComponentFacilitySystemWidth
                Case ProgramSettings.ComponentFacilityRegionColumnName
                    Return .ComponentFacilityRegionWidth
                Case ProgramSettings.ComponentFacilitySystemIndexColumnName
                    Return .ComponentFacilitySystemIndexWidth
                Case ProgramSettings.ComponentFacilityTaxColumnName
                    Return .ComponentFacilityTaxWidth
                Case ProgramSettings.ComponentFacilityMEBonusColumnName
                    Return .ComponentFacilityMEBonusWidth
                Case ProgramSettings.ComponentFacilityTEBonusColumnName
                    Return .ComponentFacilityTEBonusWidth
                Case ProgramSettings.ComponentFacilityUsageColumnName
                    Return .ComponentFacilityUsageWidth
                Case ProgramSettings.CopyingFacilityNameColumnName
                    Return .CopyingFacilityNameWidth
                Case ProgramSettings.CopyingFacilitySystemColumnName
                    Return .CopyingFacilitySystemWidth
                Case ProgramSettings.CopyingFacilityRegionColumnName
                    Return .CopyingFacilityRegionWidth
                Case ProgramSettings.CopyingFacilitySystemIndexColumnName
                    Return .CopyingFacilitySystemIndexWidth
                Case ProgramSettings.CopyingFacilityTaxColumnName
                    Return .CopyingFacilityTaxWidth
                Case ProgramSettings.CopyingFacilityMEBonusColumnName
                    Return .CopyingFacilityMEBonusWidth
                Case ProgramSettings.CopyingFacilityTEBonusColumnName
                    Return .CopyingFacilityTEBonusWidth
                Case ProgramSettings.CopyingFacilityUsageColumnName
                    Return .CopyingFacilityUsageWidth
                Case ProgramSettings.InventionFacilityNameColumnName
                    Return .InventionFacilityNameWidth
                Case ProgramSettings.InventionFacilitySystemColumnName
                    Return .InventionFacilitySystemWidth
                Case ProgramSettings.InventionFacilityRegionColumnName
                    Return .InventionFacilityRegionWidth
                Case ProgramSettings.InventionFacilitySystemIndexColumnName
                    Return .InventionFacilitySystemIndexWidth
                Case ProgramSettings.InventionFacilityTaxColumnName
                    Return .InventionFacilityTaxWidth
                Case ProgramSettings.InventionFacilityMEBonusColumnName
                    Return .InventionFacilityMEBonusWidth
                Case ProgramSettings.InventionFacilityTEBonusColumnName
                    Return .InventionFacilityTEBonusWidth
                Case ProgramSettings.InventionFacilityUsageColumnName
                    Return .InventionFacilityUsageWidth
                Case Else
                    Return 0
            End Select
        End With

    End Function

    ' Returns the allignment for the column name sent
    Private Function GetColumnAlignment(ColumnName As String) As System.Windows.Forms.HorizontalAlignment

        Select Case ColumnName
            Case ProgramSettings.ItemCategoryColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.ItemGroupColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.ItemNameColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.OwnedColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.TechColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.BPMEColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.BPTEColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.InputsColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.ComparedColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.TotalRunsColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.SingleInventedBPCRunsColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ProductionLinesColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.LaboratoryLinesColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.TotalInventionCostColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.TotalCopyCostColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.TaxesColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.BrokerFeesColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.BPProductionTimeColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.TotalProductionTimeColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.CopyTimeColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.InventionTimeColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ItemMarketPriceColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ProfitColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ProfitPercentageColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.IskperHourColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.SVRColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.SVRxIPHColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.TotalCostColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.BaseJobCostColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.NumBPsColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.InventionChanceColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.BPTypeColumnName
                Return HorizontalAlignment.Center
            Case ProgramSettings.RaceColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.VolumeperItemColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.TotalVolumeColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ManufacturingJobFeeColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ManufacturingFacilityNameColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.ManufacturingFacilitySystemColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.ManufacturingFacilityRegionColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.ManufacturingFacilitySystemIndexColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ManufacturingFacilityTaxColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ManufacturingFacilityMEBonusColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ManufacturingFacilityTEBonusColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ManufacturingFacilityUsageColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ComponentFacilityNameColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.ComponentFacilitySystemColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.ComponentFacilityRegionColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.ComponentFacilitySystemIndexColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ComponentFacilityTaxColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ComponentFacilityMEBonusColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ComponentFacilityTEBonusColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.ComponentFacilityUsageColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.CopyingFacilityNameColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.CopyingFacilitySystemColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.CopyingFacilityRegionColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.CopyingFacilitySystemIndexColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.CopyingFacilityTaxColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.CopyingFacilityMEBonusColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.CopyingFacilityTEBonusColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.CopyingFacilityUsageColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.InventionFacilityNameColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.InventionFacilitySystemColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.InventionFacilityRegionColumnName
                Return HorizontalAlignment.Left
            Case ProgramSettings.InventionFacilitySystemIndexColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.InventionFacilityTaxColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.InventionFacilityMEBonusColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.InventionFacilityTEBonusColumnName
                Return HorizontalAlignment.Right
            Case ProgramSettings.InventionFacilityUsageColumnName
                Return HorizontalAlignment.Right
            Case Else
                Return 0
        End Select

    End Function

    ' Updates the column order when changed
    Private Sub lstManufacturing_ColumnReordered(sender As Object, e As System.Windows.Forms.ColumnReorderedEventArgs) Handles lstManufacturing.ColumnReordered
        Dim TempArray(NumManufacturingTabColumns) As String
        Dim Minus1 As Boolean = False

        e.Cancel = True ' Cancel the event so we can manually update the grid columns

        For i = 0 To NumManufacturingTabColumns
            TempArray(i) = ""
        Next

        ' First index is ""
        TempArray(0) = "JobID"

        If e.OldDisplayIndex > e.NewDisplayIndex Then
            ' For all indices larger than the new index, need to move it to the next array
            For i = 1 To e.NewDisplayIndex - 1
                TempArray(i) = ColumnPositions(i)
            Next

            ' Insert the new column
            TempArray(e.NewDisplayIndex) = ColumnPositions(e.OldDisplayIndex)

            ' Move all the rest of the items up one
            For i = e.NewDisplayIndex + 1 To TempArray.Count - 1
                If i < e.OldDisplayIndex + 1 Then
                    TempArray(i) = ColumnPositions(i - 1)
                Else
                    TempArray(i) = ColumnPositions(i)
                End If
            Next
        Else
            ' For all indices larger than the new index, need to move it to the next array
            For i = 1 To e.OldDisplayIndex - 1
                TempArray(i) = ColumnPositions(i)
            Next

            ' Insert the new column
            TempArray(e.NewDisplayIndex) = ColumnPositions(e.OldDisplayIndex)

            ' Back fill the array between the column we moved and the new location
            For i = e.OldDisplayIndex To e.NewDisplayIndex - 1
                TempArray(i) = ColumnPositions(i + 1)
            Next

            ' Replace all the items left
            For i = e.NewDisplayIndex + 1 To TempArray.Count - 1
                TempArray(i) = ColumnPositions(i)
            Next

        End If

        ColumnPositions = TempArray

        ' Save the columns based on the current order
        With UserManufacturingTabColumnSettings
            For i = 1 To ColumnPositions.Count - 1
                Select Case ColumnPositions(i)
                    Case ProgramSettings.ItemCategoryColumnName
                        .ItemCategory = i
                    Case ProgramSettings.ItemGroupColumnName
                        .ItemGroup = i
                    Case ProgramSettings.ItemNameColumnName
                        .ItemName = i
                    Case ProgramSettings.OwnedColumnName
                        .Owned = i
                    Case ProgramSettings.TechColumnName
                        .Tech = i
                    Case ProgramSettings.BPMEColumnName
                        .BPME = i
                    Case ProgramSettings.BPTEColumnName
                        .BPTE = i
                    Case ProgramSettings.InputsColumnName
                        .Inputs = i
                    Case ProgramSettings.ComparedColumnName
                        .Compared = i
                    Case ProgramSettings.TotalRunsColumnName
                        .TotalRuns = i
                    Case ProgramSettings.SingleInventedBPCRunsColumnName
                        .SingleInventedBPCRuns = i
                    Case ProgramSettings.ProductionLinesColumnName
                        .ProductionLines = i
                    Case ProgramSettings.LaboratoryLinesColumnName
                        .LaboratoryLines = i
                    Case ProgramSettings.TotalInventionCostColumnName
                        .TotalInventionCost = i
                    Case ProgramSettings.TotalCopyCostColumnName
                        .TotalCopyCost = i
                    Case ProgramSettings.TaxesColumnName
                        .Taxes = i
                    Case ProgramSettings.BrokerFeesColumnName
                        .BrokerFees = i
                    Case ProgramSettings.BPProductionTimeColumnName
                        .BPProductionTime = i
                    Case ProgramSettings.TotalProductionTimeColumnName
                        .TotalProductionTime = i
                    Case ProgramSettings.CopyTimeColumnName
                        .CopyTime = i
                    Case ProgramSettings.InventionTimeColumnName
                        .InventionTime = i
                    Case ProgramSettings.ItemMarketPriceColumnName
                        .ItemMarketPrice = i
                    Case ProgramSettings.ProfitColumnName
                        .Profit = i
                    Case ProgramSettings.ProfitPercentageColumnName
                        .ProfitPercentage = i
                    Case ProgramSettings.IskperHourColumnName
                        .IskperHour = i
                    Case ProgramSettings.SVRColumnName
                        .SVR = i
                    Case ProgramSettings.SVRxIPHColumnName
                        .SVRxIPH = i
                    Case ProgramSettings.TotalCostColumnName
                        .TotalCost = i
                    Case ProgramSettings.BaseJobCostColumnName
                        .BaseJobCost = i
                    Case ProgramSettings.NumBPsColumnName
                        .NumBPs = i
                    Case ProgramSettings.InventionChanceColumnName
                        .InventionChance = i
                    Case ProgramSettings.BPTypeColumnName
                        .BPType = i
                    Case ProgramSettings.RaceColumnName
                        .Race = i
                    Case ProgramSettings.VolumeperItemColumnName
                        .VolumeperItem = i
                    Case ProgramSettings.TotalVolumeColumnName
                        .TotalVolume = i
                    Case ProgramSettings.ManufacturingJobFeeColumnName
                        .ManufacturingJobFee = i
                    Case ProgramSettings.ManufacturingFacilityNameColumnName
                        .ManufacturingFacilityName = i
                    Case ProgramSettings.ManufacturingFacilitySystemColumnName
                        .ManufacturingFacilitySystem = i
                    Case ProgramSettings.ManufacturingFacilityRegionColumnName
                        .ManufacturingFacilityRegion = i
                    Case ProgramSettings.ManufacturingFacilitySystemIndexColumnName
                        .ManufacturingFacilitySystemIndex = i
                    Case ProgramSettings.ManufacturingFacilityTaxColumnName
                        .ManufacturingFacilityTax = i
                    Case ProgramSettings.ManufacturingFacilityMEBonusColumnName
                        .ManufacturingFacilityMEBonus = i
                    Case ProgramSettings.ManufacturingFacilityTEBonusColumnName
                        .ManufacturingFacilityTEBonus = i
                    Case ProgramSettings.ManufacturingFacilityUsageColumnName
                        .ManufacturingFacilityUsage = i
                    Case ProgramSettings.ComponentFacilityNameColumnName
                        .ComponentFacilityName = i
                    Case ProgramSettings.ComponentFacilitySystemColumnName
                        .ComponentFacilitySystem = i
                    Case ProgramSettings.ComponentFacilityRegionColumnName
                        .ComponentFacilityRegion = i
                    Case ProgramSettings.ComponentFacilitySystemIndexColumnName
                        .ComponentFacilitySystemIndex = i
                    Case ProgramSettings.ComponentFacilityTaxColumnName
                        .ComponentFacilityTax = i
                    Case ProgramSettings.ComponentFacilityMEBonusColumnName
                        .ComponentFacilityMEBonus = i
                    Case ProgramSettings.ComponentFacilityTEBonusColumnName
                        .ComponentFacilityTEBonus = i
                    Case ProgramSettings.ComponentFacilityUsageColumnName
                        .ComponentFacilityUsage = i
                    Case ProgramSettings.CopyingFacilityNameColumnName
                        .CopyingFacilityName = i
                    Case ProgramSettings.CopyingFacilitySystemColumnName
                        .CopyingFacilitySystem = i
                    Case ProgramSettings.CopyingFacilityRegionColumnName
                        .CopyingFacilityRegion = i
                    Case ProgramSettings.CopyingFacilitySystemIndexColumnName
                        .CopyingFacilitySystemIndex = i
                    Case ProgramSettings.CopyingFacilityTaxColumnName
                        .CopyingFacilityTax = i
                    Case ProgramSettings.CopyingFacilityMEBonusColumnName
                        .CopyingFacilityMEBonus = i
                    Case ProgramSettings.CopyingFacilityTEBonusColumnName
                        .CopyingFacilityTEBonus = i
                    Case ProgramSettings.CopyingFacilityUsageColumnName
                        .CopyingFacilityUsage = i
                    Case ProgramSettings.InventionFacilityNameColumnName
                        .InventionFacilityName = i
                    Case ProgramSettings.InventionFacilitySystemColumnName
                        .InventionFacilitySystem = i
                    Case ProgramSettings.InventionFacilityRegionColumnName
                        .InventionFacilityRegion = i
                    Case ProgramSettings.InventionFacilitySystemIndexColumnName
                        .InventionFacilitySystemIndex = i
                    Case ProgramSettings.InventionFacilityTaxColumnName
                        .InventionFacilityTax = i
                    Case ProgramSettings.InventionFacilityMEBonusColumnName
                        .InventionFacilityMEBonus = i
                    Case ProgramSettings.InventionFacilityTEBonusColumnName
                        .InventionFacilityTEBonus = i
                    Case ProgramSettings.InventionFacilityUsageColumnName
                        .InventionFacilityUsage = i
                End Select
            Next
        End With

        ' Now Refresh the grid
        If lstManufacturing.Items.Count <> 0 Then
            RefreshCalcData = True
            Call DisplayManufacturingResults(False)
        Else
            Call RefreshManufacturingTabColumns()
        End If

    End Sub

    ' Updates the column sizes when changed
    Private Sub lstManufacturing_ColumnWidthChanged(sender As Object, e As System.Windows.Forms.ColumnWidthChangedEventArgs) Handles lstManufacturing.ColumnWidthChanged
        Dim NewWidth As Integer = lstManufacturing.Columns(e.ColumnIndex).Width

        If Not AddingColumns Then
            With UserManufacturingTabColumnSettings
                Select Case ColumnPositions(e.ColumnIndex)
                    Case ProgramSettings.ItemCategoryColumnName
                        .ItemCategoryWidth = NewWidth
                    Case ProgramSettings.ItemGroupColumnName
                        .ItemGroupWidth = NewWidth
                    Case ProgramSettings.ItemNameColumnName
                        .ItemNameWidth = NewWidth
                    Case ProgramSettings.OwnedColumnName
                        .OwnedWidth = NewWidth
                    Case ProgramSettings.TechColumnName
                        .TechWidth = NewWidth
                    Case ProgramSettings.BPMEColumnName
                        .BPMEWidth = NewWidth
                    Case ProgramSettings.BPTEColumnName
                        .BPTEWidth = NewWidth
                    Case ProgramSettings.InputsColumnName
                        .InputsWidth = NewWidth
                    Case ProgramSettings.ComparedColumnName
                        .ComparedWidth = NewWidth
                    Case ProgramSettings.TotalRunsColumnName
                        .TotalRunsWidth = NewWidth
                    Case ProgramSettings.SingleInventedBPCRunsColumnName
                        .SingleInventedBPCRunsWidth = NewWidth
                    Case ProgramSettings.ProductionLinesColumnName
                        .ProductionLinesWidth = NewWidth
                    Case ProgramSettings.LaboratoryLinesColumnName
                        .LaboratoryLinesWidth = NewWidth
                    Case ProgramSettings.TotalInventionCostColumnName
                        .TotalInventionCostWidth = NewWidth
                    Case ProgramSettings.TotalCopyCostColumnName
                        .TotalCopyCostWidth = NewWidth
                    Case ProgramSettings.TaxesColumnName
                        .TaxesWidth = NewWidth
                    Case ProgramSettings.BrokerFeesColumnName
                        .BrokerFeesWidth = NewWidth
                    Case ProgramSettings.BPProductionTimeColumnName
                        .BPProductionTimeWidth = NewWidth
                    Case ProgramSettings.TotalProductionTimeColumnName
                        .TotalProductionTimeWidth = NewWidth
                    Case ProgramSettings.CopyTimeColumnName
                        .CopyTimeWidth = NewWidth
                    Case ProgramSettings.InventionTimeColumnName
                        .InventionTimeWidth = NewWidth
                    Case ProgramSettings.ItemMarketPriceColumnName
                        .ItemMarketPriceWidth = NewWidth
                    Case ProgramSettings.ProfitColumnName
                        .ProfitWidth = NewWidth
                    Case ProgramSettings.ProfitPercentageColumnName
                        .ProfitPercentageWidth = NewWidth
                    Case ProgramSettings.IskperHourColumnName
                        .IskperHourWidth = NewWidth
                    Case ProgramSettings.SVRColumnName
                        .SVRWidth = NewWidth
                    Case ProgramSettings.SVRxIPHColumnName
                        .SVRxIPHWidth = NewWidth
                    Case ProgramSettings.TotalCostColumnName
                        .TotalCostWidth = NewWidth
                    Case ProgramSettings.BaseJobCostColumnName
                        .BaseJobCostWidth = NewWidth
                    Case ProgramSettings.NumBPsColumnName
                        .NumBPsWidth = NewWidth
                    Case ProgramSettings.InventionChanceColumnName
                        .InventionChanceWidth = NewWidth
                    Case ProgramSettings.BPTypeColumnName
                        .BPTypeWidth = NewWidth
                    Case ProgramSettings.RaceColumnName
                        .RaceWidth = NewWidth
                    Case ProgramSettings.VolumeperItemColumnName
                        .VolumeperItemWidth = NewWidth
                    Case ProgramSettings.TotalVolumeColumnName
                        .TotalVolumeWidth = NewWidth
                    Case ProgramSettings.ManufacturingJobFeeColumnName
                        .ManufacturingJobFeeWidth = NewWidth
                    Case ProgramSettings.ManufacturingFacilityNameColumnName
                        .ManufacturingFacilityNameWidth = NewWidth
                    Case ProgramSettings.ManufacturingFacilitySystemColumnName
                        .ManufacturingFacilitySystemWidth = NewWidth
                    Case ProgramSettings.ManufacturingFacilityRegionColumnName
                        .ManufacturingFacilityRegionWidth = NewWidth
                    Case ProgramSettings.ManufacturingFacilitySystemIndexColumnName
                        .ManufacturingFacilitySystemIndexWidth = NewWidth
                    Case ProgramSettings.ManufacturingFacilityTaxColumnName
                        .ManufacturingFacilityTaxWidth = NewWidth
                    Case ProgramSettings.ManufacturingFacilityMEBonusColumnName
                        .ManufacturingFacilityMEBonusWidth = NewWidth
                    Case ProgramSettings.ManufacturingFacilityTEBonusColumnName
                        .ManufacturingFacilityTEBonusWidth = NewWidth
                    Case ProgramSettings.ManufacturingFacilityUsageColumnName
                        .ManufacturingFacilityUsageWidth = NewWidth
                    Case ProgramSettings.ComponentFacilityNameColumnName
                        .ComponentFacilityNameWidth = NewWidth
                    Case ProgramSettings.ComponentFacilitySystemColumnName
                        .ComponentFacilitySystemWidth = NewWidth
                    Case ProgramSettings.ComponentFacilityRegionColumnName
                        .ComponentFacilityRegionWidth = NewWidth
                    Case ProgramSettings.ComponentFacilitySystemIndexColumnName
                        .ComponentFacilitySystemIndexWidth = NewWidth
                    Case ProgramSettings.ComponentFacilityTaxColumnName
                        .ComponentFacilityTaxWidth = NewWidth
                    Case ProgramSettings.ComponentFacilityMEBonusColumnName
                        .ComponentFacilityMEBonusWidth = NewWidth
                    Case ProgramSettings.ComponentFacilityTEBonusColumnName
                        .ComponentFacilityTEBonusWidth = NewWidth
                    Case ProgramSettings.ComponentFacilityUsageColumnName
                        .ComponentFacilityUsageWidth = NewWidth
                    Case ProgramSettings.CopyingFacilityNameColumnName
                        .CopyingFacilityNameWidth = NewWidth
                    Case ProgramSettings.CopyingFacilitySystemColumnName
                        .CopyingFacilitySystemWidth = NewWidth
                    Case ProgramSettings.CopyingFacilityRegionColumnName
                        .CopyingFacilityRegionWidth = NewWidth
                    Case ProgramSettings.CopyingFacilitySystemIndexColumnName
                        .CopyingFacilitySystemIndexWidth = NewWidth
                    Case ProgramSettings.CopyingFacilityTaxColumnName
                        .CopyingFacilityTaxWidth = NewWidth
                    Case ProgramSettings.CopyingFacilityMEBonusColumnName
                        .CopyingFacilityMEBonusWidth = NewWidth
                    Case ProgramSettings.CopyingFacilityTEBonusColumnName
                        .CopyingFacilityTEBonusWidth = NewWidth
                    Case ProgramSettings.CopyingFacilityUsageColumnName
                        .CopyingFacilityUsageWidth = NewWidth
                    Case ProgramSettings.InventionFacilityNameColumnName
                        .InventionFacilityNameWidth = NewWidth
                    Case ProgramSettings.InventionFacilitySystemColumnName
                        .InventionFacilitySystemWidth = NewWidth
                    Case ProgramSettings.InventionFacilityRegionColumnName
                        .InventionFacilityRegionWidth = NewWidth
                    Case ProgramSettings.InventionFacilitySystemIndexColumnName
                        .InventionFacilitySystemIndexWidth = NewWidth
                    Case ProgramSettings.InventionFacilityTaxColumnName
                        .InventionFacilityTaxWidth = NewWidth
                    Case ProgramSettings.InventionFacilityMEBonusColumnName
                        .InventionFacilityMEBonusWidth = NewWidth
                    Case ProgramSettings.InventionFacilityTEBonusColumnName
                        .InventionFacilityTEBonusWidth = NewWidth
                    Case ProgramSettings.InventionFacilityUsageColumnName
                        .InventionFacilityUsageWidth = NewWidth
                End Select
            End With
        End If

    End Sub

    ' Determines if we display the sent column
    Private Function ShowColumn(ColumnName As String) As Boolean
        If Array.IndexOf(ColumnPositions, ColumnName) <> -1 Then
            Return True
        Else
            Return False
        End If
    End Function

#End Region

    Private Sub InitManufacturingTab()

        If Developer Then
            lstManufacturing.ContextMenuStrip = ListOptionsMenu
        End If

        lstManufacturing.Items.Clear()

        With UserManufacturingTabSettings
            ' Blueprints
            chkCalcAmmo.Checked = .CheckBPTypeAmmoCharges
            chkCalcBoosters.Checked = .CheckBPTypeBoosters
            chkCalcComponents.Checked = .CheckBPTypeComponents
            chkCalcDrones.Checked = .CheckBPTypeDrones
            chkCalcModules.Checked = .CheckBPTypeModules
            chkCalcRigs.Checked = .CheckBPTypeRigs
            chkCalcShips.Checked = .CheckBPTypeShips
            chkCalcSubsystems.Checked = .CheckBPTypeSubsystems
            chkCalcStructures.Checked = .CheckBPTypeStructures
            chkCalcMisc.Checked = .CheckBPTypeMisc
            chkCalcDeployables.Checked = .CheckBPTypeDeployables
            chkCalcCelestials.Checked = .CheckBPTypeCelestials
            chkCalcStationParts.Checked = .CheckBPTypeStationParts

            ' Tech
            chkCalcT1.Checked = .CheckTech1
            chkCalcT2.Checked = .CheckTech2
            chkCalcT3.Checked = .CheckTech3
            chkCalcStoryline.Checked = .CheckTechStoryline
            chkCalcPirateFaction.Checked = .CheckTechPirate
            chkCalcNavyFaction.Checked = .CheckTechNavy

            ' Two facility check options
            chkCalcT3DestroyersFacility.Checked = .CheckT3DestroyerFacility
            chkCalcCapComponentsFacility.Checked = .CheckCapitalComponentsFacility

            ' Blueprint load types
            Select Case .BlueprintType
                Case rbtnCalcAllBPs.Text
                    rbtnCalcAllBPs.Checked = True
                    gbCalcIncludeOwned.Enabled = False
                Case rbtnCalcBPOwned.Text
                    rbtnCalcBPOwned.Checked = True
                    gbCalcIncludeOwned.Enabled = True
            End Select

            cmbCalcBPTypeFilter.Text = .ItemTypeFilter
            txtCalcItemFilter.Text = .TextItemFilter

            chkCalcAutoCalcT2NumBPs.Checked = .CheckAutoCalcNumBPs

            FirstManufacturingGridLoad = False ' Change this now so it will load the grids for all on reset

            chkCalcTaxes.Checked = .CheckIncludeTaxes
            chkCalcFees.Checked = .CheckIncludeBrokersFees

            ' Check wrecked Relics, do not check meta levels or decryptors (NONE)
            chkCalcDecryptor1.Checked = .CheckDecryptorNone ' No decryptor
            chkCalcDecryptor2.Checked = .CheckDecryptor06
            chkCalcDecryptor3.Checked = .CheckDecryptor09
            chkCalcDecryptor4.Checked = .CheckDecryptor10
            chkCalcDecryptor5.Checked = .CheckDecryptor11
            chkCalcDecryptor6.Checked = .CheckDecryptor12
            chkCalcDecryptor7.Checked = .CheckDecryptor15
            chkCalcDecryptor8.Checked = .CheckDecryptor18
            chkCalcDecryptor9.Checked = .CheckDecryptor19

            chkCalcDecryptorforT2.Checked = .CheckDecryptorUseforT2
            chkCalcDecryptorforT3.Checked = .CheckDecryptorUseforT3

            chkCalcRERelic3.Checked = .CheckRelicIntact
            chkCalcRERelic2.Checked = .CheckRelicMalfunction
            chkCalcRERelic1.Checked = .CheckRelicWrecked

            chkCalcRaceAmarr.Checked = .CheckRaceAmarr
            chkCalcRaceCaldari.Checked = .CheckRaceCaldari
            chkCalcRaceMinmatar.Checked = .CheckRaceMinmatar
            chkCalcRaceGallente.Checked = .CheckRaceGallente
            chkCalcRacePirate.Checked = .CheckRacePirate
            chkCalcRaceOther.Checked = .CheckRaceOther

            chkCalcSmall.Checked = .CheckSmall
            chkCalcMedium.Checked = .CheckMedium
            chkCalcLarge.Checked = .CheckLarge
            chkCalcXL.Checked = .CheckXL

            Select Case .SortBy
                Case rbtnCalcIPH.Text
                    rbtnCalcIPH.Checked = True
                Case rbtnCalcProfit.Text
                    rbtnCalcProfit.Checked = True
                Case rbtnCalcShowProfitPercent.Text
                    rbtnCalcShowProfitPercent.Checked = True
                Case rbtnCalcSortSVR.Text
                    rbtnCalcSortSVR.Checked = True
                Case rbtnCalcSortSVRIPH.Text
                    rbtnCalcSortSVRIPH.Checked = True
            End Select

            Select Case .PriceCompare
                Case rbtnCalcCompareAll.Text
                    rbtnCalcCompareAll.Checked = True
                Case rbtnCalcCompareBuildBuy.Text
                    rbtnCalcCompareBuildBuy.Checked = True
                Case rbtnCalcCompareComponents.Text
                    rbtnCalcCompareComponents.Checked = True
                Case rbtnCalcCompareRawMats.Text
                    rbtnCalcCompareRawMats.Checked = True
            End Select

            ' Default teams
            CalcManufacturingTeamComboLoaded = True ' Don't trigger a combo load yet
            Call LoadDefaultTeam(True, ActivityManufacturing, False, cmbCalcManufacturingTeam, txtCalcManufacturingTeamBonus, lblCalcManufacturingTeamDefault, btnCalcSaveManufacturingTeam, CalcTab)
            ' Enable default label and disable save since just loaded the default
            lblCalcManufacturingTeamDefault.Visible = True
            btnCalcSaveManufacturingTeam.Enabled = False
            CalcManufacturingTeamComboLoaded = False

            CalcComponentManufacturingTeamComboLoaded = True ' Don't trigger a combo load yet
            Call LoadDefaultTeam(True, ActivityComponentManufacturing, False, cmbCalcComponentManufacturingTeam, txtCalcComponentManufacturingTeamBonus, lblCalcComponentManufacturingTeamDefault, btnCalcSaveComponentManufacturingTeam, CalcTab)
            ' Enable default label and disable save since just loaded the default
            lblCalcComponentManufacturingTeamDefault.Visible = True
            btnCalcSaveComponentManufacturingTeam.Enabled = False
            CalcComponentManufacturingTeamComboLoaded = False

            'CalcInventionTeamComboLoaded = True ' Don't trigger a combo load yet
            'Call LoadDefaultTeam(True, ActivityInvention, False, cmbCalcInventionTeam, txtCalcInventionTeamBonus, lblCalcInventionTeamDefault, btnCalcSaveInventionTeam, CalcTab)
            '' Enable default label and disable save since just loaded the default
            'lblCalcInventionTeamDefault.Visible = True
            'btnCalcSaveInventionTeam.Enabled = False
            'CalcInventionTeamComboLoaded = False

            CalcCopyTeamComboLoaded = True ' Don't trigger a combo load yet
            Call LoadDefaultTeam(True, ActivityCopying, False, cmbCalcCopyTeam, txtCalcCopyTeamBonus, lblCalcCopyTeamDefault, btnCalcSaveCopyTeam, CalcTab)
            ' Enable default label and disable save since just loaded the default
            lblCalcCopyTeamDefault.Visible = True
            btnCalcSaveCopyTeam.Enabled = False
            CalcCopyTeamComboLoaded = False

            ' Load the Default facilities for the tab
            Call LoadDefaultCalcBaseFacility()
            Call LoadDefaultCalcComponentFacility()
            Call LoadDefaultCalcT2InventionFacility()
            Call LoadDefaultCalcT3InventionFacility()
            Call LoadDefaultCalcCopyFacility()
            Call LoadDefaultCalcNoPOSFacility()
            Call LoadDefaultCalcSuperFacility()
            Call LoadDefaultCalcCapFacility()
            Call LoadDefaultCalcT3Facility()
            Call LoadDefaultCalcSubsystemFacility()
            Call LoadDefaultCalcBoosterFacility()

            ' Other defaults
            txtCalcTempME.Text = CStr(UserApplicationSettings.DefaultBPME)
            txtCalcTempTE.Text = CStr(UserApplicationSettings.DefaultBPTE)

            cmbCalcAvgPriceDuration.Text = .AveragePriceDuration

            chkCalcIncludeT2Owned.Checked = .CheckIncludeT2Owned
            chkCalcIncludeT3Owned.Checked = .CheckIncludeT3Owned

            txtCalcSVRThreshold.Text = CStr(.IgnoreSVRThreshold)
            chkCalcSVRIncludeNull.Checked = .CheckSVRIncludeNull
            cmbCalcSVRRegion.Text = .AveragePriceRegion

            txtCalcProdLines.Text = CStr(.ProductionLines)
            txtCalcLabLines.Text = CStr(.LaboratoryLines)
            txtCalcRuns.Text = CStr(.Runs)
            txtCalcNumBPs.Text = CStr(.BPRuns)

            RecordIDIterator = 0

            btnCalculate.Enabled = True
            lstManufacturing.Enabled = True

        End With

        Call ResetRefresh()
        Call EnableDisableT2T3Options()

    End Sub

    ' Loads the default base facility
    Private Sub LoadDefaultCalcBaseFacility()
        LoadingFacilityActivities = True ' Don't trigger a combo load yet
        CalcBaseFacilityLoaded = False
        chkCalcBaseFacilityIncludeUsage.Checked = DefaultCalcBaseManufacturingFacility.IncludeActivityUsage
        Call LoadFacility(IndustryType.Manufacturing, True, False, _
                          ActivityManufacturing, cmbCalcBaseFacilityType, cmbCalcBaseFacilityRegion, cmbCalcBaseFacilitySystem, cmbCalcBaseFacilityorArray, _
                          lblCalcBaseFacilityBonus, lblCalcBaseFacilityDefault, _
                          lblCalcBaseFacilityManualME, txtCalcBaseFacilityManualME, _
                          lblCalcBaseFacilityManualTE, txtCalcBaseFacilityManualTE, _
                          lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax, _
                          btnCalcBaseFacilitySave, lblCalcBaseFacilityTaxRate, _
                          CalcTab, chkCalcBaseFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcBaseFacilityLoaded, Nothing, 1, 0, 0, False)
        If cmbCalcBaseFacilityType.Text = POSFacility Then
            Call HideFacilityBonusBoxes(lblCalcBaseFacilityBonus, lblCalcBaseFacilityTaxRate, _
                                        lblCalcBaseFacilityManualME, lblCalcBaseFacilityManualTE, _
                                        txtCalcBaseFacilityManualME, txtCalcBaseFacilityManualTE, _
                                        lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax)
            ' Set the default values - need to truncate the names though
            cmbCalcPOSFuelBlocks.Text = GetTruncatedCalcPOSMultiUseArrayName(SelectedCalcPOSFuelBlockFacility.FacilityName)
            cmbCalcPOSLargeShips.Text = GetTruncatedCalcPOSMultiUseArrayName(SelectedCalcPOSLargeShipFacility.FacilityName)
            cmbCalcPOSModules.Text = GetTruncatedCalcPOSMultiUseArrayName(SelectedCalcPOSModuleFacility.FacilityName)
        End If

        ' Hide array selection for non-pos, hide the other drop downs
        If cmbCalcBaseFacilityType.Text = POSFacility Then
            Call SetPOSMultiUseArraysVisibility(True, False)
        Else
            Call SetPOSMultiUseArraysVisibility(False, False)
        End If

        LoadingFacilityActivities = False

    End Sub

    ' Loads the default calc component facility
    Private Sub LoadDefaultCalcComponentFacility()
        ' Based on the settings, load either the cap stuff or the base component stuff
        LoadingFacilityActivities = True
        Call SetComponentFacilityLoaded(chkCalcCapComponentsFacility.Checked, False)
        If UserManufacturingTabSettings.CheckCapitalComponentsFacility Then
            chkCalcComponentFacilityIncludeUsage.Checked = DefaultCalcCapitalComponentManufacturingFacility.IncludeActivityUsage
        Else
            chkCalcComponentFacilityIncludeUsage.Checked = DefaultCalcComponentManufacturingFacility.IncludeActivityUsage
        End If
        Call LoadFacility(GetComponentsIndustryType(UserManufacturingTabSettings.CheckCapitalComponentsFacility), True, False, _
                          ActivityComponentManufacturing, cmbCalcComponentFacilityType, cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                          lblCalcComponentFacilityBonus, lblCalcComponentFacilityDefault, _
                          lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                          lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                          lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                          btnCalcComponentFacilitySave, lblCalcComponentFacilityTaxRate, _
                          CalcTab, chkCalcComponentFacilityIncludeUsage, Nothing, Nothing, Nothing, TempCalcComponentFacilityLoaded, _
                          Nothing, 1, GetComponentsGroupID(UserManufacturingTabSettings.CheckCapitalComponentsFacility), -1, False)
        Call SetComponentFacilityLoaded(chkCalcCapComponentsFacility.Checked, TempCalcComponentFacilityLoaded)
        ' Need to set the other facility as loaded to ensure it doesn't get reloaded on tab, if any changes are made it will reload
        Call SetComponentFacilityLoaded(Not chkCalcCapComponentsFacility.Checked, TempCalcComponentFacilityLoaded)
        LoadingFacilityActivities = False
    End Sub

    Private Sub LoadDefaultCalcT2InventionFacility()
        LoadingFacilityActivities = True
        CalcInventionFacilityLoaded = False
        chkCalcInventionFacilityIncludeUsage.Checked = DefaultCalcInventionFacility.IncludeActivityUsage
        chkCalcInventionFacilityIncludeCost.Checked = DefaultCalcInventionFacility.IncludeActivityCost
        chkCalcInventionFacilityIncludeTime.Checked = DefaultCalcInventionFacility.IncludeActivityTime
        Call LoadFacility(IndustryType.Invention, True, False, _
                          ActivityInvention, cmbCalcInventionFacilityType, cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                          lblCalcInventionFacilityBonus, lblCalcInventionFacilityDefault, _
                          lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                          lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                          lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                          btnCalcInventionFacilitySave, lblCalcInventionFacilityTaxRate, _
                          CalcTab, chkCalcInventionFacilityIncludeUsage, lblCalcInventionInclude, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime, CalcInventionFacilityLoaded, Nothing, 1, 0, 0, False)
        LoadingFacilityActivities = False
    End Sub

    Private Sub LoadDefaultCalcT3InventionFacility()
        LoadingFacilityActivities = True
        CalcT3InventionFacilityLoaded = False
        chkCalcT3InventionFacilityIncludeUsage.Checked = DefaultCalcT3InventionFacility.IncludeActivityUsage
        chkCalcT3InventionFacilityIncludeCost.Checked = DefaultCalcT3InventionFacility.IncludeActivityCost
        chkCalcT3InventionFacilityIncludeTime.Checked = DefaultCalcT3InventionFacility.IncludeActivityTime
        Call LoadFacility(IndustryType.T3Invention, True, False, _
                          ActivityInvention, cmbCalcT3InventionFacilityType, cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                          lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityDefault, _
                          lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                          lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                          lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                          btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityTaxRate, _
                          CalcTab, chkCalcT3InventionFacilityIncludeUsage, lblCalcT3InventionInclude, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime, CalcT3InventionFacilityLoaded, Nothing, 1, StrategicCruiserGroupID, -1, False)
        LoadingFacilityActivities = False
    End Sub

    Private Sub LoadDefaultCalcCopyFacility()
        LoadingFacilityActivities = True
        CalcCopyFacilityLoaded = False
        chkCalcCopyFacilityIncludeUsage.Checked = DefaultCalcCopyFacility.IncludeActivityUsage
        chkCalcCopyFacilityIncludeCost.Checked = DefaultCalcCopyFacility.IncludeActivityCost
        chkCalcCopyFacilityIncludeTime.Checked = DefaultCalcCopyFacility.IncludeActivityTime
        Call LoadFacility(IndustryType.Copying, True, False, _
                          ActivityCopying, cmbCalcCopyFacilityType, cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                          lblCalcCopyFacilityBonus, lblCalcCopyFacilityDefault, _
                          lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                          lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                          lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                          btnCalcCopyFacilitySave, lblCalcCopyFacilityTaxRate, _
                          CalcTab, chkCalcCopyFacilityIncludeUsage, lblCalcCopyInclude, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeTime, CalcCopyFacilityLoaded, Nothing, 1, 0, 0, False)
        LoadingFacilityActivities = False
    End Sub

    Private Sub LoadDefaultCalcNoPOSFacility()
        LoadingFacilityActivities = True
        CalcNoPOSFacilityLoaded = False
        chkCalcNoPOSFacilityIncludeUsage.Checked = DefaultCalcNoPOSFacility.IncludeActivityUsage
        Call LoadFacility(IndustryType.NoPOSManufacturing, True, False, _
                          ActivityManufacturing, cmbCalcNoPOSFacilityType, cmbCalcNoPOSFacilityRegion, cmbCalcNoPOSFacilitySystem, cmbCalcNoPOSFacilityorArray, _
                          lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityDefault, _
                          lblCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualME, _
                          lblCalcNoPOSFacilityManualTE, txtCalcNoPOSFacilityManualTE, _
                          lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax, _
                          btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityTaxRate, _
                          CalcTab, chkCalcNoPOSFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcNoPOSFacilityLoaded, Nothing, 1, -1, SovStructureCategoryID, False)
        LoadingFacilityActivities = False
    End Sub

    Private Sub LoadDefaultCalcSuperFacility()
        LoadingFacilityActivities = True
        CalcSuperFacilityLoaded = False
        chkCalcSuperFacilityIncludeUsage.Checked = DefaultCalcSuperManufacturingFacility.IncludeActivityUsage
        Call LoadFacility(IndustryType.SuperManufacturing, True, False, _
                          ActivityManufacturing, cmbCalcSuperFacilityType, cmbCalcSuperFacilityRegion, cmbCalcSuperFacilitySystem, cmbCalcSuperFacilityorArray, _
                          lblCalcSuperFacilityBonus, lblCalcSuperFacilityDefault, _
                          lblCalcSuperFacilityManualME, txtCalcSuperFacilityManualME, _
                          lblCalcSuperFacilityManualTE, txtCalcSuperFacilityManualTE, _
                          lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax, _
                          btnCalcSuperFacilitySave, lblCalcSuperFacilityTaxRate, _
                          CalcTab, chkCalcSuperFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcSuperFacilityLoaded, Nothing, 1, SupercarrierGroupID, -1, False)
        LoadingFacilityActivities = False
    End Sub

    Private Sub LoadDefaultCalcCapFacility()
        LoadingFacilityActivities = True
        CalcCapitalFacilityLoaded = False
        chkCalcCapitalFacilityIncludeUsage.Checked = DefaultCalcCapitalManufacturingFacility.IncludeActivityUsage
        Call LoadFacility(IndustryType.CapitalManufacturing, True, False, _
                          ActivityManufacturing, cmbCalcCapitalFacilityType, cmbCalcCapitalFacilityRegion, cmbCalcCapitalFacilitySystem, cmbCalcCapitalFacilityorArray, _
                          lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityDefault, _
                          lblCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualME, _
                          lblCalcCapitalFacilityManualTE, txtCalcCapitalFacilityManualTE, _
                          lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax, _
                          btnCalcCapitalFacilitySave, lblCalcCapitalFacilityTaxRate, _
                          CalcTab, chkCalcCapitalFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcCapitalFacilityLoaded, Nothing, 1, DreadnoughtGroupID, -1, False)

        LoadingFacilityActivities = False
    End Sub

    Private Sub LoadDefaultCalcT3Facility()
        ' Based on the settings, load either the T3 Cruiser or Destroyer facility
        LoadingFacilityActivities = True
        Call SetT3FacilityLoaded(chkCalcT3DestroyersFacility.Checked, False)
        If UserManufacturingTabSettings.CheckT3DestroyerFacility Then
            chkCalcCapitalFacilityIncludeUsage.Checked = DefaultCalcT3DestroyerManufacturingFacility.IncludeActivityUsage
        Else
            chkCalcCapitalFacilityIncludeUsage.Checked = DefaultCalcT3CruiserManufacturingFacility.IncludeActivityUsage
        End If
        Call LoadFacility(GetT3ShipIndustryType(UserManufacturingTabSettings.CheckT3DestroyerFacility), True, False, _
                          ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                          lblCalcT3FacilityBonus, lblCalcT3FacilityDefault, _
                          lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                          lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                          lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                          btnCalcT3FacilitySave, lblCalcT3FacilityTaxRate, _
                          CalcTab, chkCalcT3FacilityIncludeUsage, Nothing, Nothing, Nothing, TempCalcT3FacilityLoaded, Nothing, _
                          1, GetT3ShipGroupID(UserManufacturingTabSettings.CheckT3DestroyerFacility), -1, False)
        Call SetT3FacilityLoaded(chkCalcT3DestroyersFacility.Checked, TempCalcT3FacilityLoaded)
        ' Need to set the other facility as loaded to ensure it doesn't get reloaded on tab, if any changes are made it will reload
        Call SetComponentFacilityLoaded(Not chkCalcT3DestroyersFacility.Checked, TempCalcT3FacilityLoaded)
        LoadingFacilityActivities = False
    End Sub

    Private Sub LoadDefaultCalcSubsystemFacility()
        LoadingFacilityActivities = True
        CalcSubsystemFacilityLoaded = False
        chkCalcSubsystemFacilityIncludeUsage.Checked = DefaultCalcSubsystemManufacturingFacility.IncludeActivityUsage
        Call LoadFacility(IndustryType.SubsystemManufacturing, True, False, _
                          ActivityManufacturing, cmbCalcSubsystemFacilityType, cmbCalcSubsystemFacilityRegion, cmbCalcSubsystemFacilitySystem, cmbCalcSubsystemFacilityorArray, _
                          lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityDefault, _
                          lblCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualME, _
                          lblCalcSubsystemFacilityManualTE, txtCalcSubsystemFacilityManualTE, _
                          lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax, _
                          btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityTaxRate, _
                          CalcTab, chkCalcSubsystemFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcSubsystemFacilityLoaded, Nothing, 1, -1, SubsystemCategoryID, False)
        LoadingFacilityActivities = False
    End Sub

    Private Sub LoadDefaultCalcBoosterFacility()
        LoadingFacilityActivities = True
        CalcBoosterFacilityLoaded = False
        chkCalcBoosterFacilityIncludeUsage.Checked = DefaultCalcBoosterManufacturingFacility.IncludeActivityUsage
        Call LoadFacility(IndustryType.BoosterManufacturing, True, False, _
                          ActivityManufacturing, cmbCalcBoosterFacilityType, cmbCalcBoosterFacilityRegion, cmbCalcBoosterFacilitySystem, cmbCalcBoosterFacilityorArray, _
                          lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityDefault, _
                          lblCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualME, _
                          lblCalcBoosterFacilityManualTE, txtCalcBoosterFacilityManualTE, _
                          lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax, _
                          btnCalcBoosterFacilitySave, lblCalcBoosterFacilityTaxRate, _
                          CalcTab, chkCalcBoosterFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcBoosterFacilityLoaded, Nothing, 1, BoosterGroupID, -1, False)
        LoadingFacilityActivities = False
    End Sub

    ' Saves all the settings on the screen
    Private Sub btnCalcSaveSettings_Click(sender As System.Object, e As System.EventArgs) Handles btnCalcSaveSettings.Click
        Dim TempSettings As ManufacturingTabSettings = Nothing
        Dim Settings As New ProgramSettings

        ' If they entered an ME/TE value make sure it's ok
        If Trim(txtCalcTempME.Text) <> "" Then
            If Not IsNumeric(txtCalcTempME.Text) Then
                MsgBox("Invalid Temp ME value", vbExclamation, Application.ProductName)
                txtCalcTempME.Focus()
                Exit Sub
            End If
        End If

        If Trim(txtCalcTempTE.Text) <> "" Then
            If Not IsNumeric(txtCalcTempTE.Text) Then
                MsgBox("Invalid Temp TE value", vbExclamation, Application.ProductName)
                txtCalcTempTE.Focus()
                Exit Sub
            End If
        End If

        If Trim(txtCalcSVRThreshold.Text) <> "" Then
            If Not IsNumeric(txtCalcSVRThreshold.Text) Then
                MsgBox("Invalid SVR Threshold value", vbExclamation, Application.ProductName)
                txtCalcSVRThreshold.Focus()
                Exit Sub
            End If
        End If

        If Trim(txtCalcProdLines.Text) <> "" Then
            If Not IsNumeric(txtCalcProdLines.Text) Then
                MsgBox("Invalid Production Lines Value", vbExclamation, Application.ProductName)
                txtCalcProdLines.Focus()
                Exit Sub
            End If
        End If

        If Trim(txtCalcLabLines.Text) <> "" Then
            If Not IsNumeric(txtCalcLabLines.Text) Then
                MsgBox("Invalid Laboratory Lines Value", vbExclamation, Application.ProductName)
                txtCalcLabLines.Focus()
                Exit Sub
            End If
        End If

        If Trim(txtCalcRuns.Text) <> "" Then
            If Not IsNumeric(txtCalcRuns.Text) Then
                MsgBox("Invalid Runs Value", vbExclamation, Application.ProductName)
                txtCalcRuns.Focus()
                Exit Sub
            End If
        End If

        With TempSettings
            .CheckBPTypeAmmoCharges = chkCalcAmmo.Checked
            .CheckBPTypeBoosters = chkCalcBoosters.Checked
            .CheckBPTypeComponents = chkCalcComponents.Checked
            .CheckBPTypeDrones = chkCalcDrones.Checked
            .CheckBPTypeModules = chkCalcModules.Checked
            .CheckBPTypeRigs = chkCalcRigs.Checked
            .CheckBPTypeShips = chkCalcShips.Checked
            .CheckBPTypeSubsystems = chkCalcSubsystems.Checked
            .CheckBPTypeStructures = chkCalcStructures.Checked
            .CheckBPTypeMisc = chkCalcMisc.Checked
            .CheckBPTypeDeployables = chkCalcDeployables.Checked
            .CheckBPTypeCelestials = chkCalcCelestials.Checked
            .CheckBPTypeStationParts = chkCalcStationParts.Checked

            .CheckTech1 = chkCalcT1.Checked
            .CheckTech2 = chkCalcT2.Checked
            .CheckTech3 = chkCalcT3.Checked
            .CheckTechStoryline = chkCalcStoryline.Checked
            .CheckTechPirate = chkCalcPirateFaction.Checked
            .CheckTechNavy = chkCalcNavyFaction.Checked

            .CheckCapitalComponentsFacility = chkCalcCapComponentsFacility.Checked
            .CheckT3DestroyerFacility = chkCalcT3DestroyersFacility.Checked

            .CheckAutoCalcNumBPs = chkCalcAutoCalcT2NumBPs.Checked

            ' Blueprint load types
            If rbtnCalcAllBPs.Checked Then
                .BlueprintType = rbtnCalcAllBPs.Text
            ElseIf rbtnCalcBPOwned.Checked Then
                .BlueprintType = rbtnCalcBPOwned.Text
            End If

            .ItemTypeFilter = cmbCalcBPTypeFilter.Text
            .TextItemFilter = txtCalcItemFilter.Text

            .CheckIncludeTaxes = chkCalcTaxes.Checked
            .CheckIncludeBrokersFees = chkCalcFees.Checked

            .CheckDecryptorNone = chkCalcDecryptor1.Checked
            .CheckDecryptor06 = chkCalcDecryptor2.Checked
            .CheckDecryptor09 = chkCalcDecryptor3.Checked
            .CheckDecryptor10 = chkCalcDecryptor4.Checked
            .CheckDecryptor11 = chkCalcDecryptor5.Checked
            .CheckDecryptor12 = chkCalcDecryptor6.Checked
            .CheckDecryptor15 = chkCalcDecryptor7.Checked
            .CheckDecryptor18 = chkCalcDecryptor8.Checked
            .CheckDecryptor19 = chkCalcDecryptor9.Checked

            .CheckDecryptorUseforT2 = chkCalcDecryptorforT2.Checked
            .CheckDecryptorUseforT3 = chkCalcDecryptorforT3.Checked

            .CheckRelicIntact = chkCalcRERelic3.Checked
            .CheckRelicMalfunction = chkCalcRERelic2.Checked
            .CheckRelicWrecked = chkCalcRERelic1.Checked

            .CheckRaceAmarr = chkCalcRaceAmarr.Checked
            .CheckRaceCaldari = chkCalcRaceCaldari.Checked
            .CheckRaceMinmatar = chkCalcRaceMinmatar.Checked
            .CheckRaceGallente = chkCalcRaceGallente.Checked
            .CheckRacePirate = chkCalcRacePirate.Checked
            .CheckRaceOther = chkCalcRaceOther.Checked

            If rbtnCalcIPH.Checked Then
                .SortBy = rbtnCalcIPH.Text
            ElseIf rbtnCalcProfit.Checked Then
                .SortBy = rbtnCalcProfit.Text
            ElseIf rbtnCalcShowProfitPercent.Checked Then
                .SortBy = rbtnCalcShowProfitPercent.Text
            ElseIf rbtnCalcSortSVR.Checked Then
                .SortBy = rbtnCalcSortSVR.Text
            ElseIf rbtnCalcSortSVRIPH.Checked Then
                .SortBy = rbtnCalcSortSVRIPH.Text
            End If

            If rbtnCalcCompareAll.Checked Then
                .PriceCompare = rbtnCalcCompareAll.Text
            ElseIf rbtnCalcCompareBuildBuy.Checked Then
                .PriceCompare = rbtnCalcCompareBuildBuy.Text
            ElseIf rbtnCalcCompareComponents.Checked Then
                .PriceCompare = rbtnCalcCompareComponents.Text
            ElseIf rbtnCalcCompareRawMats.Checked Then
                .PriceCompare = rbtnCalcCompareRawMats.Text
            End If

            .CheckSmall = chkCalcSmall.Checked
            .CheckMedium = chkCalcMedium.Checked
            .CheckLarge = chkCalcLarge.Checked
            .CheckXL = chkCalcXL.Checked

            ' Save these here as well as in settings
            UserApplicationSettings.DefaultBPME = CInt(txtCalcTempME.Text)
            UserApplicationSettings.DefaultBPTE = CInt(txtCalcTempTE.Text)

            Call Settings.SaveApplicationSettings(UserApplicationSettings)

            .AveragePriceDuration = cmbCalcAvgPriceDuration.Text

            .CheckIncludeT2Owned = chkCalcIncludeT2Owned.Checked
            .CheckIncludeT3Owned = chkCalcIncludeT3Owned.Checked

            .IgnoreSVRThreshold = CDbl(txtCalcSVRThreshold.Text)
            .CheckSVRIncludeNull = chkCalcSVRIncludeNull.Checked
            .AveragePriceRegion = cmbCalcSVRRegion.Text
            .ProductionLines = CInt(txtCalcProdLines.Text)
            .LaboratoryLines = CInt(txtCalcLabLines.Text)
            .Runs = CInt(txtCalcRuns.Text)
            .BPRuns = CInt(txtCalcNumBPs.Text)

        End With

        ' Save the data in the XML file
        Call Settings.SaveManufacturingSettings(TempSettings)

        ' Save the column order and width too
        AllSettings.SaveManufacturingTabColumnSettings(UserManufacturingTabColumnSettings)

        ' Save the data to the local variable
        UserManufacturingTabSettings = TempSettings

        MsgBox("Settings Saved", vbInformation, Application.ProductName)

    End Sub

    ' Switches button to calculate
    Public Sub ResetRefresh()
        RefreshCalcData = False
        btnCalculate.Text = "Calculate"
    End Sub

    ' Displays the results of the options on the screen. If Calculate is true, then it will run the calculations. If not, just a preview of the data
    Private Sub DisplayManufacturingResults(ByVal Calculate As Boolean)
        Dim SQL As String
        Dim readerBPs As SQLiteDataReader
        Dim readerIDs As SQLiteDataReader
        Dim readerArray As SQLiteDataReader

        Dim UpdateTypeIDs As New List(Of Long) ' Full list of TypeID's to update SVR data with, these will have Market IDs
        Dim AveragePriceRegionID As Long
        Dim AveragePriceDays As Integer
        Dim readerRegion As SQLiteDataReader

        Dim BaseItems As New List(Of ManufacturingItem) ' Holds all the items and their decryptors, relics, meta etc for initial list
        Dim ManufacturingList As New List(Of ManufacturingItem) ' List of all the items we manufactured - may be different than the item list
        Dim FinalItemList As New List(Of ManufacturingItem) ' Final list of data

        Dim InsertItem As New ManufacturingItem

        Dim ManufacturingBlueprint As Blueprint

        Dim BPList As ListViewItem

        Dim i, j As Integer
        Dim BPRecordCount As Integer = 0
        Dim TotalItemCount As Integer = 0
        Dim TempItemType As Integer = 0

        Dim Response As MsgBoxResult

        Dim InventionDecryptors As New DecryptorList

        Dim OrigME As Integer
        Dim OrigTE As Integer

        Dim AddItem As Boolean

        ' For multi-use pos arrays
        Dim ProcessAllMultiUsePOSArrays As Boolean = False
        Dim ArrayName As String = ""
        Dim MultiUsePOSArrays As List(Of IndustryFacility)

        Dim DecryptorUsed As New Decryptor

        ' T2/T3 variables
        Dim RelicName As String = ""
        Dim InputText As String = ""
        Dim DecryptorName As String = ""

        ' BPC stuff
        Dim CopyPricePerSecond As Double = 0
        Dim T1BPCType As String = ""
        Dim T1BPCName As String = ""
        Dim T1BPCMaxRuns As Integer = 0

        ' SVR Threshold
        Dim SVRThresholdValue As Double
        Dim TypeIDCheck As String = ""

        ' Number of blueprints used
        Dim NumberofBlueprints As Integer

        Dim OriginalBPOwnedFlag As Boolean

        ' If they entered an ME/TE value make sure it's ok
        If Not CorrectMETE(txtCalcTempME.Text, txtCalcTempTE.Text, txtCalcTempME, txtCalcTempTE) Then
            Exit Sub
        End If

        If Trim(cmbCalcAvgPriceDuration.Text) <> "" Then
            If Not IsNumeric(cmbCalcAvgPriceDuration.Text) Then
                MsgBox("Invalid SVR Average Days. Please select a valid number of days from the combo selection box.", vbExclamation, Application.ProductName)
                cmbCalcAvgPriceDuration.Focus()
                cmbCalcAvgPriceDuration.SelectAll()
                Exit Sub
            End If
        End If

        ' Days can only be between 7 and 90 
        ' 7 is because that seems to be the minimum threshold for data returned - 1 day sometimes returns nothing
        ' 90 because the query is for 100 type ids at a time and there is a max of 10k records returned (90 * 100 = 9000"
        If CInt(cmbCalcAvgPriceDuration.Text) < 7 Or CInt(cmbCalcAvgPriceDuration.Text) > 90 Then
            MsgBox("Averge price updates can only be done for greater than 7 or less than 90 days", vbExclamation, Application.ProductName)
            cmbCalcAvgPriceDuration.Focus()
            cmbCalcAvgPriceDuration.SelectAll()
            Exit Sub
        End If

        If Trim(txtCalcProdLines.Text) <> "" Then
            If Not IsNumeric(txtCalcProdLines.Text) Then
                MsgBox("Invalid Production Lines value", vbExclamation, Application.ProductName)
                txtCalcProdLines.Focus()
                txtCalcProdLines.SelectAll()
                Exit Sub
            End If
        End If

        If Val(txtCalcProdLines.Text) = 0 Then
            MsgBox("You must select a non-zero production lines value.", vbExclamation, Application.ProductName)
            txtCalcProdLines.Focus()
            txtCalcProdLines.SelectAll()
            Exit Sub
        End If

        If Trim(txtCalcNumBPs.Text) <> "" Then
            If Not IsNumeric(txtCalcNumBPs.Text) Then
                MsgBox("Invalid Num BPs value", vbExclamation, Application.ProductName)
                txtCalcNumBPs.Focus()
                txtCalcNumBPs.SelectAll()
                Exit Sub
            End If
        End If

        If Val(txtCalcNumBPs.Text) = 0 Then
            MsgBox("You must select a non-zero Num BPs value.", vbExclamation, Application.ProductName)
            txtCalcNumBPs.Focus()
            txtCalcNumBPs.SelectAll()
            Exit Sub
        End If

        If Trim(txtCalcRuns.Text) <> "" Then
            If Not IsNumeric(txtCalcRuns.Text) Then
                MsgBox("Invalid Runs value", vbExclamation, Application.ProductName)
                txtCalcRuns.Focus()
                txtCalcRuns.SelectAll()
                Exit Sub
            End If
        End If

        If Val(txtCalcRuns.Text) = 0 Then
            MsgBox("You must select a non-zero Runs value.", vbExclamation, Application.ProductName)
            txtCalcRuns.Focus()
            txtCalcRuns.SelectAll()
            Exit Sub
        End If

        If Trim(txtCalcLabLines.Text) <> "" Then
            If Not IsNumeric(txtCalcLabLines.Text) Then
                MsgBox("Invalid Laboratory Lines value", vbExclamation, Application.ProductName)
                txtCalcLabLines.Focus()
                txtCalcLabLines.SelectAll()
                Exit Sub
            End If
        End If

        If Val(txtCalcLabLines.Text) = 0 Then
            MsgBox("You must select a non-zero laboratory lines value.", vbExclamation, Application.ProductName)
            txtCalcLabLines.Focus()
            txtCalcLabLines.SelectAll()
            Exit Sub
        End If

        If txtCalcSVRThreshold.Text = "" Then
            SVRThresholdValue = Nothing ' Include everything
        Else
            SVRThresholdValue = CDbl(txtCalcSVRThreshold.Text)
        End If

        ' Save the refresh value since everytime we load the facility it will change it
        Dim SavedRefreshValue As Boolean = RefreshCalcData

        ' Make sure they have a facility loaded - if not, load the default for the type
        ' Base
        If Not CalcBaseFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.Manufacturing, True, True, _
                              ActivityManufacturing, cmbCalcBaseFacilityType, cmbCalcBaseFacilityRegion, cmbCalcBaseFacilitySystem, cmbCalcBaseFacilityorArray, _
                              lblCalcBaseFacilityBonus, lblCalcBaseFacilityDefault, _
                              lblCalcBaseFacilityManualME, txtCalcBaseFacilityManualME, _
                              lblCalcBaseFacilityManualTE, txtCalcBaseFacilityManualTE, _
                              lblCalcBaseFacilityManualTax, txtCalcBaseFacilityManualTax,
                              btnCalcBaseFacilitySave, lblCalcBaseFacilityTaxRate, CalcTab, _
                              chkCalcBaseFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcBaseFacilityLoaded)
        End If

        ' Component
        If Not CalcComponentFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.ComponentManufacturing, True, True, _
                              ActivityComponentManufacturing, cmbCalcComponentFacilityType, cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                              lblCalcComponentFacilityBonus, lblCalcComponentFacilityDefault, _
                              lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                              lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                              lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                              btnCalcComponentFacilitySave, lblCalcComponentFacilityTaxRate, CalcTab, _
                              chkCalcComponentFacilityIncludeUsage, Nothing, Nothing, Nothing, TempCalcComponentFacilityLoaded, _
                              Nothing, 3, 0, ComponentCategoryID)
            Call SetComponentFacilityLoaded(False, TempCalcComponentFacilityLoaded)
        End If

        ' Capital Component
        If Not CalcCapitalComponentFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.CapitalComponentManufacturing, True, True, _
                              ActivityCapComponentManufacturing, cmbCalcComponentFacilityType, cmbCalcComponentFacilityRegion, cmbCalcComponentFacilitySystem, cmbCalcComponentFacilityorArray, _
                              lblCalcComponentFacilityBonus, lblCalcComponentFacilityDefault, _
                              lblCalcComponentFacilityManualME, txtCalcComponentFacilityManualME, _
                              lblCalcComponentFacilityManualTE, txtCalcComponentFacilityManualTE, _
                              lblCalcComponentFacilityManualTax, txtCalcComponentFacilityManualTax, _
                              btnCalcComponentFacilitySave, lblCalcComponentFacilityTaxRate, CalcTab, _
                              chkCalcComponentFacilityIncludeUsage, Nothing, Nothing, Nothing, TempCalcComponentFacilityLoaded, _
                              Nothing, 3, 0, CapitalComponentGroupID)
            Call SetComponentFacilityLoaded(True, TempCalcComponentFacilityLoaded)
        End If

        ' Invention
        If Not CalcInventionFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.Invention, True, True, _
                              ActivityManufacturing, cmbCalcInventionFacilityType, cmbCalcInventionFacilityRegion, cmbCalcInventionFacilitySystem, cmbCalcInventionFacilityorArray, _
                              lblCalcInventionFacilityBonus, lblCalcInventionFacilityDefault, _
                              lblCalcInventionFacilityManualME, txtCalcInventionFacilityManualME, _
                              lblCalcInventionFacilityManualTE, txtCalcInventionFacilityManualTE, _
                              lblCalcInventionFacilityManualTax, txtCalcInventionFacilityManualTax, _
                              btnCalcInventionFacilitySave, lblCalcInventionFacilityTaxRate, CalcTab, _
                              chkCalcInventionFacilityIncludeUsage, lblCalcInventionInclude, chkCalcInventionFacilityIncludeCost, chkCalcInventionFacilityIncludeTime, CalcInventionFacilityLoaded)
        End If

        ' Copy
        If Not CalcCopyFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.Copying, True, True, _
                              ActivityManufacturing, cmbCalcCopyFacilityType, cmbCalcCopyFacilityRegion, cmbCalcCopyFacilitySystem, cmbCalcCopyFacilityorArray, _
                              lblCalcCopyFacilityBonus, lblCalcCopyFacilityDefault, _
                              lblCalcCopyFacilityManualME, txtCalcCopyFacilityManualME, _
                              lblCalcCopyFacilityManualTE, txtCalcCopyFacilityManualTE, _
                              lblCalcCopyFacilityManualTax, txtCalcCopyFacilityManualTax, _
                              btnCalcCopyFacilitySave, lblCalcCopyFacilityTaxRate, CalcTab, _
                              chkCalcCopyFacilityIncludeUsage, lblCalcCopyInclude, chkCalcCopyFacilityIncludeCost, chkCalcCopyFacilityIncludeTime, CalcCopyFacilityLoaded)
        End If

        ' T3 Invention
        If Not CalcT3InventionFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.T3Invention, True, True, _
                              ActivityManufacturing, cmbCalcT3InventionFacilityType, cmbCalcT3InventionFacilityRegion, cmbCalcT3InventionFacilitySystem, cmbCalcT3InventionFacilityorArray, _
                              lblCalcT3InventionFacilityBonus, lblCalcT3InventionFacilityDefault, _
                              lblCalcT3InventionFacilityManualME, txtCalcT3InventionFacilityManualME, _
                              lblCalcT3InventionFacilityManualTE, txtCalcT3InventionFacilityManualTE, _
                              lblCalcT3InventionFacilityManualTax, txtCalcT3InventionFacilityManualTax, _
                              btnCalcT3InventionFacilitySave, lblCalcT3InventionFacilityTaxRate, CalcTab, _
                              chkCalcT3InventionFacilityIncludeUsage, lblCalcT3InventionInclude, chkCalcT3InventionFacilityIncludeCost, chkCalcT3InventionFacilityIncludeTime, CalcT3InventionFacilityLoaded)
        End If

        ' No POS
        If Not CalcNoPOSFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.NoPOSManufacturing, True, True, _
                              ActivityManufacturing, cmbCalcNoPOSFacilityType, cmbCalcNoPOSFacilityRegion, cmbCalcNoPOSFacilitySystem, cmbCalcNoPOSFacilityorArray, _
                              lblCalcNoPOSFacilityBonus, lblCalcNoPOSFacilityDefault, _
                              lblCalcNoPOSFacilityManualME, txtCalcNoPOSFacilityManualME, _
                              lblCalcNoPOSFacilityManualTE, txtCalcNoPOSFacilityManualTE, _
                              lblCalcNoPOSFacilityManualTax, txtCalcNoPOSFacilityManualTax, _
                              btnCalcNoPOSFacilitySave, lblCalcNoPOSFacilityTaxRate, CalcTab, _
                              chkCalcNoPOSFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcNoPOSFacilityLoaded)
        End If

        ' Capital
        If Not CalcCapitalFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.CapitalManufacturing, True, True, _
                              ActivityManufacturing, cmbCalcCapitalFacilityType, cmbCalcCapitalFacilityRegion, cmbCalcCapitalFacilitySystem, cmbCalcCapitalFacilityorArray, _
                              lblCalcCapitalFacilityBonus, lblCalcCapitalFacilityDefault, _
                              lblCalcCapitalFacilityManualME, txtCalcCapitalFacilityManualME, _
                              lblCalcCapitalFacilityManualTE, txtCalcCapitalFacilityManualTE, _
                              lblCalcCapitalFacilityManualTax, txtCalcCapitalFacilityManualTax, _
                              btnCalcCapitalFacilitySave, lblCalcCapitalFacilityTaxRate, CalcTab, _
                              chkCalcCapitalFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcCapitalFacilityLoaded, _
                              Nothing, 3, 0, CapitalIndustrialShipGroupID)
        End If

        ' Super
        If Not CalcSuperFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.SuperManufacturing, True, True, _
                              ActivityManufacturing, cmbCalcSuperFacilityType, cmbCalcSuperFacilityRegion, cmbCalcSuperFacilitySystem, cmbCalcSuperFacilityorArray, _
                              lblCalcSuperFacilityBonus, lblCalcSuperFacilityDefault, _
                              lblCalcSuperFacilityManualME, txtCalcSuperFacilityManualME, _
                              lblCalcSuperFacilityManualTE, txtCalcSuperFacilityManualTE, _
                              lblCalcSuperFacilityManualTax, txtCalcSuperFacilityManualTax, _
                              btnCalcSuperFacilitySave, lblCalcSuperFacilityTaxRate, CalcTab, _
                              chkCalcSuperFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcSuperFacilityLoaded, _
                              Nothing, 3, 0, SupercarrierGroupID)
        End If

        ' T3 Cruisers
        If Not CalcT3FacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.T3CruiserManufacturing, True, True, _
                              ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                              lblCalcT3FacilityBonus, lblCalcT3FacilityDefault, _
                              lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                              lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                              lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                              btnCalcT3FacilitySave, lblCalcT3FacilityTaxRate, CalcTab, _
                              chkCalcT3FacilityIncludeUsage, Nothing, Nothing, Nothing, TempCalcT3FacilityLoaded, _
                              Nothing, 3, StrategicCruiserGroupID, 0)
            Call SetT3FacilityLoaded(False, TempCalcT3FacilityLoaded)
        End If

        ' T3 Destroyers
        If Not CalcT3DestroyerFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.T3DestroyerManufacturing, True, True, _
                              ActivityManufacturing, cmbCalcT3FacilityType, cmbCalcT3FacilityRegion, cmbCalcT3FacilitySystem, cmbCalcT3FacilityorArray, _
                              lblCalcT3FacilityBonus, lblCalcT3FacilityDefault, _
                              lblCalcT3FacilityManualME, txtCalcT3FacilityManualME, _
                              lblCalcT3FacilityManualTE, txtCalcT3FacilityManualTE, _
                              lblCalcT3FacilityManualTax, txtCalcT3FacilityManualTax, _
                              btnCalcT3FacilitySave, lblCalcT3FacilityTaxRate, CalcTab, _
                              chkCalcT3FacilityIncludeUsage, Nothing, Nothing, Nothing, TempCalcT3FacilityLoaded, _
                              Nothing, 3, TacticalDestroyerGroupID, 0)
            Call SetT3FacilityLoaded(True, TempCalcT3FacilityLoaded)
        End If

        ' Subsystem
        If Not CalcSubsystemFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.SubsystemManufacturing, True, True, _
                              ActivityManufacturing, cmbCalcSubsystemFacilityType, cmbCalcSubsystemFacilityRegion, cmbCalcSubsystemFacilitySystem, cmbCalcSubsystemFacilityorArray, _
                              lblCalcSubsystemFacilityBonus, lblCalcSubsystemFacilityDefault, _
                              lblCalcSubsystemFacilityManualME, txtCalcSubsystemFacilityManualME, _
                              lblCalcSubsystemFacilityManualTE, txtCalcSubsystemFacilityManualTE, _
                              lblCalcSubsystemFacilityManualTax, txtCalcSubsystemFacilityManualTax, _
                              btnCalcSubsystemFacilitySave, lblCalcSubsystemFacilityTaxRate, CalcTab, _
                              chkCalcSubsystemFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcSubsystemFacilityLoaded, _
                              Nothing, 3, 0, SubsystemCategoryID)
        End If

        ' Booster
        If Not CalcBoosterFacilityLoaded Then
            ' Get the type of facility we are doing
            Call LoadFacility(IndustryType.BoosterManufacturing, True, True, _
                              ActivityManufacturing, cmbCalcBoosterFacilityType, cmbCalcBoosterFacilityRegion, cmbCalcBoosterFacilitySystem, cmbCalcBoosterFacilityorArray, _
                              lblCalcBoosterFacilityBonus, lblCalcBoosterFacilityDefault, _
                              lblCalcBoosterFacilityManualME, txtCalcBoosterFacilityManualME, _
                              lblCalcBoosterFacilityManualTE, txtCalcBoosterFacilityManualTE, _
                              lblCalcBoosterFacilityManualTax, txtCalcBoosterFacilityManualTax, _
                              btnCalcBoosterFacilitySave, lblCalcBoosterFacilityTaxRate, CalcTab, _
                              chkCalcBoosterFacilityIncludeUsage, Nothing, Nothing, Nothing, CalcBoosterFacilityLoaded, _
                              Nothing, 3, BoosterGroupID, 0)
        End If

        If Not SavedRefreshValue Then
            Application.UseWaitCursor = True
            Me.Cursor = Cursors.WaitCursor
            Application.DoEvents()

            ' Only cancel if they hit the cancel button
            CancelManufacturingCalculate = False
            btnCalculate.Enabled = False
            btnCalcExportList.Enabled = False
            btnCalcReset.Enabled = False
            btnCalcPreview.Enabled = False
            btnCalcSaveSettings.Enabled = False

            ' Get the query for the data
            SQL = BuildManufacturingSelectQuery(BPRecordCount, UserInventedBPs)

            If SQL = "" Then
                ' No valid query so just show nothing
                lstManufacturing.Items.Clear()
                FinalManufacturingItemList = Nothing
                GoTo ExitCalc
            End If

            ' Get data
            DBCommand = New SQLiteCommand(SQL, DB)
            DBCommand.Parameters.AddWithValue("@USERBP_USERID", CStr(SelectedCharacter.ID))
            readerBPs = DBCommand.ExecuteReader

            If Not readerBPs.HasRows Then
                ' No data
                lstManufacturing.Items.Clear()
                ' Clear list of data
                FinalManufacturingItemList = Nothing
                GoTo ExitCalc
            End If

            'Me.Cursor = Cursors.WaitCursor
            pnlProgressBar.Minimum = 0
            pnlProgressBar.Maximum = BPRecordCount
            pnlProgressBar.Value = 0
            pnlProgressBar.Visible = True

            ' Reset the record Iterator
            RecordIDIterator = 0

            pnlStatus.Text = "Building List..."

            ' Add the data to the final list, then display into the grid
            While readerBPs.Read
                Application.DoEvents()

                ' 0-BP_ID, 1-BLUEPRINT_GROUP, 2-BLUEPRINT_NAME, 3-ITEM_GROUP_ID, 4-ITEM_GROUP, 5-ITEM_CATEGORY_ID, 
                ' 6-ITEM_CATEGORY, 7-ITEM_ID, 8-ITEM_NAME, 9-ME, 10-TE, 11-USERID, 12-ITEM_TYPE, 13-RACE_ID, 14-OWNED, 15-SCANNED 
                ' 16-BP_TYPE, 17-UNIQUE_BP_ITEM_ID, 18-FAVORITE, 19-VOLUME, 20-MARKET_GROUP_ID, 21-ADDITIONAL_COSTS, 
                ' 22-LOCATION_ID, 23-QUANTITY, 24-FLAG_ID, 25-RUNS, 26-IGNORE, 27-TECH_LEVEL
                InsertItem = New ManufacturingItem

                ' Reset
                MultiUsePOSArrays = New List(Of IndustryFacility)
                ProcessAllMultiUsePOSArrays = False
                ArrayName = ""

                ' Save the items before adding
                InsertItem.BPID = CLng(readerBPs.GetValue(0)) ' Hidden
                InsertItem.ItemGroupID = readerBPs.GetInt32(3)
                InsertItem.ItemGroup = readerBPs.GetString(4)
                InsertItem.ItemCategoryID = readerBPs.GetInt32(5)
                InsertItem.ItemCategory = readerBPs.GetString(6)
                InsertItem.ItemTypeID = CLng(readerBPs.GetValue(7))
                InsertItem.ItemName = readerBPs.GetString(8)

                ' 1, 2, 14 are T1, T2, T3
                ' 3 is Storyline
                ' 15 is Pirate Faction
                ' 16 is Navy Faction
                TempItemType = CInt(readerBPs.GetValue(12))

                Select Case TempItemType ' For Tech
                    Case 1
                        InsertItem.TechLevel = "T1"
                    Case 2
                        InsertItem.TechLevel = "T2"
                    Case 14
                        InsertItem.TechLevel = "T3"
                    Case 3
                        InsertItem.TechLevel = "Storyline"
                    Case 15
                        InsertItem.TechLevel = "Pirate"
                    Case 16
                        InsertItem.TechLevel = "Navy"
                    Case Else
                        InsertItem.TechLevel = ""
                End Select

                ' Owned flag
                If readerBPs.GetInt32(14) = 0 Then
                    InsertItem.Owned = No
                    OriginalBPOwnedFlag = False
                Else
                    InsertItem.Owned = Yes
                    OriginalBPOwnedFlag = True
                End If

                ' BP Type
                InsertItem.BlueprintType = GetBPType(readerBPs.GetInt32(16))

                ' Save the runs for checking decryptors and relics later
                InsertItem.SavedBPRuns = readerBPs.GetInt32(25)

                ' ME value, either what the entered or in the table
                Select Case TempItemType
                    Case 3, 15, 16
                        ' Storyline, Pirate, and Navy can't be updated
                        InsertItem.BPME = 0
                    Case 2, 14 ' T2 or T3 - either Invented, or BPO
                        If InsertItem.Owned = No Then
                            InsertItem.BPME = BaseT2T3ME
                        Else
                            ' Use what they entered
                            InsertItem.BPME = CInt(readerBPs.GetValue(9))
                        End If
                    Case Else
                        If InsertItem.Owned = No Then
                            ' Use the default
                            InsertItem.BPME = CInt(txtCalcTempME.Text)
                        Else
                            ' Use what they entered
                            InsertItem.BPME = CInt(readerBPs.GetValue(9))
                        End If
                End Select

                ' TE value, either what the entered or in the table
                Select Case TempItemType
                    Case 3, 15, 16
                        ' Storyline, Pirate, and Navy can't be updated
                        InsertItem.BPTE = 0
                    Case 2, 14 ' T2 or T3 - either Invented, or BPO
                        If InsertItem.Owned = No Then
                            InsertItem.BPTE = BaseT2T3TE
                        Else
                            ' Use what they entered
                            InsertItem.BPTE = CInt(readerBPs.GetValue(10))
                        End If
                    Case Else
                        If InsertItem.Owned = No Then
                            ' Use the default
                            InsertItem.BPTE = CInt(txtCalcTempTE.Text)
                        Else
                            ' Use what they entered
                            InsertItem.BPTE = CInt(readerBPs.GetValue(10))
                        End If
                End Select

                ' Default to building/inventing/RE'ing all
                InsertItem.CanBuildBP = True
                InsertItem.CanInvent = True
                InsertItem.CanRE = True

                ' Default prices
                InsertItem.Profit = 0
                InsertItem.ProfitPercent = 0
                InsertItem.IPH = 0

                ' Save the original ME/TE
                OrigME = CInt(InsertItem.BPME)
                OrigTE = CInt(InsertItem.BPTE)

                ' Set all the teams regardless of tech used
                InsertItem.ManufacturingTeam = SelectedCalcManufacturingTeam
                InsertItem.ComponentTeam = SelectedCalcComponentManufacturingTeam
                InsertItem.InventionTeam = SelectedCalcInventionTeam
                InsertItem.CopyTeam = SelectedCalcCopyTeam

                ' Runs and lines
                InsertItem.Runs = CInt(txtCalcRuns.Text)
                InsertItem.ProductionLines = CInt(txtCalcProdLines.Text)
                InsertItem.LaboratoryLines = CInt(txtCalcLabLines.Text)

                ' Reset all the industry facilities
                InsertItem.ManufacturingFacility = New IndustryFacility
                InsertItem.ComponentManufacturingFacility = New IndustryFacility
                InsertItem.CopyFacility = New IndustryFacility
                InsertItem.InventionFacility = New IndustryFacility

                Dim SelectedIndyType As IndustryType

                ' Set the facility for manufacturing
                If cmbCalcBaseFacilityType.Text = POSFacility Then
                    ' If this is visible, then look up as a pos, else just look up normally
                    SelectedIndyType = GetProductionType(ActivityManufacturing, InsertItem.ItemGroupID, InsertItem.ItemCategoryID, POSFacility)
                    ' See if we will have to add duplicate entries for each type of multi-use array
                    Select Case SelectedIndyType
                        Case IndustryType.POSFuelBlockManufacturing
                            If cmbCalcPOSFuelBlocks.Text = "All" Then
                                ProcessAllMultiUsePOSArrays = True
                            Else
                                ProcessAllMultiUsePOSArrays = False
                                ArrayName = GetCalcPOSMultiUseArrayName(cmbCalcPOSFuelBlocks.Text)
                            End If
                        Case IndustryType.POSLargeShipManufacturing
                            If cmbCalcPOSLargeShips.Text = "All" Then
                                ProcessAllMultiUsePOSArrays = True
                            Else
                                ProcessAllMultiUsePOSArrays = False
                                ArrayName = GetCalcPOSMultiUseArrayName(cmbCalcPOSLargeShips.Text)
                            End If
                        Case IndustryType.POSModuleManufacturing
                            If cmbCalcPOSModules.Text = "All" Then
                                ProcessAllMultiUsePOSArrays = True
                            Else
                                ProcessAllMultiUsePOSArrays = False
                                ArrayName = GetCalcPOSMultiUseArrayName(cmbCalcPOSModules.Text)
                            End If
                        Case Else
                            ProcessAllMultiUsePOSArrays = False
                            ArrayName = ""
                    End Select

                    If SelectedIndyType <> IndustryType.NoPOSManufacturing Then
                        ' Need to autoselect the pos array by type of blueprint
                        SQL = "SELECT DISTINCT ARRAY_NAME, MATERIAL_MULTIPLIER, TIME_MULTIPLIER FROM ASSEMBLY_ARRAYS "
                        SQL = SQL & "WHERE ACTIVITY_ID = "
                        SQL = SQL & CStr(IndustryActivities.Manufacturing) & " "
                        ' Check groups and categories
                        SQL = SQL & GetFacilityCatGroupIDSQL(InsertItem.ItemCategoryID, InsertItem.ItemGroupID, IndustryActivities.Manufacturing) & " "
                        If ArrayName <> "" Then
                            SQL = SQL & "AND ARRAY_NAME = '" & ArrayName & "'"
                        End If

                        DBCommand = New SQLiteCommand(SQL, DB)
                        readerArray = DBCommand.ExecuteReader

                        While readerArray.Read()
                            ' Set the facility
                            InsertItem.ManufacturingFacility = CType(SelectedCalcBaseManufacturingFacility.Clone, IndustryFacility)
                            InsertItem.ManufacturingFacility.FacilityName = readerArray.GetString(0)
                            InsertItem.ManufacturingFacility.MaterialMultiplier = readerArray.GetDouble(1)
                            InsertItem.ManufacturingFacility.TimeMultiplier = readerArray.GetDouble(2)
                            InsertItem.ManufacturingFacility.TaxRate = POSTaxRate

                            ' Add the facility if multiple
                            If ProcessAllMultiUsePOSArrays Then
                                Call MultiUsePOSArrays.Add(InsertItem.ManufacturingFacility)
                            End If
                        End While
                    Else
                        ' Load the NO POS facility
                        InsertItem.ManufacturingFacility = GetManufacturingFacility(SelectedIndyType, CalcTab)
                    End If
                Else
                    ' Nothing special, just set it to the current selected facility for this type
                    InsertItem.ManufacturingFacility = GetManufacturingFacility(GetProductionType(ActivityManufacturing, InsertItem.ItemGroupID, InsertItem.ItemCategoryID, StationFacility), CalcTab)
                End If

                ' Set the component, and copy facilities
                InsertItem.ComponentManufacturingFacility = SelectedCalcComponentManufacturingFacility
                InsertItem.CapComponentManufacturingFacility = SelectedCalcCapitalComponentManufacturingFacility
                InsertItem.CopyFacility = SelectedCalcCopyFacility

                ' Now determine how many copies of the base item we need with different data changed
                ' If T1, just select compare types (raw and components)
                ' If T2, first select each decryptor, then select Compare types (raw and components)
                ' If T3, first choose a decryptor, then Relic, then select compare types (raw and components)
                ' Insert each different combination
                If InsertItem.TechLevel = "T2" Or InsertItem.TechLevel = "T3" Then

                    ' For determining the owned blueprints
                    Dim TempDecryptors As New DecryptorList
                    Dim OriginalRelicUsed As String = ""
                    Dim CheckOwnedBP As Boolean = False
                    Dim OriginalBPType As BPType = InsertItem.BlueprintType
                    Dim OriginalDecryptorUsed As Decryptor = TempDecryptors.GetDecryptor(OrigME, OrigTE, InsertItem.SavedBPRuns, CInt(InsertItem.TechLevel.Substring(1)))
                    If InsertItem.TechLevel = "T3" Then
                        OriginalRelicUsed = GetRelicfromInputs(OriginalDecryptorUsed, InsertItem.BPID, InsertItem.SavedBPRuns)
                    End If

                    ' Now add additional records for each decryptor
                    For j = 1 To CalcDecryptorCheckBoxes.Count - 1
                        If CalcDecryptorCheckBoxes(j).Checked Then

                            ' These are all invented BPCs, BPC and BPOs are added separately below
                            InsertItem.BlueprintType = BPType.InventedBPC

                            ' If they are not using for T2 or T3 then only add No Decyrptor and exit for
                            If CalcDecryptorCheckBoxes(j).Text <> None _
                                And ((InsertItem.TechLevel = "T2" And chkCalcDecryptorforT2.Enabled And chkCalcDecryptorforT2.Checked) _
                                Or (InsertItem.TechLevel = "T3" And chkCalcDecryptorforT3.Enabled And chkCalcDecryptorforT3.Checked)) Then

                                ' Select a decryptor
                                DecryptorUsed = InventionDecryptors.GetDecryptor(CDbl(CalcDecryptorCheckBoxes(j).Text.Substring(0, 3)))

                                ' Add decryptor
                                InsertItem.Decryptor = DecryptorUsed
                                InsertItem.Inputs = DecryptorUsed.Name
                                InsertItem.BPME = BaseT2T3ME + InsertItem.Decryptor.MEMod
                                InsertItem.BPTE = BaseT2T3TE + InsertItem.Decryptor.TEMod

                            Else
                                ' Add no decryptor, this is a copy or bpo
                                InsertItem.Decryptor = NoDecryptor
                                InsertItem.Inputs = NoDecryptor.Name
                                InsertItem.BPME = BaseT2T3ME
                                InsertItem.BPTE = BaseT2T3TE
                            End If

                            ' Teams and facilities
                            If InsertItem.TechLevel = "T2" Then
                                InsertItem.InventionFacility = SelectedCalcInventionFacility
                                InsertItem.CopyFacility = SelectedCalcCopyFacility
                                InsertItem.CopyTeam = SelectedCalcCopyTeam
                            ElseIf InsertItem.TechLevel = "T3" Then
                                InsertItem.InventionFacility = SelectedCalcT3InventionFacility
                                InsertItem.CopyFacility = NoFacility
                                InsertItem.CopyTeam = NoTeam
                            End If

                            InsertItem.InventionTeam = NoTeam ' Disable until CCP implements

                            Dim BaseInputs As String = InsertItem.Inputs

                            ' Relics
                            If InsertItem.TechLevel = "T3" Then
                                ' Loop through each relic check box and process for each decryptor
                                For k = 1 To CalcRelicCheckboxes.Count - 1
                                    If CalcRelicCheckboxes(k).Checked Then
                                        InsertItem.Relic = CalcRelicCheckboxes(k).Text
                                        ' Add to the inputs
                                        InsertItem.Inputs = BaseInputs & " - " & InsertItem.Relic
                                        ' Set the owned flag before inserting
                                        CheckOwnedBP = SetItemOwnedFlag(InsertItem, OriginalDecryptorUsed, OriginalRelicUsed, OrigME, OrigTE, OriginalBPOwnedFlag)
                                        If rbtnCalcAllBPs.Checked Or (chkCalcIncludeT3Owned.Checked) Or _
                                            (rbtnCalcBPOwned.Checked And CheckOwnedBP) Then
                                            ' Insert the item 
                                            Call InsertItemCalcType(BaseItems, InsertItem, ProcessAllMultiUsePOSArrays, MultiUsePOSArrays, False, False, False)
                                        End If
                                    End If
                                Next
                            Else
                                ' No relic for T2
                                InsertItem.Relic = ""
                                ' Set the owned flag before inserting
                                CheckOwnedBP = SetItemOwnedFlag(InsertItem, OriginalDecryptorUsed, OriginalRelicUsed, OrigME, OrigTE, OriginalBPOwnedFlag)
                                If rbtnCalcAllBPs.Checked Or (chkCalcIncludeT2Owned.Checked And UserInventedBPs.Contains(InsertItem.BPID)) Or _
                                    (rbtnCalcBPOwned.Checked And CheckOwnedBP) Then
                                    ' Insert the item 
                                    Call InsertItemCalcType(BaseItems, InsertItem, ProcessAllMultiUsePOSArrays, MultiUsePOSArrays, False, False, False)
                                End If
                            End If

                            ' If they don't want to include decryptors, then exit loop after adding none
                            If (InsertItem.TechLevel = "T2" And (chkCalcDecryptorforT2.Enabled = False Or chkCalcDecryptorforT2.Checked = False)) _
                                    Or (InsertItem.TechLevel = "T3" And (chkCalcDecryptorforT3.Enabled = False Or chkCalcDecryptorforT3.Checked = False)) Then
                                Exit For
                            End If
                        End If
                    Next

                    ' Finally, see if the original blueprint was not invented and then add it separately - BPCs and BPOs (should only be T2)
                    If OriginalBPType = BPType.Copy Or OriginalBPType = BPType.Original Then
                        ' Get the original me/te
                        InsertItem.BPME = OrigME
                        InsertItem.BPTE = OrigTE
                        InsertItem.Owned = Yes
                        InsertItem.Inputs = Unknown
                        InsertItem.BlueprintType = OriginalBPType

                        ' Insert the item 
                        Call InsertItemCalcType(BaseItems, InsertItem, ProcessAllMultiUsePOSArrays, MultiUsePOSArrays, False, False, False)
                    End If

                Else ' All T1 and others
                    InsertItem.Inputs = None
                    InsertItem.Relic = ""
                    InsertItem.Decryptor = NoDecryptor

                    InsertItem.InventionFacility = NoFacility
                    InsertItem.CopyFacility = NoFacility
                    InsertItem.CopyTeam = NoTeam
                    InsertItem.InventionTeam = NoTeam

                    ' Insert the items based on compare types
                    Call InsertItemCalcType(BaseItems, InsertItem, ProcessAllMultiUsePOSArrays, MultiUsePOSArrays, False, False, False)
                End If

                ' For each record, update the progress bar
                Call IncrementToolStripProgressBar(pnlProgressBar)

            End While


            Application.DoEvents()

            readerBPs.Close()
            readerBPs = Nothing
            DBCommand = Nothing

            TotalItemCount = BaseItems.Count
            RecordIDIterator = 0 ' Reset the iterator for new list

            ' *** Calculate ***
            ' Got all the data, now see if they want to calculate prices
            If Calculate Then
                If TotalItemCount > 250 Then
                    ' Make sure they know this will take a bit to run - unless this is fairly quick
                    Response = MsgBox("This may take some time to complete. Do you want to continue?", vbYesNo, Me.Text)

                    If Response = vbNo Then
                        ' Just display the results of the query
                        GoTo DisplayResults
                    End If
                End If

                gbCalcBPSelectOptions.Enabled = False
                lstManufacturing.Enabled = False

                If Not UserApplicationSettings.DisableSVR Then

                    ' First thing we want to do is update the manufactured item prices
                    pnlStatus.Text = "Updating Item Average Sales..."
                    pnlProgressBar.Visible = False
                    Application.DoEvents()

                    ' First find out which of the typeIDs in BaseItems have MarketID's
                    For i = 0 To BaseItems.Count - 1
                        TypeIDCheck = TypeIDCheck & BaseItems(i).ItemTypeID & ","
                    Next

                    ' Format string
                    TypeIDCheck = "(" & TypeIDCheck.Substring(0, Len(TypeIDCheck) - 1) & ")"
                    SQL = "SELECT typeID FROM INVENTORY_TYPES WHERE typeID IN " & TypeIDCheck & " AND marketGroupID IS NOT NULL"
                    DBCommand = New SQLiteCommand(SQL, DB)
                    readerIDs = DBCommand.ExecuteReader

                    ' Now add these to the list
                    While readerIDs.Read()
                        If Not UpdateTypeIDs.Contains(readerIDs.GetInt64(0)) Then
                            UpdateTypeIDs.Add(readerIDs.GetInt64(0))
                        End If
                    End While

                    ' Get the region ID
                    SQL = "SELECT regionID FROM REGIONS WHERE regionName ='" & cmbCalcSVRRegion.Text & "'"
                    DBCommand = New SQLiteCommand(SQL, DB)
                    readerRegion = DBCommand.ExecuteReader

                    If readerRegion.Read Then
                        AveragePriceRegionID = readerRegion.GetInt64(0)
                    Else
                        AveragePriceRegionID = TheForgeTypeID ' The Forge as default
                        cmbCalcSVRRegion.Text = "The Forge"
                    End If

                    AveragePriceDays = CInt(cmbCalcAvgPriceDuration.Text)

                    ' Update the prices
                    Call UpdateAverageItemPrices(UpdateTypeIDs, AveragePriceRegionID, AveragePriceDays)

                End If

                pnlStatus.Text = "Calculating..."
                pnlProgressBar.Minimum = 0
                pnlProgressBar.Maximum = TotalItemCount
                pnlProgressBar.Value = 0
                pnlProgressBar.Visible = True

                Application.DoEvents()

                ' Loop through the item list and calculate data
                For i = 0 To BaseItems.Count - 1

                    Application.DoEvents()

                    InsertItem = BaseItems(i)

                    ' If they cancel the calc
                    If CancelManufacturingCalculate Then
                        lstManufacturing.Items.Clear()
                        pnlStatus.Text = ""
                        pnlProgressBar.Visible = False
                        btnCalculate.Enabled = False
                        btnCalcExportList.Enabled = True

                        btnCalcReset.Enabled = True
                        btnCalcPreview.Enabled = True

                        gbCalcBPSelectOptions.Enabled = True

                        Me.Cursor = Cursors.Default
                        lstManufacturing.Enabled = True
                        Application.DoEvents()
                        GoTo ExitCalc
                    End If

                    ' Set the number of BPs
                    With InsertItem
                        If (.TechLevel = "T2" Or .TechLevel = "T3") And chkCalcAutoCalcT2NumBPs.Checked = True And (.BlueprintType = BPType.InventedBPC Or .BlueprintType = BPType.NotOwned) Then
                            ' For T3 or if they have calc checked, we will never have a BPO so determine the number of BPs
                            NumberofBlueprints = GetUsedNumBPs(.BPID, CInt(.TechLevel.Substring(1, 1)), .Runs, .ProductionLines, .NumBPs, .Decryptor.RunMod)
                        Else
                            NumberofBlueprints = CInt(txtCalcNumBPs.Text)
                        End If
                    End With

                    ' Construct the BP
                    ManufacturingBlueprint = New Blueprint(InsertItem.BPID, CInt(txtCalcRuns.Text), InsertItem.BPME, InsertItem.BPTE, _
                                   NumberofBlueprints, CInt(txtCalcProdLines.Text), SelectedCharacter, _
                                   UserApplicationSettings, rbtnCalcCompareBuildBuy.Checked, 0, InsertItem.ManufacturingTeam, InsertItem.ManufacturingFacility, _
                                   InsertItem.ComponentTeam, InsertItem.ComponentManufacturingFacility, InsertItem.CapComponentManufacturingFacility)

                    ' Set the T2 and T3 inputs if necessary
                    If ((InsertItem.TechLevel = "T2" Or InsertItem.TechLevel = "T3") And InsertItem.BlueprintType = BPType.InventedBPC) And chkCalcIgnoreInvention.Checked = False Then

                        ' Strip off the relic if in here for the decryptor
                        If InsertItem.Inputs.Contains("-") Then
                            InputText = InsertItem.Inputs.Substring(0, InStr(InsertItem.Inputs, "-") - 2)
                        Else
                            InputText = InsertItem.Inputs
                        End If

                        If InputText = None Then
                            SelectedDecryptor = NoDecryptor
                        Else ' A decryptor is set
                            SelectedDecryptor = InventionDecryptors.GetDecryptor(InputText)
                        End If

                        ' Construct the T2/T3 BP
                        Call ManufacturingBlueprint.InventBlueprint(CInt(txtCalcLabLines.Text), SelectedDecryptor, InsertItem.InventionFacility, InsertItem.InventionTeam, _
                                                               InsertItem.CopyFacility, InsertItem.CopyTeam, GetInventItemTypeID(InsertItem.BPID, InsertItem.Relic))

                    End If

                    ' Build the blueprint(s)
                    Call ManufacturingBlueprint.BuildItems(chkCalcTaxes.Checked, chkCalcFees.Checked, chkCalcBaseFacilityIncludeUsage.Checked, chkCalcIgnoreMinerals.Checked, chkCalcIgnoreT1Item.Checked)

                    ' If checked, Add the values to the array only if we can Build, Invent, or RE it
                    AddItem = True

                    ' User can Build
                    If chkCalcCanBuild.Checked And Not ManufacturingBlueprint.UserCanBuildBlueprint Then
                        AddItem = False
                    End If

                    ' User can Invent
                    If chkCalcCanInvent.Checked And Not ManufacturingBlueprint.UserCanInventRE And ManufacturingBlueprint.GetTechLevel = 2 Then
                        AddItem = False
                    End If

                    ' User can RE
                    If chkCalcCanRE.Checked And Not ManufacturingBlueprint.UserCanInventRE And ManufacturingBlueprint.GetTechLevel = 3 Then
                        AddItem = False
                    End If

                    ' Adjust the item with calculations
                    If AddItem Then
                        Application.DoEvents()
                        InsertItem.CanBuildBP = ManufacturingBlueprint.UserCanBuildBlueprint
                        InsertItem.CanInvent = ManufacturingBlueprint.UserCanInventRE
                        InsertItem.CanRE = ManufacturingBlueprint.UserCanInventRE

                        ' Get the output data
                        If rbtnCalcCompareAll.Checked Then
                            ' Need to add a record for each of the three types

                            ' *** For components, only add if it has buildable components
                            If ManufacturingBlueprint.HasComponents Then
                                ' Components first
                                InsertItem.ItemMarketPrice = ManufacturingBlueprint.GetItemMarketPrice
                                InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalComponentProfitPercent
                                InsertItem.Profit = ManufacturingBlueprint.GetTotalComponentProfit
                                InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourComponents
                                InsertItem.CalcType = "Components"
                                InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, AveragePriceRegionID, AveragePriceDays, ManufacturingBlueprint.GetProductionTime, ManufacturingBlueprint.GetTotalUnits)
                                InsertItem.SVRxIPH = IIf(IsNothing(InsertItem.SVR), 0, CType(InsertItem.SVR, Double) * InsertItem.IPH)
                                InsertItem.TotalCost = ManufacturingBlueprint.GetTotalComponentCost
                                InsertItem.Taxes = ManufacturingBlueprint.GetSalesTaxes
                                InsertItem.BrokerFees = ManufacturingBlueprint.GetSalesBrokerFees

                                InsertItem.SingleInventedBPCRunsperBPC = ManufacturingBlueprint.GetSingleInventedBPCRuns

                                InsertItem.BPProductionTime = FormatIPHTime(ManufacturingBlueprint.GetProductionTime)
                                InsertItem.TotalProductionTime = FormatIPHTime(ManufacturingBlueprint.GetProductionTime) ' Total production time for components only is always the bp production time
                                InsertItem.CopyTime = FormatIPHTime(ManufacturingBlueprint.GetCopyTime)
                                InsertItem.InventionTime = FormatIPHTime(ManufacturingBlueprint.GetInventionTime)

                                InsertItem.BaseJobCost = ManufacturingBlueprint.GetBaseJobCost
                                InsertItem.JobFee = ManufacturingBlueprint.GetJobFee

                                InsertItem.NumBPs = ManufacturingBlueprint.GetUsedNumBPs
                                InsertItem.InventionChance = ManufacturingBlueprint.GetInventionChance
                                InsertItem.Race = GetRace(ManufacturingBlueprint.GetRaceID)
                                InsertItem.VolumeperItem = ManufacturingBlueprint.GetItemVolume
                                InsertItem.TotalVolume = ManufacturingBlueprint.GetTotalItemVolume

                                If ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T2 Or ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T3 Then
                                    InsertItem.InventionCost = ManufacturingBlueprint.GetInventionCost
                                Else
                                    InsertItem.InventionCost = 0
                                End If

                                If ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T2 Then
                                    InsertItem.CopyCost = ManufacturingBlueprint.GetCopyCost
                                Else
                                    InsertItem.CopyCost = 0
                                End If

                                ' Usage
                                InsertItem.ManufacturingFacilityUsage = ManufacturingBlueprint.GetManufacturingFacilityUsage
                                ' Don't build components in this calculation
                                InsertItem.ComponentManufacturingFacilityUsage = 0
                                InsertItem.CapComponentManufacturingFacilityUsage = 0
                                InsertItem.CopyFacilityUsage = ManufacturingBlueprint.GetCopyUsage
                                InsertItem.InventionFacilityUsage = ManufacturingBlueprint.GetInventionUsage

                                ' Insert Components Item
                                Call InsertManufacturingItem(InsertItem, SVRThresholdValue, chkCalcSVRIncludeNull.Checked, ManufacturingList)
                            End If

                            ' *** Raw Mats - always add
                            InsertItem.ItemMarketPrice = ManufacturingBlueprint.GetItemMarketPrice
                            InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalRawProfitPercent
                            InsertItem.Profit = ManufacturingBlueprint.GetTotalRawProfit
                            InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourRaw
                            InsertItem.CalcType = "Raw Materials"
                            InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, AveragePriceRegionID, AveragePriceDays, ManufacturingBlueprint.GetTotalProductionTime, ManufacturingBlueprint.GetTotalUnits)
                            InsertItem.SVRxIPH = IIf(IsNothing(InsertItem.SVR), 0, CType(InsertItem.SVR, Double) * InsertItem.IPH)
                            InsertItem.TotalCost = ManufacturingBlueprint.GetTotalRawCost
                            InsertItem.Taxes = ManufacturingBlueprint.GetSalesTaxes
                            InsertItem.BrokerFees = ManufacturingBlueprint.GetSalesBrokerFees

                            InsertItem.SingleInventedBPCRunsperBPC = ManufacturingBlueprint.GetSingleInventedBPCRuns

                            InsertItem.BPProductionTime = FormatIPHTime(ManufacturingBlueprint.GetProductionTime)
                            InsertItem.TotalProductionTime = FormatIPHTime(ManufacturingBlueprint.GetTotalProductionTime)
                            InsertItem.CopyTime = FormatIPHTime(ManufacturingBlueprint.GetCopyTime)
                            InsertItem.InventionTime = FormatIPHTime(ManufacturingBlueprint.GetInventionTime)

                            InsertItem.BaseJobCost = ManufacturingBlueprint.GetBaseJobCost
                            InsertItem.JobFee = ManufacturingBlueprint.GetJobFee

                            InsertItem.NumBPs = ManufacturingBlueprint.GetUsedNumBPs
                            InsertItem.InventionChance = ManufacturingBlueprint.GetInventionChance
                            InsertItem.Race = GetRace(ManufacturingBlueprint.GetRaceID)
                            InsertItem.VolumeperItem = ManufacturingBlueprint.GetItemVolume
                            InsertItem.TotalVolume = ManufacturingBlueprint.GetTotalItemVolume

                            If (ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T2 Or ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T3) And InsertItem.BlueprintType <> BPType.Original Then
                                InsertItem.InventionCost = ManufacturingBlueprint.GetInventionCost
                            Else
                                InsertItem.InventionCost = 0
                            End If

                            If ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T2 And InsertItem.BlueprintType <> BPType.Original Then
                                InsertItem.CopyCost = ManufacturingBlueprint.GetCopyCost
                            Else
                                InsertItem.CopyCost = 0
                            End If

                            ' Usage
                            InsertItem.ManufacturingFacilityUsage = ManufacturingBlueprint.GetManufacturingFacilityUsage
                            InsertItem.ComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetComponentFacilityUsage
                            InsertItem.CapComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetCapComponentFacilityUsage
                            InsertItem.CopyFacilityUsage = ManufacturingBlueprint.GetCopyUsage
                            InsertItem.InventionFacilityUsage = ManufacturingBlueprint.GetInventionUsage

                            ' Insert Raw Mats item
                            Call InsertManufacturingItem(InsertItem, SVRThresholdValue, chkCalcSVRIncludeNull.Checked, ManufacturingList)

                            ' *** For Build/Buy we need to construct a new BP and add that
                            ' Construct the BP
                            ManufacturingBlueprint = New Blueprint(InsertItem.BPID, CInt(txtCalcRuns.Text), InsertItem.BPME, InsertItem.BPTE, _
                                           NumberofBlueprints, CInt(txtCalcProdLines.Text), SelectedCharacter, _
                                           UserApplicationSettings, True, 0, InsertItem.ManufacturingTeam, _
                                           InsertItem.ManufacturingFacility, InsertItem.ComponentTeam, _
                                           InsertItem.ComponentManufacturingFacility, InsertItem.CapComponentManufacturingFacility)

                            If (InsertItem.TechLevel = "T2" Or InsertItem.TechLevel = "T3") And chkCalcIgnoreInvention.Checked = False Then
                                ' Construct the T2/T3 BP
                                ManufacturingBlueprint.InventBlueprint(CInt(txtCalcLabLines.Text), SelectedDecryptor, InsertItem.InventionFacility, InsertItem.InventionTeam, _
                                                                       InsertItem.CopyFacility, InsertItem.CopyTeam, GetInventItemTypeID(InsertItem.BPID, InsertItem.Relic))

                            End If

                            ' Get the list of materials
                            Call ManufacturingBlueprint.BuildItems(chkCalcTaxes.Checked, chkCalcFees.Checked, chkCalcBaseFacilityIncludeUsage.Checked, chkCalcIgnoreMinerals.Checked, chkCalcIgnoreT1Item.Checked)

                            ' Build/Buy (add only if it has components we build)
                            If ManufacturingBlueprint.HasComponents Then
                                InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalRawProfitPercent
                                InsertItem.Profit = ManufacturingBlueprint.GetTotalRawProfit
                                InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourRaw
                                InsertItem.CalcType = "Build/Buy"
                                InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, AveragePriceRegionID, AveragePriceDays, ManufacturingBlueprint.GetTotalProductionTime, ManufacturingBlueprint.GetTotalUnits)
                                InsertItem.SVRxIPH = IIf(IsNothing(InsertItem.SVR), 0, CType(InsertItem.SVR, Double) * InsertItem.IPH)
                                InsertItem.TotalCost = ManufacturingBlueprint.GetTotalRawCost
                                InsertItem.ItemMarketPrice = ManufacturingBlueprint.GetItemMarketPrice

                                InsertItem.Taxes = ManufacturingBlueprint.GetSalesTaxes
                                InsertItem.BrokerFees = ManufacturingBlueprint.GetSalesBrokerFees
                                InsertItem.SingleInventedBPCRunsperBPC = ManufacturingBlueprint.GetSingleInventedBPCRuns

                                InsertItem.BPProductionTime = FormatIPHTime(ManufacturingBlueprint.GetProductionTime)
                                InsertItem.TotalProductionTime = FormatIPHTime(ManufacturingBlueprint.GetTotalProductionTime)
                                InsertItem.CopyTime = FormatIPHTime(ManufacturingBlueprint.GetCopyTime)
                                InsertItem.InventionTime = FormatIPHTime(ManufacturingBlueprint.GetInventionTime)

                                InsertItem.BaseJobCost = ManufacturingBlueprint.GetBaseJobCost
                                InsertItem.JobFee = ManufacturingBlueprint.GetJobFee

                                InsertItem.NumBPs = ManufacturingBlueprint.GetUsedNumBPs
                                InsertItem.InventionChance = ManufacturingBlueprint.GetInventionChance
                                InsertItem.Race = GetRace(ManufacturingBlueprint.GetRaceID)
                                InsertItem.VolumeperItem = ManufacturingBlueprint.GetItemVolume
                                InsertItem.TotalVolume = ManufacturingBlueprint.GetTotalItemVolume

                                If (ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T2 Or ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T3) And InsertItem.BlueprintType <> BPType.Original Then
                                    InsertItem.InventionCost = ManufacturingBlueprint.GetInventionCost
                                Else
                                    InsertItem.InventionCost = 0
                                End If

                                If ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T2 And InsertItem.BlueprintType <> BPType.Original Then
                                    InsertItem.CopyCost = ManufacturingBlueprint.GetCopyCost
                                Else
                                    InsertItem.CopyCost = 0
                                End If

                                ' Usage
                                InsertItem.ManufacturingFacilityUsage = ManufacturingBlueprint.GetManufacturingFacilityUsage
                                InsertItem.ComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetComponentFacilityUsage
                                InsertItem.CapComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetCapComponentFacilityUsage
                                InsertItem.CopyFacilityUsage = ManufacturingBlueprint.GetCopyUsage
                                InsertItem.InventionFacilityUsage = ManufacturingBlueprint.GetInventionUsage

                                ' Insert Build/Buy item
                                Call InsertManufacturingItem(InsertItem, SVRThresholdValue, chkCalcSVRIncludeNull.Checked, ManufacturingList)

                            End If
                        Else

                            ' Just look at each one individually
                            If rbtnCalcCompareComponents.Checked Then
                                ' Use the Component values
                                InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalComponentProfitPercent
                                InsertItem.Profit = ManufacturingBlueprint.GetTotalComponentProfit
                                InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourComponents
                                InsertItem.CalcType = "Components"
                                InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, AveragePriceRegionID, AveragePriceDays, ManufacturingBlueprint.GetProductionTime, ManufacturingBlueprint.GetTotalUnits)
                                InsertItem.SVRxIPH = IIf(IsNothing(InsertItem.SVR), 0, CType(InsertItem.SVR, Double) * InsertItem.IPH)
                                InsertItem.TotalCost = ManufacturingBlueprint.GetTotalComponentCost
                            ElseIf rbtnCalcCompareRawMats.Checked Then
                                ' Use the Raw values 
                                InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalRawProfitPercent
                                InsertItem.Profit = ManufacturingBlueprint.GetTotalRawProfit
                                InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourRaw
                                InsertItem.CalcType = "Raw Materials"
                                InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, AveragePriceRegionID, AveragePriceDays, ManufacturingBlueprint.GetTotalProductionTime, ManufacturingBlueprint.GetTotalUnits)
                                InsertItem.SVRxIPH = IIf(IsNothing(InsertItem.SVR), 0, CType(InsertItem.SVR, Double) * InsertItem.IPH)
                                InsertItem.TotalCost = ManufacturingBlueprint.GetTotalRawCost
                            ElseIf rbtnCalcCompareBuildBuy.Checked Then
                                ' Use the Build/Buy best rate values (the blueprint was set to get these values above)
                                InsertItem.ProfitPercent = ManufacturingBlueprint.GetTotalRawProfitPercent
                                InsertItem.Profit = ManufacturingBlueprint.GetTotalRawProfit
                                InsertItem.IPH = ManufacturingBlueprint.GetTotalIskperHourRaw
                                InsertItem.CalcType = "Build/Buy"
                                InsertItem.SVR = GetItemSVR(InsertItem.ItemTypeID, AveragePriceRegionID, AveragePriceDays, ManufacturingBlueprint.GetTotalProductionTime, ManufacturingBlueprint.GetTotalUnits)
                                InsertItem.SVRxIPH = IIf(IsNothing(InsertItem.SVR), 0, CType(InsertItem.SVR, Double) * InsertItem.IPH)
                                InsertItem.TotalCost = ManufacturingBlueprint.GetTotalRawCost
                            End If

                            InsertItem.ItemMarketPrice = ManufacturingBlueprint.GetItemMarketPrice
                            InsertItem.ManufacturingFacilityUsage = ManufacturingBlueprint.GetManufacturingFacilityUsage
                            InsertItem.Taxes = ManufacturingBlueprint.GetSalesTaxes
                            InsertItem.BrokerFees = ManufacturingBlueprint.GetSalesBrokerFees

                            InsertItem.SingleInventedBPCRunsperBPC = ManufacturingBlueprint.GetSingleInventedBPCRuns

                            InsertItem.BPProductionTime = FormatIPHTime(ManufacturingBlueprint.GetProductionTime)
                            If rbtnCalcCompareComponents.Checked Then
                                ' Total production time for components only is always the bp production time
                                InsertItem.TotalProductionTime = FormatIPHTime(ManufacturingBlueprint.GetProductionTime)
                            Else
                                InsertItem.TotalProductionTime = FormatIPHTime(ManufacturingBlueprint.GetTotalProductionTime)
                            End If

                            InsertItem.CopyTime = FormatIPHTime(ManufacturingBlueprint.GetCopyTime)
                            InsertItem.InventionTime = FormatIPHTime(ManufacturingBlueprint.GetInventionTime)

                            InsertItem.BaseJobCost = ManufacturingBlueprint.GetBaseJobCost
                            InsertItem.JobFee = ManufacturingBlueprint.GetJobFee

                            InsertItem.NumBPs = ManufacturingBlueprint.GetUsedNumBPs
                            InsertItem.InventionChance = ManufacturingBlueprint.GetInventionChance
                            InsertItem.Race = GetRace(ManufacturingBlueprint.GetRaceID)
                            InsertItem.VolumeperItem = ManufacturingBlueprint.GetItemVolume
                            InsertItem.TotalVolume = ManufacturingBlueprint.GetTotalItemVolume

                            If (ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T2 Or ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T3) And InsertItem.BlueprintType <> BPType.Original Then
                                InsertItem.InventionCost = ManufacturingBlueprint.GetInventionCost
                            Else
                                InsertItem.InventionCost = 0
                            End If

                            If ManufacturingBlueprint.GetTechLevel = BlueprintTechLevel.T2 And InsertItem.BlueprintType <> BPType.Original Then
                                InsertItem.CopyCost = ManufacturingBlueprint.GetCopyCost
                            Else
                                InsertItem.CopyCost = 0
                            End If

                            ' Usage
                            InsertItem.ManufacturingFacilityUsage = ManufacturingBlueprint.GetManufacturingFacilityUsage
                            InsertItem.ComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetComponentFacilityUsage
                            InsertItem.CapComponentManufacturingFacilityUsage = ManufacturingBlueprint.GetCapComponentFacilityUsage
                            InsertItem.CopyFacilityUsage = ManufacturingBlueprint.GetCopyUsage
                            InsertItem.InventionFacilityUsage = ManufacturingBlueprint.GetInventionUsage

                            ' Insert the chosen item
                            Call InsertManufacturingItem(InsertItem, SVRThresholdValue, chkCalcSVRIncludeNull.Checked, ManufacturingList)

                        End If

                    End If

                    ' For each record, update the progress bar
                    Call IncrementToolStripProgressBar(pnlProgressBar)

                Next

                ' Done processing the blueprints
                pnlProgressBar.Value = 0
                pnlProgressBar.Visible = False
                'Me.Cursor = Cursors.Default
                pnlStatus.Text = ""

            End If
        End If

        ' **********************************************************************
        ' *** Display results in grid - use for both calcuations and preview ***
        ' **********************************************************************
DisplayResults:

        ' Reset the columns before processing data
        Call RefreshManufacturingTabColumns()

        Dim NumManufacturingItems As Integer

        ' If no records first, then don't let them try and refresh nothing
        If IsNothing(FinalManufacturingItemList) And SavedRefreshValue Then
            Exit Sub
        End If

        If Not SavedRefreshValue Then
            ' Calc or new display data
            NumManufacturingItems = ManufacturingList.Count

            If NumManufacturingItems = 0 Then
                If Not Calculate Then
                    FinalManufacturingItemList = BaseItems ' Save for later use, this was just display
                Else
                    FinalManufacturingItemList = Nothing ' It didn't calculate anything, so just clear the grid and exit
                    lstManufacturing.Items.Clear()
                    GoTo ExitCalc
                End If
            Else
                ' Use Current data lists and save
                FinalManufacturingItemList = ManufacturingList
            End If
        Else
            ' Use pre-calc'd or loaded list
            NumManufacturingItems = FinalManufacturingItemList.Count
        End If

        ' Sort options
        If NumManufacturingItems > 0 Then
            If rbtnCalcIPH.Checked Then ' IPH
                FinalManufacturingItemList.Sort(New CalcIPHComparer)
            ElseIf rbtnCalcProfit.Checked Then ' By profit
                FinalManufacturingItemList.Sort(New CalcProfitComparer)
            ElseIf rbtnCalcShowProfitPercent.Checked Then ' Profit %
                FinalManufacturingItemList.Sort(New CalcProfitPComparer)
            ElseIf rbtnCalcSortSVR.Checked Then ' SVR only
                FinalManufacturingItemList.Sort(New CalcSVRComparer)
            ElseIf rbtnCalcSortSVRIPH.Checked Then ' SVR * IPH
                FinalManufacturingItemList.Sort(New CalcSVRIPHComparer)
            End If
        End If

        ' Set final list
        FinalItemList = FinalManufacturingItemList

        pnlProgressBar.Minimum = 0
        pnlProgressBar.Maximum = FinalItemList.Count
        pnlProgressBar.Value = 0
        pnlProgressBar.Visible = True

        lstManufacturing.Items.Clear()
        lstManufacturing.BeginUpdate()

        pnlStatus.Text = "Refreshing List..."

        Dim BonusString As String = ""

        ' Load the final grid
        For i = 0 To FinalItemList.Count - 1
            Application.DoEvents()

            'The remaining columns are subitems - Add depending on position
            BPList = lstManufacturing.Items.Add(CStr(FinalItemList(i).RecordID)) ' Always the first item

            For j = 1 To ColumnPositions.Count - 1
                Select Case ColumnPositions(j)
                    Case ProgramSettings.ItemCategoryColumnName
                        BPList.SubItems.Add(FinalItemList(i).ItemCategory)
                    Case ProgramSettings.ItemGroupColumnName
                        BPList.SubItems.Add(FinalItemList(i).ItemGroup)
                    Case ProgramSettings.ItemNameColumnName
                        BPList.SubItems.Add(FinalItemList(i).ItemName)
                    Case ProgramSettings.OwnedColumnName
                        BPList.SubItems.Add(FinalItemList(i).Owned)
                    Case ProgramSettings.TechColumnName
                        BPList.SubItems.Add(FinalItemList(i).TechLevel)
                    Case ProgramSettings.BPMEColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).BPME))
                    Case ProgramSettings.BPTEColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).BPTE))
                    Case ProgramSettings.InputsColumnName
                        BPList.SubItems.Add(FinalItemList(i).Inputs)
                    Case ProgramSettings.ComparedColumnName
                        BPList.SubItems.Add(FinalItemList(i).CalcType)
                    Case ProgramSettings.TotalRunsColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).Runs))
                    Case ProgramSettings.SingleInventedBPCRunsColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).SingleInventedBPCRunsperBPC))
                    Case ProgramSettings.ProductionLinesColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).ProductionLines))
                    Case ProgramSettings.LaboratoryLinesColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).LaboratoryLines))
                    Case ProgramSettings.TotalInventionCostColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).InventionCost, 2))
                    Case ProgramSettings.TotalCopyCostColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).CopyCost, 2))
                    Case ProgramSettings.TaxesColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).Taxes, 2))
                    Case ProgramSettings.BrokerFeesColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).BrokerFees, 2))
                    Case ProgramSettings.BPProductionTimeColumnName
                        BPList.SubItems.Add(FinalItemList(i).BPProductionTime)
                    Case ProgramSettings.TotalProductionTimeColumnName
                        BPList.SubItems.Add(FinalItemList(i).TotalProductionTime)
                    Case ProgramSettings.CopyTimeColumnName
                        BPList.SubItems.Add(FinalItemList(i).CopyTime)
                    Case ProgramSettings.InventionTimeColumnName
                        BPList.SubItems.Add(FinalItemList(i).InventionTime)
                    Case ProgramSettings.ItemMarketPriceColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).ItemMarketPrice, 2))
                    Case ProgramSettings.ProfitColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).Profit, 2))
                    Case ProgramSettings.ProfitPercentageColumnName
                        BPList.SubItems.Add(FormatPercent(FinalItemList(i).ProfitPercent, 2))
                    Case ProgramSettings.IskperHourColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).IPH, 2))
                    Case ProgramSettings.SVRColumnName
                        If IsNothing(FinalItemList(i).SVR) Then
                            BPList.SubItems.Add("")
                        Else
                            BPList.SubItems.Add(FormatNumber(FinalItemList(i).SVR, 2))
                        End If
                    Case ProgramSettings.SVRxIPHColumnName
                        If IsNothing(FinalItemList(i).SVRxIPH) Then
                            BPList.SubItems.Add("")
                        Else
                            BPList.SubItems.Add(FormatNumber(FinalItemList(i).SVRxIPH, 2))
                        End If
                    Case ProgramSettings.TotalCostColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).TotalCost, 2))
                    Case ProgramSettings.BaseJobCostColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).BaseJobCost, 2))
                    Case ProgramSettings.NumBPsColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).NumBPs))
                    Case ProgramSettings.InventionChanceColumnName
                        BPList.SubItems.Add(FormatPercent(FinalItemList(i).InventionChance, 2))
                    Case ProgramSettings.BPTypeColumnName
                        BPList.SubItems.Add(GetBPTypeString(FinalItemList(i).BlueprintType))
                    Case ProgramSettings.RaceColumnName
                        BPList.SubItems.Add(FinalItemList(i).Race)
                    Case ProgramSettings.VolumeperItemColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).VolumeperItem, 2))
                    Case ProgramSettings.TotalVolumeColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).TotalVolume, 2))
                    Case ProgramSettings.ManufacturingJobFeeColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).JobFee, 2))
                    Case ProgramSettings.ManufacturingFacilityNameColumnName
                        BPList.SubItems.Add(FinalItemList(i).ManufacturingFacility.FacilityName)
                    Case ProgramSettings.ManufacturingFacilitySystemColumnName
                        BPList.SubItems.Add(FinalItemList(i).ManufacturingFacility.SolarSystemName)
                    Case ProgramSettings.ManufacturingFacilitySystemIndexColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).ManufacturingFacility.CostIndex, 5))
                    Case ProgramSettings.ManufacturingFacilityTaxColumnName
                        BPList.SubItems.Add(FormatPercent(FinalItemList(i).ManufacturingFacility.TaxRate, 1))
                    Case ProgramSettings.ManufacturingFacilityRegionColumnName
                        BPList.SubItems.Add(FinalItemList(i).ManufacturingFacility.RegionName)
                    Case ProgramSettings.ManufacturingFacilityMEBonusColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).ManufacturingFacility.MaterialMultiplier))
                    Case ProgramSettings.ManufacturingFacilityTEBonusColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).ManufacturingFacility.TimeMultiplier))
                    Case ProgramSettings.ManufacturingFacilityUsageColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).ManufacturingFacilityUsage, 2))

                    Case ProgramSettings.ComponentFacilityNameColumnName
                        BPList.SubItems.Add(FinalItemList(i).ComponentManufacturingFacility.FacilityName)
                    Case ProgramSettings.ComponentFacilitySystemColumnName
                        BPList.SubItems.Add(FinalItemList(i).ComponentManufacturingFacility.SolarSystemName)
                    Case ProgramSettings.ComponentFacilitySystemIndexColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).ComponentManufacturingFacility.CostIndex, 5))
                    Case ProgramSettings.ComponentFacilityTaxColumnName
                        BPList.SubItems.Add(FormatPercent(FinalItemList(i).ComponentManufacturingFacility.TaxRate, 1))
                    Case ProgramSettings.ComponentFacilityRegionColumnName
                        BPList.SubItems.Add(FinalItemList(i).ComponentManufacturingFacility.RegionName)
                    Case ProgramSettings.ComponentFacilityMEBonusColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).ComponentManufacturingFacility.MaterialMultiplier))
                    Case ProgramSettings.ComponentFacilityTEBonusColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).ComponentManufacturingFacility.TimeMultiplier))
                    Case ProgramSettings.ComponentFacilityUsageColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).ComponentManufacturingFacilityUsage, 2))

                    Case ProgramSettings.CopyingFacilityNameColumnName
                        BPList.SubItems.Add(FinalItemList(i).CopyFacility.FacilityName)
                    Case ProgramSettings.CopyingFacilitySystemColumnName
                        BPList.SubItems.Add(FinalItemList(i).CopyFacility.SolarSystemName)
                    Case ProgramSettings.CopyingFacilitySystemIndexColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).CopyFacility.CostIndex, 5))
                    Case ProgramSettings.CopyingFacilityTaxColumnName
                        BPList.SubItems.Add(FormatPercent(FinalItemList(i).CopyFacility.TaxRate, 1))
                    Case ProgramSettings.CopyingFacilityRegionColumnName
                        BPList.SubItems.Add(FinalItemList(i).CopyFacility.RegionName)
                    Case ProgramSettings.CopyingFacilityMEBonusColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).CopyFacility.MaterialMultiplier))
                    Case ProgramSettings.CopyingFacilityTEBonusColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).CopyFacility.TimeMultiplier))
                    Case ProgramSettings.CopyingFacilityUsageColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).CopyFacilityUsage, 2))

                    Case ProgramSettings.InventionFacilityNameColumnName
                        BPList.SubItems.Add(FinalItemList(i).InventionFacility.FacilityName)
                    Case ProgramSettings.InventionFacilitySystemColumnName
                        BPList.SubItems.Add(FinalItemList(i).InventionFacility.SolarSystemName)
                    Case ProgramSettings.InventionFacilitySystemIndexColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).InventionFacility.CostIndex, 5))
                    Case ProgramSettings.InventionFacilityTaxColumnName
                        BPList.SubItems.Add(FormatPercent(FinalItemList(i).InventionFacility.TaxRate, 1))
                    Case ProgramSettings.InventionFacilityRegionColumnName
                        BPList.SubItems.Add(FinalItemList(i).InventionFacility.RegionName)
                    Case ProgramSettings.InventionFacilityMEBonusColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).InventionFacility.MaterialMultiplier))
                    Case ProgramSettings.InventionFacilityTEBonusColumnName
                        BPList.SubItems.Add(CStr(FinalItemList(i).InventionFacility.TimeMultiplier))
                    Case ProgramSettings.InventionFacilityUsageColumnName
                        BPList.SubItems.Add(FormatNumber(FinalItemList(i).InventionFacilityUsage, 2))
                End Select
            Next

            If FinalItemList(i).ItemName = "Ark" Then
                Application.DoEvents()
            End If

            ' Color owned BP's
            If FinalItemList(i).Owned = Yes Then
                BPList.BackColor = Color.BlanchedAlmond
            ElseIf UserInventedBPs.Contains(FinalItemList(i).BPID) Then
                ' It's an invented BP that we own the T1 BP for
                BPList.BackColor = Color.LightSkyBlue
            Else
                BPList.BackColor = Color.White
            End If

            BPList.ForeColor = Color.Black

            ' Highlight those we can't build, RE or Invent
            If Not FinalItemList(i).CanBuildBP Then
                BPList.ForeColor = Color.DarkRed
            End If

            If Not FinalItemList(i).CanInvent And FinalItemList(i).TechLevel = "T2" And FinalItemList(i).BlueprintType = BPType.InventedBPC And Not chkCalcIgnoreInvention.Checked Then
                BPList.ForeColor = Color.DarkOrange
            End If

            If Not FinalItemList(i).CanRE And FinalItemList(i).TechLevel = "T3" And FinalItemList(i).BlueprintType = BPType.InventedBPC And Not chkCalcIgnoreInvention.Checked Then
                BPList.ForeColor = Color.DarkGreen
            End If

            ' For each record, update the progress bar
            Call IncrementToolStripProgressBar(pnlProgressBar)

        Next

        lstManufacturing.EndUpdate()

ExitCalc:
        pnlProgressBar.Value = 0
        pnlProgressBar.Visible = False
        lstManufacturing.Enabled = True

        pnlStatus.Text = ""

        btnCalculate.Enabled = True
        btnCalcExportList.Enabled = True
        btnCalcReset.Enabled = True
        btnCalcPreview.Enabled = True
        btnCalcSaveSettings.Enabled = True
        gbCalcBPSelectOptions.Enabled = True
        Application.UseWaitCursor = False
        Me.Cursor = Cursors.Default
        Application.DoEvents()

        If lstManufacturing.Items.Count = 0 Then
            MsgBox("No Blueprints calculated for options selected.", vbExclamation, Application.ProductName)
        End If

        If Not Calculate Then
            Call ResetRefresh()
        Else
            btnCalculate.Text = "Refresh"
            RefreshCalcData = True ' Allow data to be refreshed since we just calcuated
        End If

    End Sub

    ' Builds a string to display Team Bonuses
    Private Function GetTeamBonusDisplayString(Bonuses As List(Of IndustryTeamBonus)) As String
        Dim BonusString As String = ""

        For i = 0 To Bonuses.Count - 1
            BonusString = BonusString & Bonuses(i).BonusSpecialtyGroupName & " - " & Bonuses(i).BonusValue & "% " & Bonuses(i).BonusType & " | "
        Next

        If BonusString <> "" Then
            BonusString = BonusString.Substring(0, Len(BonusString) - 2)
        End If

        Return BonusString

    End Function

    ' Sets the name of the array to use on the pos for multiuse arrays
    Private Function GetCalcPOSMultiUseArrayName(ShortName As String) As String

        Select Case ShortName
            Case "Equipment"
                Return "Equipment Assembly Array"
            Case "Rapid"
                Return "Rapid Equipment Assembly Array"
            Case "Ammunition"
                Return "Ammunition Assembly Array"
            Case "Component"
                Return "Component Assembly Array"
            Case "Large"
                Return "Large Ship Assembly Array"
            Case "Capital"
                Return "Capital Ship Assembly Array"
            Case "All"
                Return "All"
        End Select

        Return ""

    End Function

    ' Sets the name of the array to the short name when long name sent
    Private Function GetTruncatedCalcPOSMultiUseArrayName(LongName As String) As String

        Select Case LongName
            Case "Equipment Assembly Array"
                Return "Equipment"
            Case "Rapid Equipment Assembly Array"
                Return "Rapid"
            Case "Ammunition Assembly Array"
                Return "Ammunition"
            Case "Component Assembly Array"
                Return "Component"
            Case "Large Ship Assembly Array"
                Return "Large"
            Case "Capital Ship Assembly Array"
                Return "Capital"
            Case "All"
                Return "All"
        End Select

        Return ""

    End Function

    ' Sets the owned flag for an insert item
    Private Function SetItemOwnedFlag(ByRef SentItem As ManufacturingItem, ByVal SentOrigDecryptor As Decryptor, ByVal SentOrigRelic As String, _
                                 ByVal SentOrigME As Integer, ByVal SentOrigTE As Integer, ByVal SentOriginalBPOwnedFlag As Boolean) As Boolean
        ' We know the original decryptor and relic used for this bp so see if they match what we just 
        ' used and set the owned flag and it's invented, which all these are - also make sure the me/te are same
        ' as base if no decryptor used
        If SentItem.Decryptor.Name = SentOrigDecryptor.Name And SentOrigRelic.Contains(SentItem.Relic) _
            And SentOriginalBPOwnedFlag = True And SentItem.BlueprintType = BPType.InventedBPC _
            And Not (SentOrigDecryptor.Name = NoDecryptor.Name And SentOrigME <> BaseT2T3ME And SentOrigTE <> BaseT2T3TE) Then
            SentItem.Owned = Yes
            Return True
        Else
            SentItem.Owned = No
            Return False
        End If
    End Function

    ' Loads the cmbBPTypeFilter object with types based on the radio button selected - Ie, Drones will load Drone types (Small, Medium, Heavy...etc)
    Private Sub LoadCalcBPTypes()
        Dim SQL As String
        Dim WhereClause As String = ""
        Dim readerTypes As SQLiteDataReader
        Dim InventedBPs As New List(Of Long)

        cmbCalcBPTypeFilter.Text = UserManufacturingTabSettings.ItemTypeFilter
        SQL = "SELECT ITEM_GROUP FROM " & USER_BLUEPRINTS

        WhereClause = BuildManufactureWhereClause(True, InventedBPs)

        If WhereClause = "" Then
            ' They didn't select anything, just clear and exit
            cmbCalcBPTypeFilter.Items.Clear()
            cmbCalcBPTypeFilter.Text = "All Types"
            Exit Sub
        End If

        ' See if we are looking at User Owned blueprints or All
        If rbtnCalcBPOwned.Checked Then
            WhereClause = WhereClause & "AND USER_ID = " & SelectedCharacter.ID & " AND OWNED <> 0  "
        End If

        SQL = SQL & WhereClause & "GROUP BY ITEM_GROUP"

        DBCommand = New SQLiteCommand(SQL, DB)
        DBCommand.Parameters.AddWithValue("@USERBP_USERID", CStr(SelectedCharacter.ID))
        readerTypes = DBCommand.ExecuteReader

        cmbCalcBPTypeFilter.Items.Clear()

        cmbCalcBPTypeFilter.Items.Add("All Types")

        While readerTypes.Read
            cmbCalcBPTypeFilter.Items.Add(readerTypes.GetString(0))
        End While

    End Sub

    ' Just adds an item into the list and duplicates if raw or components checked
    Private Sub InsertItemCalcType(ByRef ManufacturingItemList As List(Of ManufacturingItem), ByVal BaseItem As ManufacturingItem, _
                                   ByVal AddMultipleFacilities As Boolean, ByVal FacilityList As List(Of IndustryFacility), _
                                   ByVal AddManufacturingNoTeam As Boolean, ByVal AddComponentsNoTeam As Boolean, ByVal AddCopyingNoTeam As Boolean)

        Dim CalcType As String = ""
        Dim TempItem As New ManufacturingItem

        If rbtnCalcCompareRawMats.Checked Then
            CalcType = "Raw Mats"
        ElseIf rbtnCalcCompareComponents.Checked Then
            CalcType = "Components"
        ElseIf rbtnCalcCompareBuildBuy.Checked Then
            CalcType = "Build/Buy"
        Else ' All
            CalcType = "All Calcs"
        End If

        If AddMultipleFacilities Then
            For i = 0 To FacilityList.Count - 1
                ' Set data
                TempItem = CType(BaseItem.Clone, ManufacturingItem)
                RecordIDIterator += 1
                TempItem.RecordID = RecordIDIterator
                TempItem.ManufacturingFacility = CType(FacilityList(i).Clone(), IndustryFacility)
                TempItem.CalcType = CalcType
                ' Add it
                ManufacturingItemList.Add(TempItem)
                ' If we want to add No Team, make sure the current team isn't no team and then add it as well
                Call InsertItemNoTeamCalcType(ManufacturingItemList, TempItem, AddManufacturingNoTeam, AddComponentsNoTeam, AddCopyingNoTeam)
                ' Reset the Item
                TempItem = New ManufacturingItem
            Next
        Else
            TempItem = CType(BaseItem.Clone, ManufacturingItem)
            RecordIDIterator += 1
            TempItem.RecordID = RecordIDIterator
            TempItem.CalcType = CalcType

            ManufacturingItemList.Add(TempItem)
            ' If we want to add No Team, make sure the current team isn't no team and then add it as well
            Call InsertItemNoTeamCalcType(ManufacturingItemList, TempItem, AddManufacturingNoTeam, AddComponentsNoTeam, AddCopyingNoTeam)
        End If

    End Sub

    ' Inserts a record for no team
    Private Sub InsertItemNoTeamCalcType(ByRef ManufacturingItemList As List(Of ManufacturingItem), ByVal BaseItem As ManufacturingItem, _
                                         ByVal AddManufacturingNoTeam As Boolean, ByVal AddComponentsNoTeam As Boolean, ByVal AddCopyingNoTeam As Boolean)

        Dim TempItem As New ManufacturingItem

        ' If we want to add No Team, make sure the current team isn't no team and then add it as well
        If AddManufacturingNoTeam And BaseItem.ManufacturingTeam.TeamName <> NoTeam.TeamName Then
            TempItem = CType(BaseItem.Clone, ManufacturingItem)
            RecordIDIterator += 1
            TempItem.RecordID = RecordIDIterator
            TempItem.ManufacturingTeam = NoTeam
            ManufacturingItemList.Add(TempItem)
        End If

        If AddComponentsNoTeam And BaseItem.ComponentTeam.TeamName <> NoTeam.TeamName Then
            TempItem = CType(BaseItem.Clone, ManufacturingItem)
            RecordIDIterator += 1
            TempItem.RecordID = RecordIDIterator
            TempItem.ComponentTeam = NoTeam
            ManufacturingItemList.Add(TempItem)
        End If

        If AddCopyingNoTeam And BaseItem.CopyTeam.TeamName <> NoTeam.TeamName Then
            TempItem = CType(BaseItem.Clone, ManufacturingItem)
            RecordIDIterator += 1
            TempItem.RecordID = RecordIDIterator
            TempItem.CopyTeam = NoTeam
            ManufacturingItemList.Add(TempItem)
        End If

    End Sub

    ' Exports the list to clipboard
    Private Sub btnCalcExportList_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCalcExportList.Click
        Dim MyStream As StreamWriter
        Dim FileName As String
        Dim OutputText As String
        Dim ListItem As ListViewItem
        Dim Separator As String = ""
        Dim Items As ListView.ListViewItemCollection
        Dim ExportColumns As New List(Of String)
        Dim NumItems As Integer = 0

        If UserApplicationSettings.DataExportFormat = SSVDataExport Then
            ' Save file name with date
            FileName = "Manufacturing Calculations Export - " & Format(Now, "MMddyyyy") & ".ssv"

            ' Show the dialog
            SaveFileDialog.Filter = "ssv files (*.ssv)|*.ssv|All files (*.*)|*.*"
            Separator = ";"
        Else ' All others in CSV for now
            ' Save file name with date
            FileName = "Manufacturing Calculations Export - " & Format(Now, "MMddyyyy") & ".csv"

            ' Show the dialog
            SaveFileDialog.Filter = "csv files (*.csv)|*.csv|All files (*.*)|*.*"
            Separator = ","
        End If

        SaveFileDialog.FilterIndex = 1
        SaveFileDialog.RestoreDirectory = True
        SaveFileDialog.FileName = FileName

        If SaveFileDialog.ShowDialog() = DialogResult.OK Then
            Try
                MyStream = File.CreateText(SaveFileDialog.FileName)

                If Not (MyStream Is Nothing) Then

                    Items = lstManufacturing.Items

                    If Items.Count > 0 Then
                        Me.Cursor = Cursors.WaitCursor
                        pnlProgressBar.Minimum = 0
                        pnlProgressBar.Maximum = Items.Count - 1
                        pnlProgressBar.Value = 0
                        pnlProgressBar.Visible = True
                        pnlStatus.Text = "Exporting Table..."
                        Application.DoEvents()

                        OutputText = ""
                        For i = 1 To ColumnPositions.Count - 1
                            If ColumnPositions(i) <> "" Then
                                OutputText = OutputText & ColumnPositions(i) & Separator
                                ExportColumns.Add(ColumnPositions(i))
                            End If
                        Next
                        OutputText = OutputText.Substring(0, Len(OutputText) - 1) ' Strip last separator

                        MyStream.Write(OutputText & Environment.NewLine)

                        For Each ListItem In Items
                            OutputText = ""
                            For j = 0 To ExportColumns.Count - 1
                                ' Format each column value and save
                                OutputText = OutputText & GetOutputText(ExportColumns(j), ListItem.SubItems(j + 1).Text, Separator, UserApplicationSettings.DataExportFormat)
                            Next

                            ' For each record, update the progress bar
                            Call IncrementToolStripProgressBar(pnlProgressBar)
                            Application.DoEvents()

                            MyStream.Write(OutputText & Environment.NewLine)
                        Next

                        MyStream.Flush()
                        MyStream.Close()

                        MsgBox("Manufacturing Data Exported", vbInformation, Application.ProductName)

                    End If
                End If
            Catch
                MsgBox(Err.Description, vbExclamation, Application.ProductName)
            End Try
        End If

        ' Done processing the blueprints
        pnlProgressBar.Value = 0
        pnlProgressBar.Visible = False

        gbCalcBPSelectOptions.Enabled = True
        Me.Cursor = Cursors.Default
        Me.Refresh()
        Application.DoEvents()
        pnlStatus.Text = ""

    End Sub

    ' Outputs text in the correct format
    Private Function GetOutputText(ColumnName As String, DataText As String, Separator As String, ExportDataType As String) As String
        Dim ExportData As String

        Select Case ColumnName
            Case ProgramSettings.InventionChanceColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.VolumeperItemColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.TotalVolumeColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.TotalInventionCostColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.TotalCopyCostColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.TaxesColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.BrokerFeesColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.ItemMarketPriceColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.ProfitColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.IskperHourColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.SVRColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.SVRxIPHColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.TotalCostColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.BaseJobCostColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.ManufacturingJobFeeColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.ManufacturingFacilitySystemIndexColumnName
                ExportData = FormatNumber(DataText, 5) & Separator
            Case ProgramSettings.ManufacturingFacilityUsageColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.ComponentFacilitySystemIndexColumnName
                ExportData = FormatNumber(DataText, 5) & Separator
            Case ProgramSettings.ComponentFacilityUsageColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.CopyingFacilitySystemIndexColumnName
                ExportData = FormatNumber(DataText, 5) & Separator
            Case ProgramSettings.CopyingFacilityUsageColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case ProgramSettings.InventionFacilitySystemIndexColumnName
                ExportData = FormatNumber(DataText, 5) & Separator
            Case ProgramSettings.InventionFacilityUsageColumnName
                ExportData = Format(DataText, "Fixed") & Separator
            Case Else
                ExportData = DataText & Separator
        End Select

        If ExportDataType = SSVDataExport Then
            ' Format to EU
            ExportData = ConvertUStoEUDecimal(ExportData)
        End If

        Return ExportData

    End Function

    ' Refresh the list with blueprints before we calculate the data so the user knows what they are calculating
    Private Sub btnManufactureRefresh_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCalcPreview.Click
        Call DisplayManufacturingResults(False)
    End Sub

    ' Reads through the manufacturing blueprint list and calculates the isk per hour for all that are selected, then sorts them and displays
    Private Sub btnCalculate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCalculate.Click
        Call DisplayManufacturingResults(True)
    End Sub

    ' Builds the query for the main grid update
    Private Function BuildManufacturingSelectQuery(ByRef RecordCount As Integer, ByRef InventedBPs As List(Of Long)) As String
        Dim SQL As String = ""
        Dim SQLTemp As String = ""
        Dim WhereClause As String = ""
        Dim ComboType As String = ""

        ' Core Query
        SQL = "SELECT * FROM " & USER_BLUEPRINTS

        WhereClause = BuildManufactureWhereClause(False, InventedBPs)

        ' Don't load if no where clause
        If WhereClause = "" Then
            Return ""
        End If

        ' Get the record count first
        SQLTemp = "SELECT COUNT(*) FROM " & USER_BLUEPRINTS & WhereClause

        Dim CMDCount As New SQLiteCommand(SQLTemp, DB)
        CMDCount.Parameters.AddWithValue("@USERBP_USERID", CStr(SelectedCharacter.ID))
        RecordCount = CInt(CMDCount.ExecuteScalar())

        Return SQL & WhereClause & " ORDER BY ITEM_GROUP, ITEM_NAME"

    End Function

    ' Builds the where clause for the calc screen based on Tech and Group selections, by reference will return the list of Invented BPs
    Private Function BuildManufactureWhereClause(LoadingList As Boolean, ByRef InventedBPs As List(Of Long)) As String
        Dim WhereClause As String = ""
        Dim ItemTypes As String = ""
        Dim ComboType As String = ""
        Dim ItemTypeNumbers As String = ""
        Dim T2Selected As Boolean = False ' Whether the user wants to look at T2 blueprints or not - this is used in loading only T2 bps that we can invent
        Dim readerT1s As SQLiteDataReader
        Dim TempRace As String = ""
        Dim RaceClause As String = ""
        Dim SizesClause As String = ""

        Dim SQL As String = ""
        Dim T2Query As String = ""
        Dim T3Query As String = ""
        Dim RelicRuns As String = ""

        ' Items
        If chkCalcAmmo.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_CATEGORY = 'Charge' OR "
        End If
        If chkCalcDrones.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_CATEGORY = 'Drone' OR "
        End If
        If chkCalcModules.Checked Then
            ItemTypes = ItemTypes & "(X.ITEM_CATEGORY = 'Module' AND X.ITEM_GROUP NOT LIKE 'Rig%') OR "
        End If
        If chkCalcShips.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_CATEGORY = 'Ship' OR "
        End If
        If chkCalcSubsystems.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_CATEGORY = 'Subsystem' OR "
        End If
        If chkCalcBoosters.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_CATEGORY = 'Implant' OR "
        End If
        If chkCalcComponents.Checked Then
            ItemTypes = ItemTypes & "(X.ITEM_GROUP LIKE '%Components%' AND X.ITEM_GROUP <> 'Station Components') OR "
        End If
        If chkCalcRigs.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_GROUP LIKE 'Rig%' OR "
        End If
        If chkCalcStationParts.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_GROUP = 'Station Components' OR "
        End If
        If chkCalcCelestials.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_CATEGORY IN ('Celestial', 'Orbitals', 'Sovereignty Structures', 'Station', 'Accessories') OR "
        End If
        If chkCalcMisc.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_GROUP IN ('Tool','Data Interfaces','Cyberimplant','Fuel Block') OR "
        End If
        If chkCalcDeployables.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_CATEGORY = 'Deployable' OR "
        End If
        If chkCalcStructures.Checked Then
            ItemTypes = ItemTypes & "X.ITEM_CATEGORY = 'Starbase' OR "
        End If

        ' Take off last OR
        If ItemTypes <> "" Then
            ItemTypes = ItemTypes.Substring(0, ItemTypes.Count - 4)
        Else
            ' Can't run this
            Return ""
        End If

        ' Item Type Definitions - These are set by me based on existing data
        ' 1, 2, 14 are T1, T2, T3
        ' 3 is Storyline
        ' 15 is Pirate Faction
        ' 16 is Navy Faction

        ' Check Tech version
        If chkCalcT1.Enabled Then
            ' Only a Subsystem so T3
            If chkCalcT1.Checked Then
                ItemTypeNumbers = ItemTypeNumbers & "1,"
            End If
        End If

        If chkCalcT2.Enabled Then
            If chkCalcT2.Checked Then
                ' If we have T2 blueprints and they selected to only have T2 they have T1 blueprints for to invent
                ' then build this list and add a special SQL item type entry for T2's
                If rbtnCalcAllBPs.Checked Or chkCalcIncludeT2Owned.Checked Then
                    InventedBPs = New List(Of Long)
                    ' Select all the T2 bps that we can invent from our owned bps and save them
                    SQL = "SELECT productTypeID FROM INDUSTRY_ACTIVITY_PRODUCTS "
                    SQL = SQL & "WHERE activityID = 8 AND blueprintTypeID IN "
                    SQL = SQL & "(SELECT BP_ID FROM " & USER_BLUEPRINTS & " WHERE "
                    If rbtnCalcBPFavorites.Checked Then
                        SQL = SQL & " X.FAVORITE = 1 AND "
                    Else
                        SQL = SQL & " X.OWNED <> 0 AND "
                    End If
                    SQL = SQL & "X.ITEM_TYPE = 1) GROUP BY productTypeID"

                    DBCommand = New SQLiteCommand(SQL, DB)
                    DBCommand.Parameters.AddWithValue("@USERBP_USERID", CStr(SelectedCharacter.ID))
                    readerT1s = DBCommand.ExecuteReader()

                    While readerT1s.Read
                        ' Build list for where clause
                        T2Query = T2Query & CStr(readerT1s.GetValue(0)) & ","
                        ' Save the T2 BPID for later lookup to display
                        InventedBPs.Add(CLng(readerT1s.GetValue(0)))
                    End While

                    readerT1s.Close()
                    readerT1s = Nothing
                    DBCommand = Nothing

                    ' Set the list of T2 BPC's we want and allow for User ID 0 (not owned but invented) or the User ID (OWNED)
                    If InventedBPs.Count <> 0 And T2Query <> "" Then
                        T2Query = " OR (X.ITEM_TYPE = 2 AND X.BP_ID IN (" & T2Query.Substring(0, T2Query.Length - 1) & ")) "
                    End If
                Else
                    T2Query = ""
                End If

                ItemTypeNumbers = ItemTypeNumbers & "2,"

            End If
        End If

        If chkCalcT3.Enabled Then
            If chkCalcT3.Checked Then
                If rbtnCalcAllBPs.Checked Or chkCalcIncludeT3Owned.Checked Then
                    T3Query = " OR (X.ITEM_TYPE = 14) "
                Else
                    T3Query = ""
                End If

                ItemTypeNumbers = ItemTypeNumbers & "14,"

            End If
        End If

        If chkCalcStoryline.Enabled Then
            If chkCalcStoryline.Checked Then
                ItemTypeNumbers = ItemTypeNumbers & "3,"
            End If
        End If

        If chkCalcPirateFaction.Enabled Then
            If chkCalcPirateFaction.Checked Then
                ItemTypeNumbers = ItemTypeNumbers & "15,"
            End If
        End If

        If chkCalcNavyFaction.Enabled Then
            If chkCalcNavyFaction.Checked Then
                ItemTypeNumbers = ItemTypeNumbers & "16,"
            End If
        End If

        ' Add Item Type
        If ItemTypeNumbers <> "" Then
            ItemTypeNumbers = "X.ITEM_TYPE IN (" & ItemTypeNumbers.Substring(0, ItemTypeNumbers.Length - 1) & ") "
        Else
            ' They need to have at least one tech. If not, just return nothing
            Return ""
        End If

        ' See if we are looking at User Owned blueprints or item types and add this - only want owned item types
        If rbtnCalcBPOwned.Checked Then
            ItemTypeNumbers = ItemTypeNumbers & " AND OWNED <> 0 "
        End If

        ' Determine what race we are looking at
        If chkCalcRaceAmarr.Checked Then
            TempRace = TempRace & "4,"
        End If
        If chkCalcRaceCaldari.Checked Then
            TempRace = TempRace & "1,"
        End If
        If chkCalcRaceMinmatar.Checked Then
            TempRace = TempRace & "2,"
        End If
        If chkCalcRaceGallente.Checked Then
            TempRace = TempRace & "8,"
        End If
        If chkCalcRacePirate.Checked Then
            TempRace = TempRace & "15,"
        End If
        If chkCalcRaceOther.Checked Then
            TempRace = TempRace & "0,"
        End If

        If TempRace <> "" Then
            TempRace = "(" & TempRace.Substring(0, Len(TempRace) - 1) & ")"
            RaceClause = "X.RACE_ID IN " & TempRace
        Else
            ' They need to have at least one. If not, just return nothing
            Return ""
        End If

        ' If they select a type of item, set that
        If LoadingList Then
            ComboType = ""
        Else ' We are doing a main query so limit
            If Trim(cmbCalcBPTypeFilter.Text) <> "All Types" And Trim(cmbCalcBPTypeFilter.Text) <> "Select Type" And Trim(cmbCalcBPTypeFilter.Text) <> "" Then
                ComboType = "AND X.ITEM_GROUP ='" & Trim(cmbCalcBPTypeFilter.Text) & "' "
            Else
                ComboType = ""
            End If
        End If

        SizesClause = ""

        ' Finally add the sizes
        If chkCalcSmall.Checked Then ' Light
            SizesClause = SizesClause & "'S',"
        End If

        If chkCalcMedium.Checked Then ' Medium
            SizesClause = SizesClause & "'M',"
        End If

        If chkCalcLarge.Checked Then ' Heavy
            SizesClause = SizesClause & "'L',"
        End If

        If chkCalcXL.Checked Then ' Fighters
            SizesClause = SizesClause & "'XL',"
        End If

        If SizesClause <> "" Then
            SizesClause = " AND SIZE_GROUP IN (" & SizesClause.Substring(0, Len(SizesClause) - 1) & ") "
        End If

        ' Flag for favorites 
        If rbtnCalcBPFavorites.Checked Then
            WhereClause = "WHERE FAVORITE = 1 AND "
        Else
            WhereClause = "WHERE "
        End If

        ' Add all the items to the where clause
        WhereClause = WhereClause & RaceClause & " AND (" & ItemTypes & ") AND (((" & ItemTypeNumbers & ") " & T2Query & T3Query & "))" & SizesClause & ComboType & " "

        ' Finally add on text if they added it
        If Trim(txtCalcItemFilter.Text) <> "" Then
            ' Process NOT filter
            If txtCalcItemFilter.Text.Length >= 3 Then
                If UCase(txtCalcItemFilter.Text.Substring(0, 3)) = "NOT" Then
                    WhereClause = WhereClause & "AND (X.ITEM_NAME NOT LIKE '%" & FormatDBString(Trim(txtCalcItemFilter.Text.Substring(4))) & "%' AND X.ITEM_GROUP NOT LIKE '%" & FormatDBString(Trim(txtCalcItemFilter.Text.Substring(4))) & "%') "
                Else
                    WhereClause = WhereClause & "AND (X.ITEM_NAME LIKE '%" & FormatDBString(Trim(txtCalcItemFilter.Text)) & "%' OR X.ITEM_GROUP LIKE '%" & FormatDBString(Trim(txtCalcItemFilter.Text)) & "%') "
                End If
            Else
                WhereClause = WhereClause & "AND (X.ITEM_NAME LIKE '%" & FormatDBString(Trim(txtCalcItemFilter.Text)) & "%' OR X.ITEM_GROUP LIKE '%" & FormatDBString(Trim(txtCalcItemFilter.Text)) & "%') "
            End If

        End If

        ' Only bps not ignored - no option for this yet
        WhereClause = WhereClause & " AND IGNORE = 0 "

        Return WhereClause

    End Function

    ' Checks SVR data and options whether we insert the item
    Private Sub InsertManufacturingItem(ByVal SentItem As ManufacturingItem, ByVal SVRThreshold As Double, ByVal InsertBlankSVR As Boolean, ByRef SentList As List(Of ManufacturingItem))
        Dim TempItem As New ManufacturingItem

        TempItem = CType(SentItem.Clone, ManufacturingItem)
        RecordIDIterator += 1
        TempItem.RecordID = RecordIDIterator

        ' See if we want to ignore low SVR items
        If Not IsNothing(TempItem.SVR) Then
            If IsNothing(SVRThreshold) Then
                ' Insert the ListItem
                SentList.Add(TempItem)
            ElseIf CDbl(TempItem.SVR) >= SVRThreshold Then
                ' Insert the ListItem
                SentList.Add(TempItem)
            End If
        ElseIf InsertBlankSVR Then
            ' Insert the blank svr item into the List
            SentList.Add(TempItem)
        End If

    End Sub

    Private Sub lstManufacturing_ColumnWidthChanging(sender As Object, e As System.Windows.Forms.ColumnWidthChangingEventArgs) Handles lstManufacturing.ColumnWidthChanging
        If e.ColumnIndex = 0 Then
            e.Cancel = True
            e.NewWidth = lstPricesView.Columns(e.ColumnIndex).Width
        End If
    End Sub

    ' On double click of the item, it will open up the bp window with the item 
    Private Sub lstManufacturing_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles lstManufacturing.DoubleClick
        Dim FoundItem As New ManufacturingItem

        ' Find the item clicked in the list of items then just send those values over
        ManufacturingRecordIDToFind = CLng(lstManufacturing.SelectedItems(0).SubItems(0).Text)
        FoundItem = FinalManufacturingItemList.Find(AddressOf FindManufacturingItem)

        ' Set the build facility we are sending to the proper facility type for this item. 

        If FoundItem IsNot Nothing Then
            ' We found it, so load the current bp
            With FoundItem
                Call LoadBPfromDoubleClick(.BPID, .CalcType, .Inputs, "Manufacturing Tab", _
                                           .ManufacturingTeam, .ComponentTeam, .CopyTeam, _
                                           .ManufacturingFacility, .ComponentManufacturingFacility, .InventionFacility, .CopyFacility, _
                                           chkCalcTaxes.Checked, chkCalcFees.Checked, _
                                           chkCalcBaseFacilityIncludeUsage.Checked, CStr(.BPME), txtCalcRuns.Text, txtCalcProdLines.Text, txtCalcNumBPs.Text)
            End With
        End If

    End Sub

    ' EVE MarketData - Updates the item price averages for the region, days, and typeid sent in the cache database - update only each day
    Public Sub UpdateAverageItemPrices(SentTypeIDs As List(Of Long), UpdateRegionID As Long, UpdateDays As Integer)
        Dim SQL As String
        Dim i, j As Integer
        Dim readerAvgPrices As SQLiteDataReader
        Dim UpdateIDList As New List(Of Long)
        Dim CleanupIDs As New List(Of Long)
        Dim UniqueSentIDs As New List(Of Long)
        Dim UniqueUpdatedPrices As New List(Of Long)
        Dim CurrentDateTime As Date = Now

        Dim API As New EVEMarketDataAPI
        Dim UpdatedAvgPrices As New List(Of EVEMarketDataPriceAverage)
        Dim SQLTypeIDList As String = ""

        ' Clean up sent ID's and make sure we have a set of unique ids
        For i = 0 To SentTypeIDs.Count - 1
            If Not UniqueSentIDs.Contains(SentTypeIDs(i)) Then
                UniqueSentIDs.Add(SentTypeIDs(i))
            End If
        Next

        ' Check the list of Type ID's and see if we ran an update for the ID and days entered in the past day
        For i = 0 To UniqueSentIDs.Count - 1
            SQL = "SELECT 'X' FROM EMD_UPDATE_HISTORY WHERE TypeID =" & CStr(UniqueSentIDs(i)) & " AND RegionID = " & CStr(UpdateRegionID)
            SQL = SQL & " AND DateTime(UpdateLastRan) >= DateTime('" & Format(DateAdd(DateInterval.Day, -1, CurrentDateTime), SQLiteDateFormat) & "')"
            SQL = SQL & " AND Days = " & UpdateDays

            DBCommand = New SQLiteCommand(SQL, DB)
            readerAvgPrices = DBCommand.ExecuteReader

            If Not readerAvgPrices.Read Then
                ' Then the record needs to be updated, so insert it to the list
                UpdateIDList.Add(UniqueSentIDs(i))
            End If
        Next

        ' Convert list to array of longs
        If UpdateIDList.Count = 0 Then
            ' No updates required
            Exit Sub
        End If

        ' TypeID list for the records
        For i = 0 To UpdateIDList.Count - 1
            SQLTypeIDList = SQLTypeIDList & CStr(UpdateIDList(i)) & ","
        Next

        ' Now that we have a list of ids, get them updated - note return data might not include all typeids
        UpdatedAvgPrices = API.GetPriceAverages(UpdateIDList, UpdateRegionID, UpdateDays)

        ' If this errored, then don't update and notify user it's not working
        If API.GetErrorCode <> 0 Then
            If Not ShownPriceUpdateError Then
                MsgBox("Unable to update all Price volume data at this time.", vbInformation, Application.ProductName)
                ShownPriceUpdateError = True
            End If
        End If

        ' Get a unique list of typeID's that were updated to check later
        ' Clean up sent ID's and make sure we have a set of unique ids
        For i = 0 To UpdatedAvgPrices.Count - 1
            If Not UniqueUpdatedPrices.Contains(UpdatedAvgPrices(i).typeID) Then
                UniqueUpdatedPrices.Add(UpdatedAvgPrices(i).typeID)
            End If
        Next

        ' Even if we errored, update any of the data we did get
        If UpdatedAvgPrices.Count <> 0 Then
            Call BeginSQLiteTransaction()

            ' First delete any records older than 90 days for these typeIDs
            SQLTypeIDList = " (" & SQLTypeIDList.Substring(0, Len(SQLTypeIDList) - 1) & ") "
            SQL = "DELETE FROM EMD_ITEM_PRICE_HISTORY WHERE TypeID IN " & SQLTypeIDList
            SQL = SQL & "AND RegionID = " & CStr(UpdateRegionID)
            SQL = SQL & " AND DATETIME(PriceDate) <= DateTime('" & Format(DateAdd(DateInterval.Day, -90, CurrentDateTime), SQLiteDateFormat) & "')"
            Call ExecuteNonQuerySQL(SQL)

            ' Insert these records to the database 
            For i = 0 To UpdatedAvgPrices.Count - 1

                ' Delete the record and insert a fresh one if in there
                SQL = "DELETE FROM EMD_ITEM_PRICE_HISTORY WHERE TypeID = " & CStr(UpdatedAvgPrices(i).typeID)
                SQL = SQL & " AND RegionID = " & CStr(UpdatedAvgPrices(i).regionID)
                SQL = SQL & " AND PriceDate = '" & Format(UpdatedAvgPrices(i).pricedate, SQLiteDateFormat) & "'"
                Call ExecuteNonQuerySQL(SQL)

                ' Insert new record - this will make sure any null added records that get updated are current
                SQL = "INSERT INTO EMD_ITEM_PRICE_HISTORY VALUES ("
                SQL = SQL & CStr(UpdatedAvgPrices(i).typeID) & ","
                SQL = SQL & CStr(UpdatedAvgPrices(i).regionID) & ","
                SQL = SQL & "'" & Format(UpdatedAvgPrices(i).pricedate, SQLiteDateFormat) & "',"
                SQL = SQL & CStr(UpdatedAvgPrices(i).lowPrice) & ","
                SQL = SQL & CStr(UpdatedAvgPrices(i).highPrice) & ","
                SQL = SQL & CStr(UpdatedAvgPrices(i).avgPrice) & ","
                SQL = SQL & CStr(UpdatedAvgPrices(i).volume) & ","
                SQL = SQL & CStr(UpdatedAvgPrices(i).orders) & ")"
                Call ExecuteNonQuerySQL(SQL)

            Next

            ' We just did a set of updates, so update the update history for the unique typeIDs
            For i = 0 To UniqueUpdatedPrices.Count - 1
                ' Delete any records there
                SQL = "DELETE FROM EMD_UPDATE_HISTORY WHERE TypeID = " & CStr(UniqueUpdatedPrices(i))
                SQL = SQL & " AND RegionID = " & CStr(UpdateRegionID)
                SQL = SQL & " AND Days = " & UpdateDays
                Call ExecuteNonQuerySQL(SQL)

                ' Insert the new record
                SQL = "INSERT INTO EMD_UPDATE_HISTORY VALUES (" & CStr(UniqueUpdatedPrices(i)) & ","
                SQL = SQL & UpdateDays & ","
                SQL = SQL & CStr(UpdateRegionID) & ","
                SQL = SQL & "'" & Format(UpdatedAvgPrices(i).UpdateRan, SQLiteDateFormat) & "')"
                Call ExecuteNonQuerySQL(SQL)

            Next

            Call CommitSQLiteTransaction()

        End If

        ' If there are any ID's that we sent and got nothing back from, 
        ' then insert update the update history table and try again tomorrow
        If UniqueUpdatedPrices.Count <> UpdateIDList.Count Then
            Call BeginSQLiteTransaction()

            ' Save the missed ID's here
            j = 0
            SQLTypeIDList = ""

            ' Build the Type ID list
            For i = 0 To UpdateIDList.Count - 1
                TypeIDToFind = UpdateIDList(i)
                If Not UpdatedAvgPrices.Exists(AddressOf FindItem) Then
                    SQLTypeIDList = SQLTypeIDList & CStr(UpdateIDList(i)) & ","
                    CleanupIDs.Add(UpdateIDList(i))
                    j += 1
                End If
            Next

            ' If we have items in the list, process them
            If SQLTypeIDList <> "" Then

                ' Process the missed records one by one
                For i = 0 To CleanupIDs.Count - 1
                    ' If the record is not there, then insert
                    SQL = "SELECT * FROM EMD_UPDATE_HISTORY WHERE TypeID = " & CStr(CleanupIDs(i))
                    SQL = SQL & " AND RegionID = " & CStr(UpdateRegionID)
                    SQL = SQL & " AND Days = " & CStr(UpdateDays)

                    DBCommand = New SQLiteCommand(SQL, DB)
                    readerAvgPrices = DBCommand.ExecuteReader

                    If Not readerAvgPrices.HasRows Then
                        ' Insert the record showing we ran an update for this ID
                        SQL = "INSERT INTO EMD_UPDATE_HISTORY VALUES (" & CStr(CleanupIDs(i)) & ","
                        SQL = SQL & CStr(UpdateDays) & ","
                        SQL = SQL & CStr(UpdateRegionID) & ","
                        SQL = SQL & "'" & Format(CurrentDateTime, SQLiteDateFormat) & "')"
                        Call ExecuteNonQuerySQL(SQL)
                    End If
                Next
            End If

            Call CommitSQLiteTransaction()

        End If

    End Sub

    ' EVE Market Data - Determine the Sales per Volume Ratio, which will be the amount of items we can build in 24 hours (include fractions)when sent the region, avg days, and production time in seconds to make ItemsProduced
    Public Function GetItemSVR(TypeID As Long, RegionID As Long, AvgDays As Integer, ProductionTimeSeconds As Double, ItemsProduced As Long) As Object
        Dim SQL As String
        Dim readerAverage As SQLiteDataReader
        Dim ItemsperDay As Double

        ' The amount of items we can build in 24 hours (include fractions) divided that by the average volume (volume/avgdays)
        ' The data is stored as a record per day, so just count up the number of records in the time period (days - might not be the same as days shown)
        ' and divide by the sum of the volumes over that time period
        SQL = "SELECT SUM(Volume)/COUNT(PriceDate) FROM EMD_ITEM_PRICE_HISTORY "
        SQL = SQL & "WHERE TypeID = " & TypeID & " AND regionID = " & RegionID & " "
        SQL = SQL & "AND DATETIME(PriceDate) >= " & " DateTime('" & Format(DateAdd(DateInterval.Day, -AvgDays, Now), SQLiteDateFormat) & "') "
        SQL = SQL & "AND DATETIME(PriceDate) < " & " DateTime('" & Format(Now, SQLiteDateFormat) & "') "
        SQL = SQL & "AND Volume IS NOT NULL "

        DBCommand = New SQLiteCommand(SQL, DB)
        readerAverage = DBCommand.ExecuteReader

        readerAverage.Read()

        If Not IsDBNull(readerAverage.GetValue(0)) Then
            If ProductionTimeSeconds <> 0 Then
                ' The number of blueprint runs we can build with the sent production time in a day - Seconds to produce 1, then divide that into seconds per day
                ItemsperDay = (24 * 60 * 60) / (ProductionTimeSeconds / ItemsProduced)
                ' Take the items per day and compare to the avg sales volume per day, if it's greater than one you can't make enough items in a day to meet demand = good item to build
                Return CDbl(readerAverage.GetDouble(0)) / ItemsperDay
            Else
                ' Just want the volume for the day
                Return readerAverage.GetDouble(0)
            End If
        Else
            ' Since 0.00 SVR is possible, return nothing instead
            Return Nothing
        End If

    End Function

    ' Predicate for finding an item in a list EVE Market Data of items
    Private Function FindItem(ByVal Item As EVEMarketDataPriceAverage) As Boolean
        If Item.typeID = TypeIDToFind Then
            Return True
        Else
            Return False
        End If
    End Function

    ' The manufacturing item to load the grid
    Public Class ManufacturingItem
        Implements ICloneable

        Public RecordID As Integer ' Unique record id

        Public BPID As Long
        Public ItemGroup As String
        Public ItemGroupID As Integer
        Public ItemCategory As String
        Public ItemCategoryID As Integer
        Public ItemTypeID As Long
        Public ItemName As String
        Public TechLevel As String
        Public Owned As String
        Public BPME As Integer
        Public BPTE As Integer
        Public Inputs As String
        Public Profit As Double
        Public ProfitPercent As Double
        Public IPH As Double
        Public TotalCost As Double
        Public CalcType As String ' Type of calculation to get the profit - either Components, Raw Mats or Build/Buy
        Public BlueprintType As BPType

        Public Runs As Integer
        Public SingleInventedBPCRunsperBPC As Integer
        Public ProductionLines As Integer
        Public LaboratoryLines As Integer

        ' Inputs
        Public Decryptor As New Decryptor
        Public Relic As String
        Public SavedBPRuns As Integer ' The number of runs on the bp that they have, helpful for determing decryptor and relics

        ' Can do variables
        Public CanBuildBP As Boolean
        Public CanInvent As Boolean
        Public CanRE As Boolean

        Public SVR As Object ' Sales volume ratio, set to an object because this can be Nothing
        Public SVRxIPH As Object ' could be nothing

        Public ManufacturingFacility As IndustryFacility
        Public ManufacturingFacilityUsage As Double
        Public ComponentManufacturingFacility As IndustryFacility
        Public ComponentManufacturingFacilityUsage As Double
        Public CapComponentManufacturingFacility As IndustryFacility
        Public CapComponentManufacturingFacilityUsage As Double

        Public CopyCost As Double
        Public CopyFacilityUsage As Double
        Public CopyFacility As IndustryFacility

        Public InventionCost As Double
        Public InventionFacilityUsage As Double
        Public InventionFacility As IndustryFacility

        Public BPProductionTime As String
        Public TotalProductionTime As String
        Public CopyTime As String
        Public InventionTime As String

        Public ItemMarketPrice As Double

        Public BrokerFees As Double
        Public Taxes As Double

        Public BaseJobCost As Double
        Public NumBPs As Integer
        Public InventionChance As Double
        Public Race As String
        Public VolumeperItem As Double
        Public TotalVolume As Double

        Public JobFee As Double
        Public TeamFee As Double

        Public ManufacturingTeam As IndustryTeam
        Public ComponentTeam As IndustryTeam
        Public InventionTeam As IndustryTeam
        Public CopyTeam As IndustryTeam

        Public ManufacturingTeamUsage As Double
        Public ComponentTeamUsage As Double
        Public CopyTeamUsage As Double
        Public InventionTeamUsage As Double

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim CopyofMe As New ManufacturingItem

            CopyofMe.RecordID = RecordID
            CopyofMe.BPID = BPID
            CopyofMe.ItemGroup = ItemGroup
            CopyofMe.ItemGroupID = ItemGroupID
            CopyofMe.ItemCategory = ItemCategory
            CopyofMe.ItemCategoryID = ItemCategoryID
            CopyofMe.ItemTypeID = ItemTypeID
            CopyofMe.ItemName = ItemName
            CopyofMe.TechLevel = TechLevel
            CopyofMe.Owned = Owned
            CopyofMe.BPME = BPME
            CopyofMe.BPTE = BPTE
            CopyofMe.Inputs = Inputs
            CopyofMe.Profit = Profit
            CopyofMe.ProfitPercent = ProfitPercent
            CopyofMe.IPH = IPH
            CopyofMe.TotalCost = TotalCost
            CopyofMe.CalcType = CalcType
            CopyofMe.BlueprintType = BlueprintType

            CopyofMe.Runs = Runs
            CopyofMe.SingleInventedBPCRunsperBPC = SingleInventedBPCRunsperBPC
            CopyofMe.ProductionLines = ProductionLines
            CopyofMe.LaboratoryLines = LaboratoryLines

            CopyofMe.CopyTime = CopyTime
            CopyofMe.InventionTime = InventionTime

            CopyofMe.Inputs = Inputs
            CopyofMe.Decryptor = Decryptor
            CopyofMe.Relic = Relic
            CopyofMe.SavedBPRuns = SavedBPRuns

            CopyofMe.CanBuildBP = CanBuildBP
            CopyofMe.CanInvent = CanInvent
            CopyofMe.CanRE = CanRE

            CopyofMe.SVR = SVR
            CopyofMe.SVRxIPH = SVRxIPH
            CopyofMe.CopyCost = CopyCost
            CopyofMe.InventionCost = InventionCost
            CopyofMe.ManufacturingFacilityUsage = ManufacturingFacilityUsage

            CopyofMe.ManufacturingTeam = ManufacturingTeam
            CopyofMe.ComponentTeam = ComponentTeam
            CopyofMe.InventionTeam = InventionTeam
            CopyofMe.CopyTeam = CopyTeam

            CopyofMe.ManufacturingFacility = ManufacturingFacility
            CopyofMe.ComponentManufacturingFacility = ComponentManufacturingFacility
            CopyofMe.CapComponentManufacturingFacility = CapComponentManufacturingFacility
            CopyofMe.InventionFacility = InventionFacility
            CopyofMe.CopyFacility = CopyFacility

            CopyofMe.BPProductionTime = BPProductionTime
            CopyofMe.TotalProductionTime = TotalProductionTime

            CopyofMe.ItemMarketPrice = ItemMarketPrice

            CopyofMe.BrokerFees = BrokerFees
            CopyofMe.Taxes = Taxes

            CopyofMe.BaseJobCost = BaseJobCost

            CopyofMe.NumBPs = NumBPs
            CopyofMe.InventionChance = InventionChance
            CopyofMe.BlueprintType = BlueprintType
            CopyofMe.Race = Race
            CopyofMe.VolumeperItem = VolumeperItem
            CopyofMe.TotalVolume = TotalVolume

            CopyofMe.JobFee = JobFee
            CopyofMe.TeamFee = TeamFee

            CopyofMe.ManufacturingFacilityUsage = ManufacturingFacilityUsage
            CopyofMe.ComponentManufacturingFacilityUsage = ComponentManufacturingFacilityUsage
            CopyofMe.CopyFacilityUsage = CopyFacilityUsage
            CopyofMe.InventionFacilityUsage = InventionFacilityUsage

            CopyofMe.ManufacturingTeamUsage = ManufacturingTeamUsage
            CopyofMe.ComponentTeamUsage = ComponentTeamUsage
            CopyofMe.CopyTeamUsage = CopyTeamUsage
            CopyofMe.InventionTeamUsage = InventionTeamUsage

            Return CopyofMe

        End Function

    End Class

    ' Predicate for finding an item in a list EVE Market Data of items
    Private Function FindManufacturingItem(ByVal Item As ManufacturingItem) As Boolean
        If Item.RecordID = ManufacturingRecordIDToFind Then
            Return True
        Else
            Return False
        End If
    End Function

    ' Predicate for finding an item in a list EVE Market Data of items
    Private Function FindManufacturingItembyName(ByVal Item As ManufacturingItem) As Boolean
        If Item.ItemName = ManufacturingNameToFind Then
            Return True
        Else
            Return False
        End If
    End Function

    ' For sorting a ManufacturingList by IPH
    Public Class CalcIPHComparer

        Implements System.Collections.Generic.IComparer(Of ManufacturingItem)

        Public Function Compare(ByVal p1 As ManufacturingItem, ByVal p2 As ManufacturingItem) As Integer Implements IComparer(Of ManufacturingItem).Compare
            ' swap p2 and p1 to do decending sort
            Return p2.IPH.CompareTo(p1.IPH)
        End Function

    End Class

    ' For sorting a ManufacturingList by IPH
    Public Class CalcProfitComparer

        Implements System.Collections.Generic.IComparer(Of ManufacturingItem)

        Public Function Compare(ByVal p1 As ManufacturingItem, ByVal p2 As ManufacturingItem) As Integer Implements IComparer(Of ManufacturingItem).Compare
            ' swap p2 and p1 to do decending sort
            Return p2.Profit.CompareTo(p1.Profit)
        End Function

    End Class

    ' For sorting a ManufacturingList by Profit Percent
    Public Class CalcProfitPComparer

        Implements System.Collections.Generic.IComparer(Of ManufacturingItem)

        Public Function Compare(ByVal p1 As ManufacturingItem, ByVal p2 As ManufacturingItem) As Integer Implements IComparer(Of ManufacturingItem).Compare
            ' swap p2 and p1 to do decending sort
            Return p2.ProfitPercent.CompareTo(p1.ProfitPercent)
        End Function

    End Class

    ' For sorting a ManufacturingList by SVR
    Public Class CalcSVRComparer

        Implements System.Collections.Generic.IComparer(Of ManufacturingItem)

        Public Function Compare(ByVal p1 As ManufacturingItem, ByVal p2 As ManufacturingItem) As Integer Implements IComparer(Of ManufacturingItem).Compare
            Dim SVR1 As Double
            Dim SVR2 As Double

            ' swap p2 and p1 to do decending sort
            If IsNothing(p1.SVR) Then
                SVR1 = 0
            Else
                SVR1 = CDbl(p1.SVR)
            End If

            If IsNothing(p2.SVR) Then
                SVR2 = 0
            Else
                SVR2 = CDbl(p2.SVR)
            End If

            ' swap p2 and p1 to do decending sort
            Return SVR2.CompareTo(SVR1)

        End Function

    End Class

    ' For sorting a ManufacturingList by SVR * IPH
    Public Class CalcSVRIPHComparer

        Implements System.Collections.Generic.IComparer(Of ManufacturingItem)

        Public Function Compare(ByVal p1 As ManufacturingItem, ByVal p2 As ManufacturingItem) As Integer Implements IComparer(Of ManufacturingItem).Compare
            Dim SVRIPH1 As Double
            Dim SVRIPH2 As Double

            ' swap p2 and p1 to do decending sort
            If IsNothing(p1.SVRxIPH) Then
                SVRIPH1 = 0
            Else
                SVRIPH1 = CDbl(p1.SVRxIPH)
            End If

            If IsNothing(p1.SVR) Then
                SVRIPH2 = 0
            Else
                SVRIPH2 = CDbl(p2.SVRxIPH)
            End If

            Return SVRIPH2.CompareTo(SVRIPH1)

        End Function

    End Class

    ' Gets the industry type for T3 ships
    Private Function GetT3ShipIndustryType(T3DestroyerCheck As Boolean) As IndustryType
        If T3DestroyerCheck Then
            Return IndustryType.T3DestroyerManufacturing
        Else
            Return IndustryType.T3CruiserManufacturing
        End If
    End Function

    ' Gets the industry type for T3 ships
    Private Function GetT3ShipGroupID(T3DestroyerCheck As Boolean) As Integer
        If T3DestroyerCheck Then
            Return TacticalDestroyerGroupID
        Else
            Return StrategicCruiserGroupID
        End If
    End Function

    ' Sets the type of facility loaded for T3 ships
    Private Sub SetT3FacilityLoaded(T3DestroyerCheck As Boolean, LoadedValue As Boolean)
        If T3DestroyerCheck Then
            CalcT3DestroyerFacilityLoaded = LoadedValue
        Else
            CalcT3FacilityLoaded = LoadedValue
        End If
    End Sub

    ' Sets the type of facility loaded for components
    Private Sub SetComponentFacilityLoaded(CapitalComponentCheck As Boolean, LoadedValue As Boolean)
        If CapitalComponentCheck Then
            CalcCapitalComponentFacilityLoaded = LoadedValue
        Else
            CalcComponentFacilityLoaded = LoadedValue
        End If
    End Sub

    ' Gets the industry type for components
    Private Function GetComponentsIndustryType(CapitalComponentCheck As Boolean) As IndustryType
        If CapitalComponentCheck Then
            Return IndustryType.CapitalComponentManufacturing
        Else
            Return IndustryType.ComponentManufacturing
        End If
    End Function

    ' Gets the industry type for components
    Private Function GetComponentsGroupID(CapitalComponentCheck As Boolean) As Integer
        If CapitalComponentCheck Then
            Return CapitalComponentGroupID
        Else
            Return ConstructionComponentsGroupID
        End If
    End Function

    ' Gets the activity type for components
    Private Function GetComponentActivityType(CapitalComponentCheck As Boolean) As String
        If CapitalComponentCheck Then
            Return ActivityCapComponentManufacturing
        Else
            Return ActivityComponentManufacturing
        End If
    End Function


#Region "List Options Menu"

    ' Gets the line selected, grabs the TypeID and then looks up the CREST Market data for updates, then displays the market history form - add back TODO
    Private Sub OpenMarketDataToolStripMenuItem_Click(sender As System.Object, e As System.EventArgs) Handles CalcBPStripMenuItem.Click

        Dim FoundItem As New ManufacturingItem
        Dim SQL As String
        Dim readerRegion As SQLiteDataReader
        Dim RegionID As Long

        ' Find the item clicked in the list of items by looking up the row number stored in the hidden column
        If lstManufacturing.Items.Count > 0 And lstManufacturing.SelectedItems.Count > 0 Then
            ManufacturingRecordIDToFind = CLng(lstManufacturing.SelectedItems(0).SubItems(0).Text)
            FoundItem = FinalManufacturingItemList.Find(AddressOf FindManufacturingItem)

            If FoundItem IsNot Nothing Then
                Dim TempCrest As New EVECREST

                ' Get the region ID
                SQL = "SELECT regionID FROM REGIONS WHERE regionName ='" & cmbCalcSVRRegion.Text & "'"
                DBCommand = New SQLiteCommand(SQL, DB)
                readerRegion = DBCommand.ExecuteReader

                If readerRegion.Read Then
                    RegionID = readerRegion.GetInt64(0)
                Else
                    RegionID = TheForgeTypeID ' The Forge as default
                End If

                readerRegion.Close()
                DBCommand = Nothing

                If TempCrest.UpdateMarketHistory(FoundItem.ItemTypeID, RegionID) Then
                    ' Now open the window for that item after updated
                End If

                TempCrest = Nothing
            End If
        End If

    End Sub

    Private Sub IgnoreBlueprintToolStripMenuItem_Click(sender As System.Object, e As System.EventArgs) Handles IgnoreBlueprintToolStripMenuItem.Click
        If lstManufacturing.Items.Count > 0 Then
            Dim FoundItem As New ManufacturingItem
            Dim SQL As String

            ' Find the item clicked in the list of items then just send those values over
            ManufacturingRecordIDToFind = CLng(lstManufacturing.SelectedItems(0).SubItems(0).Text)
            FoundItem = FinalManufacturingItemList.Find(AddressOf FindManufacturingItem)

            If FoundItem IsNot Nothing Then
                Dim RemovedIDs As New List(Of Integer)
                Dim ListIDstoRemove As New List(Of Integer)

                ' We found it, so set the bp to ignore
                With FoundItem
                    SQL = "UPDATE ALL_BLUEPRINTS SET IGNORE = 1 WHERE BLUEPRINT_ID = " & CStr(FoundItem.BPID)
                    Call ExecuteNonQuerySQL(SQL)

                    ' Remove the item from the list in all it's forms plus from the manufacturing list
                    ' Get all the items with the name to remove
                    ManufacturingNameToFind = FoundItem.ItemName
                    FoundItem = Nothing

                    Do
                        FoundItem = FinalManufacturingItemList.Find(AddressOf FindManufacturingItembyName)
                        If FoundItem IsNot Nothing Then
                            ' Remove it
                            FinalManufacturingItemList.Remove(FoundItem)
                            RemovedIDs.Add(FoundItem.RecordID)
                        End If
                    Loop Until FoundItem Is Nothing

                    ' Remove all rows currently in the list of this bp
                    lstManufacturing.BeginUpdate()
                    Dim ListCount As Integer = lstManufacturing.Items.Count - 1
                    Dim i As Integer = 0
                    While i < ListCount
                        If RemovedIDs.Contains(CInt(lstManufacturing.Items(i).SubItems(0).Text)) Then
                            ' Add the indicies to remove
                            lstManufacturing.Items(i).Remove()
                            ListCount -= 1
                            i -= 1 ' make sure we reset since we just removed a line
                        End If
                        i += 1
                    End While

                    lstManufacturing.EndUpdate()

                End With
            End If
        End If
    End Sub

#End Region

#End Region

#Region "Datacores"

#Region "Datacores Tab User Object (Check boxes, Text, Buttons) Functions/Procedures "

    Private Sub CorpCheckBoxOnClickLabel(ByVal index As Integer)
        If DCCorpCheckBoxes(index).Checked Then
            DCCorpCheckBoxes(index).Checked = False
        Else
            DCCorpCheckBoxes(index).Checked = True
        End If
    End Sub

    Private Sub CoreCheckBoxOnClickLabel(ByVal index As Integer)
        If DCSkillCheckBoxes(index).Checked Then
            DCSkillCheckBoxes(index).Checked = False
        Else
            DCSkillCheckBoxes(index).Checked = True
        End If
    End Sub

    Private Sub lblDCCorp1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp1.Click
        Call CorpCheckBoxOnClickLabel(1)
    End Sub

    Private Sub lblDCCorp2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp2.Click
        Call CorpCheckBoxOnClickLabel(2)
    End Sub

    Private Sub lblDCCorp3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp3.Click
        Call CorpCheckBoxOnClickLabel(3)
    End Sub

    Private Sub lblDCCorp4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp4.Click
        Call CorpCheckBoxOnClickLabel(4)
    End Sub

    Private Sub lblDCCorp5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp5.Click
        Call CorpCheckBoxOnClickLabel(5)
    End Sub

    Private Sub lblDCCorp6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp6.Click
        Call CorpCheckBoxOnClickLabel(6)
    End Sub

    Private Sub lblDCCorp7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp7.Click
        Call CorpCheckBoxOnClickLabel(7)
    End Sub

    Private Sub lblDCCorp8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp8.Click
        Call CorpCheckBoxOnClickLabel(8)
    End Sub

    Private Sub lblDCCorp9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp9.Click
        Call CorpCheckBoxOnClickLabel(9)
    End Sub

    Private Sub lblDCCorp10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp10.Click
        Call CorpCheckBoxOnClickLabel(10)
    End Sub

    Private Sub lblDCCorp11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp11.Click
        Call CorpCheckBoxOnClickLabel(11)
    End Sub

    Private Sub lblDCCorp12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp12.Click
        Call CorpCheckBoxOnClickLabel(12)
    End Sub

    Private Sub lblDCCorp13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDCCorp13.Click
        Call CorpCheckBoxOnClickLabel(13)
    End Sub

    Private Sub lblDatacore1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore1.Click
        Call CoreCheckBoxOnClickLabel(1)
    End Sub

    Private Sub lblDatacore2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore2.Click
        Call CoreCheckBoxOnClickLabel(2)
    End Sub

    Private Sub lblDatacore3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore3.Click
        Call CoreCheckBoxOnClickLabel(3)
    End Sub

    Private Sub lblDatacore4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore4.Click
        Call CoreCheckBoxOnClickLabel(4)
    End Sub

    Private Sub lblDatacore5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore5.Click
        Call CoreCheckBoxOnClickLabel(5)
    End Sub

    Private Sub lblDatacore6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore6.Click
        Call CoreCheckBoxOnClickLabel(6)
    End Sub

    Private Sub lblDatacore7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore7.Click
        Call CoreCheckBoxOnClickLabel(7)
    End Sub

    Private Sub lblDatacore8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore8.Click
        Call CoreCheckBoxOnClickLabel(8)
    End Sub

    Private Sub lblDatacore9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore9.Click
        Call CoreCheckBoxOnClickLabel(9)
    End Sub

    Private Sub lblDatacore10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore10.Click
        Call CoreCheckBoxOnClickLabel(10)
    End Sub

    Private Sub lblDatacore11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore11.Click
        Call CoreCheckBoxOnClickLabel(11)
    End Sub

    Private Sub lblDatacore12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore12.Click
        Call CoreCheckBoxOnClickLabel(12)
    End Sub

    Private Sub lblDatacore13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore13.Click
        Call CoreCheckBoxOnClickLabel(13)
    End Sub

    Private Sub lblDatacore14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore14.Click
        Call CoreCheckBoxOnClickLabel(14)
    End Sub

    Private Sub lblDatacore15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore15.Click
        Call CoreCheckBoxOnClickLabel(15)
    End Sub

    Private Sub lblDatacore16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore16.Click
        Call CoreCheckBoxOnClickLabel(16)
    End Sub

    Private Sub lblDatacore17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblDatacore17.Click
        Call CoreCheckBoxOnClickLabel(17)
    End Sub

    Private Sub lstDC_ItemCheck(ByVal sender As Object, ByVal e As System.Windows.Forms.ItemCheckEventArgs) Handles lstDC.ItemCheck
        Dim TotalAgents As Integer = CInt(cmbDCResearchMgmt.Text) + 1

        If TotalAgents = lstDC.CheckedItems.Count And e.NewValue = CheckState.Checked Then
            ' Change to unchecked
            e.NewValue = CheckState.Unchecked
        End If

    End Sub

    Private Sub lstDC_ItemChecked(ByVal sender As Object, ByVal e As System.Windows.Forms.ItemCheckedEventArgs) Handles lstDC.ItemChecked

        ' Item was checked so add up the total iph
        If e.Item.Checked Then
            ' Add the value 
            TotalSelectedIPH = TotalSelectedIPH + CDbl(e.Item.SubItems(DCIPH_COLUMN).Text)
        ElseIf Not e.Item.Checked Then
            If lstDC.CheckedItems.Count = 0 Then
                ' Reset if last one checked
                TotalSelectedIPH = 0
            Else
                ' Subtract the amount
                TotalSelectedIPH = TotalSelectedIPH - CDbl(e.Item.SubItems(DCIPH_COLUMN).Text)
            End If
        End If

        txtDCTotalSelectedIPH.Text = CStr(FormatNumber(TotalSelectedIPH, 2))

    End Sub

    Private Sub cmbDCConnections_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbDCConnections.SelectedIndexChanged
        Call LoadDCCorpStandings(False)
    End Sub

    Private Sub chkDC1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC1.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC2.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC3.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC4.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC5.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC6_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC6.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC7_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC7.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC8_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC8.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC9_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC9.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC10_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC10.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC11_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC11.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC12_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC12.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC13_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC13.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC14_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC14.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC15_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC15.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC16_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC16.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDC17_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDC17.CheckedChanged
        Call EnableDCSkillChecks(sender)
    End Sub

    Private Sub chkDCCorp1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp1.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp2.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp3.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp4.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp5.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp6_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp6.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp7_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp7.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp8_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp8.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp9_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp9.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp10_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp10.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp11_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp11.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp12_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp12.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub chkDCCorp13_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkDCCorp13.CheckedChanged
        Call EnableDCCorpTexts(sender)
    End Sub

    Private Sub EnableDCSkillChecks(ByVal sender As Object)
        Dim i As Integer
        Dim cbox As CheckBox

        cbox = DirectCast(sender, CheckBox)

        If Not FirstShowDatacores Then
            For i = 1 To DCSkillCheckBoxes.Count - 1
                If cbox.Name = DCSkillCheckBoxes(i).Name Then
                    If CBool(cbox.Checked) Then
                        DCSkillCombos(i).Enabled = True
                    Else
                        DCSkillCombos(i).Enabled = False
                    End If

                End If
            Next
        End If
    End Sub

    Private Sub EnableDCCorpTexts(ByVal sender As Object)
        Dim i As Integer
        Dim cbox As CheckBox

        cbox = DirectCast(sender, CheckBox)

        If Not FirstShowDatacores Then
            For i = 1 To DCCorpCheckBoxes.Count - 1
                If cbox.Name = DCCorpCheckBoxes(i).Name Then
                    If CBool(cbox.Checked) Then
                        DCCorpTextboxes(i).Enabled = True
                    Else
                        DCCorpTextboxes(i).Enabled = False
                    End If

                End If
            Next
        End If
    End Sub

    Private Sub btnDCReset_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDCReset.Click
        Call LoadDatacoreTab()
    End Sub

    Private Sub lstDC_ColumnClick(ByVal sender As System.Object, ByVal e As System.Windows.Forms.ColumnClickEventArgs) Handles lstDC.ColumnClick
        ' Set the sort order options
        Call SetLstVwColumnSortOrder(e, DCColumnSorter)

        ' Perform the sort with these new sort options.
        lstDC.Sort()
    End Sub

#End Region

    Public Structure DCAgent
        Dim Faction As String
        Dim FactionStanding As Double
        Dim Corporation As String
        Dim CorporationStanding As Double
        Dim Agent As String
        Dim AgentStanding As Double
        Dim AgentLevel As Integer
        'Dim AgentQuality As Integer *** Removed on 19 May 2011 ***
        Dim AgentLocation As String ' System name + security
        Dim DataCoreID As Long
        Dim DataCoreSkill As String
        Dim DataCoreSkillLevel As Integer
        Dim DataCorePrice As Double
        Dim PriceFrom As String
        Dim RPperDay As Double
        Dim CoresPerDay As Double
        Dim IskPerHour As Double
        ' Location ID's
        Dim SystemID As Long
        Dim SystemSecurity As Double
        Dim RegionID As Long

        Dim AgentAvailable As Boolean

    End Structure

    Private Sub InitDatacoreTab()
        ' Reload screen when called
        Call LoadDatacoreTab()
    End Sub

    ' Loads the datacore skills into the Datacore screen
    Private Sub LoadDatacoreTab()
        Dim i As Integer
        Dim TempSkillLevel As Integer
        Dim Settings As New ProgramSettings

        ' Load the datacore skills first
        For i = 1 To DCSkillLabels.Count - 1
            TempSkillLevel = SelectedCharacter.Skills.GetSkillLevel(SelectedCharacter.Skills.GetSkillTypeID(DCSkillLabels(i).Text))

            ' Check based on default
            If UserDCTabSettings.SkillsChecked(i - 1) = Settings.DefaultSkillLevelChecked Then
                If TempSkillLevel <> 0 Then
                    ' Check
                    DCSkillCheckBoxes(i).Checked = True
                    DCSkillCombos(i).Enabled = True
                Else
                    DCSkillCombos(i).Text = "1"
                    DCSkillCheckBoxes(i).Checked = False
                    DCSkillCombos(i).Enabled = False
                End If
            Else ' use what they saved
                DCSkillCombos(i).Text = "1"
                DCSkillCheckBoxes(i).Checked = CBool(UserDCTabSettings.SkillsChecked(i - 1))
                DCSkillCombos(i).Enabled = CBool(UserDCTabSettings.SkillsChecked(i - 1))
            End If

            ' Use the default or use what they saved
            If UserDCTabSettings.SkillsLevel(i - 1) = Settings.DefaultSkillLevel Then
                DCSkillCombos(i).Text = CStr(TempSkillLevel)
            Else ' use what they saved
                DCSkillCombos(i).Text = CStr(UserDCTabSettings.SkillsLevel(i - 1))
            End If

        Next

        ' Load the connections and negotiation skill. If default, then load skills else use what they set
        If UserDCTabSettings.Connections = Settings.DefaultConnections Then
            cmbDCConnections.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(3359))
        Else
            cmbDCConnections.Text = CStr(UserDCTabSettings.Connections)
        End If

        If UserDCTabSettings.Negotiation = Settings.DefaultNegotiation Then
            cmbDCNegotiation.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(3356))
        Else
            cmbDCNegotiation.Text = CStr(UserDCTabSettings.Negotiation)
        End If

        If UserDCTabSettings.ResearchProjectMgt = Settings.DefaultResearchProjMgt Then
            cmbDCResearchMgmt.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(12179))
        Else
            cmbDCResearchMgmt.Text = CStr(UserDCTabSettings.ResearchProjectMgt)
        End If

        ' Load the corp standing text boxes
        Call LoadDCCorpStandings()

        ' Check the Corporation Standings boxes if not 0
        For i = 1 To DCCorpLabels.Count - 1
            If DCCorpTextboxes(i).Text <> "0.00" Then
                DCCorpCheckBoxes(i).Checked = True
                DCCorpTextboxes(i).Enabled = True
            Else
                DCCorpCheckBoxes(i).Checked = False
                DCCorpTextboxes(i).Enabled = False
            End If
        Next

        Select Case UserDCTabSettings.PricesFrom
            Case rbtnDCUpdatedPrices.Text
                rbtnDCUpdatedPrices.Checked = True
            Case rbtnDCRegionPrices.Text
                rbtnDCRegionPrices.Checked = True
            Case rbtnDCSystemPrices.Text
                rbtnDCSystemPrices.Checked = True
        End Select

        chkDCHighSecAgents.Checked = UserDCTabSettings.CheckHighSecAgents
        chkDCLowSecAgents.Checked = UserDCTabSettings.CheckLowNullSecAgents
        chkDCIncludeAllAgents.Checked = UserDCTabSettings.CheckIncludeAgentsCannotAccess

        ' Sov checks
        chkDCAmarrSov.Checked = UserDCTabSettings.CheckSovAmarr
        chkDCAmmatarSov.Checked = UserDCTabSettings.CheckSovAmmatar
        chkDCCaldariSov.Checked = UserDCTabSettings.CheckSovCaldari
        chkDCGallenteSov.Checked = UserDCTabSettings.CheckSovGallente
        chkDCKhanidSov.Checked = UserDCTabSettings.CheckSovKhanid
        chkDCMinmatarSov.Checked = UserDCTabSettings.CheckSovMinmatar
        chkDCSyndicateSov.Checked = UserDCTabSettings.CheckSovSyndicate
        chkDCThukkerSov.Checked = UserDCTabSettings.CheckSovThukker

        cmbDCRegions.Text = UserDCTabSettings.AgentsInRegion

    End Sub

    Private Sub btnDCSaveSettings_Click(sender As System.Object, e As System.EventArgs) Handles btnDCSaveSettings.Click
        Dim TempSettings As DataCoreTabSettings = Nothing
        Dim Settings As New ProgramSettings
        Dim TempSkill As Integer
        Dim TempStanding As Double

        ReDim TempSettings.SkillsLevel(Settings.NumberofDCSettingsSkillRecords)
        ReDim TempSettings.SkillsChecked(Settings.NumberofDCSettingsSkillRecords)
        ReDim TempSettings.CorpsStanding(Settings.NumberofDCSettingsCorpRecords)
        ReDim TempSettings.CorpsChecked(Settings.NumberofDCSettingsCorpRecords)

        If rbtnDCUpdatedPrices.Checked = True Then
            TempSettings.PricesFrom = rbtnDCUpdatedPrices.Text
        ElseIf rbtnDCRegionPrices.Checked = True Then
            TempSettings.PricesFrom = rbtnDCRegionPrices.Text
        ElseIf rbtnDCSystemPrices.Checked = True Then
            TempSettings.PricesFrom = rbtnDCSystemPrices.Text
        End If

        TempSettings.CheckHighSecAgents = chkDCHighSecAgents.Checked
        TempSettings.CheckLowNullSecAgents = chkDCLowSecAgents.Checked
        TempSettings.CheckIncludeAgentsCannotAccess = chkDCIncludeAllAgents.Checked

        TempSettings.CheckSovAmarr = chkDCAmarrSov.Checked
        TempSettings.CheckSovAmmatar = chkDCAmmatarSov.Checked
        TempSettings.CheckSovCaldari = chkDCCaldariSov.Checked
        TempSettings.CheckSovGallente = chkDCGallenteSov.Checked
        TempSettings.CheckSovKhanid = chkDCKhanidSov.Checked
        TempSettings.CheckSovMinmatar = chkDCMinmatarSov.Checked
        TempSettings.CheckSovSyndicate = chkDCSyndicateSov.Checked
        TempSettings.CheckSovThukker = chkDCThukkerSov.Checked

        TempSettings.AgentsInRegion = cmbDCRegions.Text

        ' Save skills
        For i = 1 To DCSkillCheckBoxes.Count - 1
            TempSkill = SelectedCharacter.Skills.GetSkillLevel(SelectedCharacter.Skills.GetSkillTypeID(DCSkillLabels(i).Text))

            ' Only save if they don't have the skill and have checked it or have it and unchecked it
            If (TempSkill = 0 And DCSkillCheckBoxes(i).Checked = False) Or (TempSkill <> 0 And DCSkillCheckBoxes(i).Checked = True) Then
                ' Save as default
                TempSettings.SkillsChecked(i - 1) = Settings.DefaultSkillLevelChecked
            Else
                ' Got a value
                TempSettings.SkillsChecked(i - 1) = CInt(DCSkillCheckBoxes(i).Checked)
            End If

            ' If the skill level they have is the same as the skill of the character, then just save as default
            If CInt(DCSkillCombos(i).Text) = TempSkill Then
                TempSettings.SkillsLevel(i - 1) = Settings.DefaultSkillLevel
            Else
                TempSettings.SkillsLevel(i - 1) = CInt(DCSkillCombos(i).Text)
            End If
        Next

        ' Save Corp Standings
        For i = 1 To DCCorpCheckBoxes.Count - 1
            TempStanding = CDbl(FormatNumber(SelectedCharacter.Standings.GetEffectiveStanding(DCCorpLabels(i).Text, CInt(cmbDCConnections.Text), SelectedCharacter.Skills.GetSkillLevel(3357)), 2))

            ' Only save if they don't have the standing and it's checked or they have it and unchecked
            If (TempStanding = 0 And DCCorpCheckBoxes(i).Checked = False) Or (TempStanding <> 0 And DCCorpCheckBoxes(i).Checked = True) Then
                TempSettings.CorpsChecked(i - 1) = Settings.DefaultCorpStandingChecked
            Else
                TempSettings.CorpsChecked(i - 1) = CInt(DCCorpCheckBoxes(i).Checked)
            End If

            ' If SetWindowTheme standing level they have is the same as the standing on the characters, just save as default
            If CDbl(DCCorpTextboxes(i).Text) = TempStanding Then
                TempSettings.CorpsStanding(i - 1) = Settings.DefaultCorpStanding
            Else
                TempSettings.CorpsStanding(i - 1) = CDbl(DCCorpTextboxes(i).Text)
            End If
        Next

        ' Three main skills, only save if they aren't the same as the character
        If cmbDCConnections.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(3359)) Then
            TempSettings.Connections = Settings.DefaultConnections
        Else
            TempSettings.Connections = CInt(cmbDCConnections.Text)
        End If

        If cmbDCNegotiation.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(3356)) Then
            TempSettings.Negotiation = Settings.DefaultNegotiation
        Else
            TempSettings.Negotiation = CInt(cmbDCNegotiation.Text)
        End If

        If cmbDCResearchMgmt.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(12179)) Then
            TempSettings.ResearchProjectMgt = Settings.DefaultResearchProjMgt
        Else
            TempSettings.ResearchProjectMgt = CInt(cmbDCResearchMgmt.Text)
        End If

        ' Save the data in the XML file
        Call Settings.SaveDatacoreSettings(TempSettings)

        ' Save the data to the local variable
        UserDCTabSettings = TempSettings

        MsgBox("Settings Saved", vbInformation, Application.ProductName)

    End Sub

    ' Refresh's the tab with agents
    Private Sub btnDCRefresh_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDCRefresh.Click
        Dim i As Integer
        Dim j As Integer ' for highlighting top number of agents the user can use
        Dim UniqueAgentList() As String
        Dim TotalIPH As Double = 0 ' For storing the total IPH for the top agents used
        Dim SQL As String
        Dim NegotationSkill As Integer = CInt(cmbDCNegotiation.Text)
        Dim ConnectionsSkill As Integer = CInt(cmbDCConnections.Text)
        Dim TotalRDAgents As Integer = CInt(cmbDCResearchMgmt.Text) + 1
        Dim ResearchTypeList As String = "('"
        Dim CorporationList As String = "('"
        Dim SystemSecurityCheck As String = ""

        Dim readerDC As SQLiteDataReader
        Dim readerDC2 As SQLiteDataReader
        Dim readerRecordCount As Integer

        Dim DCAgentList As New List(Of DCAgent)
        Dim TempDCAgentList As New List(Of DCAgent)
        Dim DCAgentRecord As DCAgent

        ' Price Updates
        Dim TypeIDs As New List(Of PriceItem)
        Dim TempItem As PriceItem = Nothing
        Dim DCTypeIDList As New List(Of PriceItem)
        Dim DCSystemList As New List(Of String)
        Dim DCRegionList As New List(Of String)

        Dim lstDCViewRow As ListViewItem
        Dim CanUseAgent As Boolean
        Dim CoreSkillLevel As Integer
        Dim FactionString As String = ""

        ' Standings
        Dim BaseAgentStanding As Double
        Dim BaseFactionStanding As Double
        Dim AgentStanding As Double
        Dim AgentEffectiveStanding As Double
        Dim CorpStanding As Double
        Dim FactionStanding As Double
        Dim ReqStanding As Double
        Dim ReqCorpStanding As Double

        Dim AgentLevel As Integer
        Dim Diplomacy As Integer
        Dim RPPerDay As Double
        'Dim Multiplier As Integer ' Removed with Inferno 5/22/2012
        Dim CoreSkillName As String

        ' Start
        Me.Cursor = Cursors.WaitCursor
        pnlStatus.Text = "Loading Agents..."
        Application.DoEvents()

        ' Create an instance of a ListView column sorter and assign it 
        ' for the data cores
        DCColumnSorter = New ListViewColumnSorter()
        lstDC.ListViewItemSorter = DCColumnSorter

        ' Load the Research names
        For i = 1 To DCSkillCheckBoxes.Count - 1
            If DCSkillCheckBoxes(i).Checked Then
                ' Safe this one
                ResearchTypeList = ResearchTypeList & DCSkillLabels(i).Text & "','"
            End If
        Next

        ' Format the last list
        ResearchTypeList = ResearchTypeList.Substring(0, ResearchTypeList.Length - 2) & ")"

        ' Load the Corporations
        For i = 1 To DCCorpCheckBoxes.Count - 1
            If DCCorpCheckBoxes(i).Checked Then
                CorporationList = CorporationList & DCCorpLabels(i).Text & "','"
            End If
        Next

        ' Format the last list
        CorporationList = CorporationList.Substring(0, CorporationList.Length - 2) & ")"

        ' If no corps, or skills, then exit
        If ResearchTypeList = ")" Or CorporationList = ")" Then
            MsgBox("No Datacore Agents for Selected Options", vbInformation, Application.ProductName)
            pnlStatus.Text = ""
            Me.Cursor = Cursors.Default
            Exit Sub
        End If

        ' See if they want high sec and low sec, or just high or just low sec agents - Low sec includes Null
        If chkDCHighSecAgents.Checked And Not chkDCLowSecAgents.Checked Then
            SystemSecurityCheck = " AND ROUND(SECURITY,1) >= 0.5 "
        ElseIf chkDCLowSecAgents.Checked And Not chkDCHighSecAgents.Checked Then
            SystemSecurityCheck = " AND ROUND(SECURITY,1) < 0.5 "
        End If

        ' Get count first
        SQL = "SELECT COUNT(*) FROM RESEARCH_AGENTS WHERE RESEARCH_TYPE IN " & ResearchTypeList & " AND CORPORATION_NAME IN " & CorporationList & SystemSecurityCheck

        Dim CMDCount As New SQLiteCommand(SQL, DB)
        readerRecordCount = CInt(CMDCount.ExecuteScalar())

        ' Read the settings and stats to make the query
        SQL = "SELECT FACTION, CORPORATION_ID, CORPORATION_NAME, AGENT_NAME, LEVEL, QUALITY, RESEARCH_TYPE_ID, "
        SQL = SQL & "RESEARCH_TYPE, REGION_ID, REGION_NAME, SOLAR_SYSTEM_ID, SOLAR_SYSTEM_NAME, SECURITY, STATION "
        SQL = SQL & "FROM RESEARCH_AGENTS, FACTIONS, REGIONS "
        SQL = SQL & "WHERE RESEARCH_AGENTS.REGION_ID = REGIONS.regionID "
        SQL = SQL & "AND REGIONS.factionID = FACTIONS.factionID "
        SQL = SQL & "AND RESEARCH_TYPE IN " & ResearchTypeList & " AND CORPORATION_NAME IN " & CorporationList & SystemSecurityCheck

        FactionString = "AND FACTIONS.factionName in ("

        ' Set Sov check
        If chkDCAmarrSov.Checked Then
            FactionString = FactionString & "'Amarr Empire',"
        End If
        If chkDCAmmatarSov.Checked Then
            FactionString = FactionString & "'Ammatar Mandate',"
        End If
        If chkDCCaldariSov.Checked Then
            FactionString = FactionString & "'Caldari State',"
        End If
        If chkDCGallenteSov.Checked Then
            FactionString = FactionString & "'Gallente Federation',"
        End If
        If chkDCKhanidSov.Checked Then
            FactionString = FactionString & "'Khanid Kingdom',"
        End If
        If chkDCMinmatarSov.Checked Then
            FactionString = FactionString & "'Minmatar Republic',"
        End If
        If chkDCSyndicateSov.Checked Then
            FactionString = FactionString & "'The Syndicate',"
        End If
        If chkDCThukkerSov.Checked Then
            FactionString = FactionString & "'Thukker Tribe',"
        End If

        If FactionString <> "AND FACTIONS.factionName in (" Then
            FactionString = FactionString.Substring(0, Len(FactionString) - 1) & ") "
            ' Add the faction string
            SQL = SQL & FactionString
        Else
            ' Clear
            MsgBox("No Datacore Agents for Selected Options", vbInformation, Application.ProductName)
            lstDC.Items.Clear()
            GoTo Leave
        End If

        If cmbDCRegions.Text <> "All Regions" Then
            SQL = SQL & " AND regionName = '" & cmbDCRegions.Text & "'"
        End If

        DBCommand = New SQLiteCommand(SQL, DB)
        readerDC = DBCommand.ExecuteReader

        If Not readerDC.HasRows Then
            ' Clear and exit
            MsgBox("No Datacore Agents for Selected Options", vbInformation, Application.ProductName)
            lstDC.Items.Clear()
            GoTo Leave
        End If

        pnlProgressBar.Value = 0
        pnlProgressBar.Visible = True
        pnlProgressBar.Maximum = readerRecordCount

        ' Loop through all the agents and build the list to put into the graph
        While readerDC.Read
            ' First find out what personal standing to use, faction, corp or personal
            ' Get user's base agent standing with this agent
            If Not IsNothing(SelectedCharacter.Standings) Then
                BaseAgentStanding = SelectedCharacter.Standings.GetStanding(readerDC.GetString(3))
                BaseFactionStanding = SelectedCharacter.Standings.GetStanding(readerDC.GetString(0))
            Else
                BaseAgentStanding = 0
                BaseFactionStanding = 0
            End If

            ' The corp standing will either be the original corp standing or whatever they put in (skills are applied in text box display)
            CorpStanding = GetDCtxtCorpStanding(readerDC.GetString(2))

            Diplomacy = SelectedCharacter.Skills.GetSkillLevel(3357)

            ' Standing = (BaseStanding + (10 - BaseStanding) * (0.04 * ConnectionsSkill))
            If BaseAgentStanding < 0 Then
                ' Use Diplomacy
                AgentStanding = BaseAgentStanding + ((10 - BaseAgentStanding) * (0.04 * Diplomacy))
            ElseIf BaseAgentStanding > 0 Then
                ' Use connections
                AgentStanding = BaseAgentStanding + ((10 - BaseAgentStanding) * (0.04 * ConnectionsSkill))
            Else
                AgentStanding = 0
            End If

            If BaseFactionStanding < 0 Then
                ' Use Diplomacy
                FactionStanding = BaseFactionStanding + ((10 - BaseFactionStanding) * (0.04 * Diplomacy))
            ElseIf BaseFactionStanding > 0 Then
                ' Use connections
                FactionStanding = BaseFactionStanding + ((10 - BaseFactionStanding) * (0.04 * ConnectionsSkill))
            Else
                FactionStanding = 0
            End If

            '******* Agent Quality Removed on 19 May 2011 *******
            ' Base Quality is now 20 for all agents
            AgentLevel = readerDC.GetInt32(4)

            ' Agent_Effective_Quality = Agent_Quality + (5 * Negotiation_Skill_Level) + Round_Down(AgentPersonalStanding)
            AgentEffectiveStanding = 20 + (5 * NegotationSkill) + AgentStanding

            ' Required Standing = ((Level - 1) * 2) + (Quality / 20) 
            ' ReqStanding = (AgentLevel - 1) * 2 -- May 19th change
            Select Case AgentLevel
                Case 1
                    ReqStanding = 0
                Case 2
                    ReqStanding = 1
                Case 3
                    ReqStanding = 3
                Case 4
                    ReqStanding = 5
            End Select

            ReqCorpStanding = ReqStanding - 2

            ' Now determine if we can use this agent or not based on all the data
            ' New from game: Your effective personal standings must be 3.00 or higher toward this agent's corporation in order to use this agent, 
            ' as well as an effective personal standing of 5.00 or higher toward this agent, its faction, or its corporation in order to use this agent's services.

            ' From game: Your effective personal standings must be 2.00 or higher toward this agent's 
            ' corporation in order to use this agent (level 3, qual 0, effqual 20), 
            ' as well as an effective personal standing of 4.00 or higher toward this agent, its faction, 
            ' or its corporation in order to use this agent's services.

            If CorpStanding >= ReqCorpStanding And (AgentStanding >= ReqStanding Or CorpStanding >= ReqStanding Or FactionStanding >= ReqStanding) Then
                ' Can use agent
                CanUseAgent = True
            Else
                ' Can't so grey out line
                CanUseAgent = False
            End If

            CoreSkillName = readerDC.GetString(7)
            CoreSkillLevel = GetCoreSkillLevel(CoreSkillName)

            ' Research_Points_Per_Day = Multiplier * ((1 + (Agent_Effective_Quality / 100)) *  ((Your_Skill + Agent_Skill) ^ 2))
            RPPerDay = Math.Round(((CoreSkillLevel + AgentLevel) ^ 2) * (1 + (AgentEffectiveStanding / 100)), 2)

            ' Now load information into list
            DCAgentRecord.SystemID = readerDC.GetInt64(10)
            DCAgentRecord.SystemSecurity = Math.Round(readerDC.GetDouble(12), 1)
            DCAgentRecord.RegionID = readerDC.GetInt64(8)
            DCAgentRecord.Faction = readerDC.GetString(0)
            DCAgentRecord.FactionStanding = FactionStanding
            DCAgentRecord.Corporation = readerDC.GetString(2)
            DCAgentRecord.CorporationStanding = CorpStanding
            DCAgentRecord.Agent = readerDC.GetString(3)
            DCAgentRecord.AgentStanding = Math.Truncate(AgentStanding * 100) / 100
            DCAgentRecord.AgentLevel = readerDC.GetInt32(4)
            DCAgentRecord.AgentLocation = readerDC.GetString(13) & " (" & CStr(DCAgentRecord.SystemSecurity) & ") - " & readerDC.GetString(9)  ' Station name + security + region

            ' Need the Core typeID
            Dim TempCoreName As String = ""

            If readerDC.GetString(7).Contains("Amarr Starship") Then
                TempCoreName = "Amarrian Starship Engineering"
            ElseIf readerDC.GetString(7).Contains("Gallente Starship") Then
                TempCoreName = "Gallentean Starship Engineering"
            Else
                TempCoreName = readerDC.GetString(7)
            End If

            SQL = "SELECT typeID FROM INVENTORY_TYPES WHERE typeName = 'Datacore - " & TempCoreName & "'"

            DBCommand = New SQLiteCommand(SQL, DB)
            readerDC2 = DBCommand.ExecuteReader()
            If readerDC2.Read() Then
                DCAgentRecord.DataCoreID = readerDC2.GetInt64(0)
            Else
                DCAgentRecord.DataCoreID = 0
            End If
            readerDC2.Close()
            readerDC2 = Nothing

            DCAgentRecord.DataCoreSkill = readerDC.GetString(7)
            DCAgentRecord.DataCoreSkillLevel = CoreSkillLevel
            DCAgentRecord.AgentAvailable = CanUseAgent
            DCAgentRecord.RPperDay = RPPerDay
            DCAgentRecord.CoresPerDay = RPPerDay / 100 ' Inferno Change - all cores cost 100 RP per core
            DCAgentRecord.DataCorePrice = 0
            DCAgentRecord.PriceFrom = ""
            DCAgentRecord.IskPerHour = 0

            ' Add the record
            DCAgentList.Add(DCAgentRecord)

            ' For each record, update the progress bar
            Call IncrementToolStripProgressBar(pnlProgressBar)

        End While

        readerDC.Close()
        readerDC = Nothing
        DBCommand = Nothing

        pnlProgressBar.Visible = False
        Application.DoEvents()

        pnlStatus.Text = "Calculating..."
        pnlProgressBar.Value = 0
        pnlProgressBar.Maximum = DCAgentList.Count
        pnlProgressBar.Visible = True
        Application.DoEvents()

        ' Now figure out what prices to use and load accordingly
        If rbtnDCUpdatedPrices.Checked Then ' Use whatever the user has loaded in Item Prices
            For i = 0 To DCAgentList.Count - 1
                ' First get the record we are updating
                SQL = "SELECT PRICE FROM ITEM_PRICES WHERE ITEM_ID =" & DCAgentList(i).DataCoreID

                DBCommand = New SQLiteCommand(SQL, DB)
                readerDC2 = DBCommand.ExecuteReader()

                ' First save the record and then remove the record we are on
                DCAgentRecord = DCAgentList(i)

                If readerDC2.Read() Then
                    DCAgentRecord.DataCorePrice = readerDC2.GetDouble(0)
                Else
                    DCAgentRecord.DataCorePrice = 0
                End If

                DCAgentRecord.DataCorePrice -= DataCoreRedeemCost ' Add an amount of Isk to redeem each datacore, so subtract this from the market price

                DCAgentRecord.PriceFrom = "Current"
                DCAgentRecord.IskPerHour = Math.Round((DCAgentRecord.DataCorePrice * DCAgentRecord.CoresPerDay) / 24, 2)

                ' Insert the record
                TempDCAgentList.Add(DCAgentRecord)

                readerDC2.Close()
                readerDC2 = Nothing
                DBCommand = Nothing
            Next

        ElseIf rbtnDCRegionPrices.Checked Then ' Look up the max buy price for the region the Agent is located
            ' Update the price cache with our list of Regions for these datacores
            ' Build the list of datacore ID's and Regions
            For i = 0 To DCAgentList.Count - 1
                TempItem.Manufacture = False
                TempItem.TypeID = DCAgentList(i).DataCoreID

                If Not DCTypeIDList.Contains(TempItem) Then
                    DCTypeIDList.Add(TempItem)
                End If

                If Not DCRegionList.Contains(CStr(DCAgentList(i).RegionID)) Then
                    DCRegionList.Add(CStr(DCAgentList(i).RegionID))
                End If

            Next

            For i = 0 To DCRegionList.Count - 1
                ' Need to update the cache for each region, for all typeids, so send one region at a time
                Dim TempRegionList As New List(Of String)
                TempRegionList.Add(DCRegionList(i))
                Call UpdatePricesCache(DCTypeIDList, TempRegionList, "")
            Next

            ' Now search for each item's price in the cache with its region and pull up the max buy order
            For i = 0 To DCAgentList.Count - 1
                SQL = "SELECT buyMax FROM ITEM_PRICES_CACHE WHERE typeID =" & DCAgentList(i).DataCoreID & " AND RegionList ='" & DCAgentList(i).RegionID & "'"

                DBCommand = New SQLiteCommand(SQL, DB)
                readerDC2 = DBCommand.ExecuteReader()

                DCAgentRecord = DCAgentList(i)

                If readerDC2.Read Then
                    DCAgentRecord.DataCorePrice = readerDC2.GetDouble(0)
                Else
                    DCAgentRecord.DataCorePrice = 0
                End If

                DCAgentRecord.DataCorePrice -= DataCoreRedeemCost ' Add an amount of Isk to redeem each datacore, so subtract this from the market price

                DCAgentRecord.PriceFrom = "Region"
                DCAgentRecord.IskPerHour = Math.Round((DCAgentRecord.DataCorePrice * DCAgentRecord.CoresPerDay) / 24, 2)

                ' Insert the record
                TempDCAgentList.Add(DCAgentRecord)

                readerDC2.Close()
                readerDC2 = Nothing
                DBCommand = Nothing
            Next

        ElseIf rbtnDCSystemPrices.Checked Then ' Use the max buy price for the system the Agent is located
            ' Update the price cache with a list of systems for these datacores
            ' Build the list of datacore ID's and systems
            For i = 0 To DCAgentList.Count - 1
                TempItem.Manufacture = False
                TempItem.TypeID = DCAgentList(i).DataCoreID

                If Not DCTypeIDList.Contains(TempItem) Then
                    DCTypeIDList.Add(TempItem)
                End If

                If Not DCSystemList.Contains(CStr(DCAgentList(i).SystemID)) Then
                    DCSystemList.Add(CStr(DCAgentList(i).SystemID))
                End If

            Next

            ' Need to update the cache for each region, for all typeids so send one system at a time
            For i = 0 To DCSystemList.Count - 1
                Call UpdatePricesCache(DCTypeIDList, Nothing, DCSystemList(i))
            Next

            ' Now search for each item's price in the cache with its solar system and pull up the max buy order
            For i = 0 To DCAgentList.Count - 1
                SQL = "SELECT buyMax FROM ITEM_PRICES_CACHE WHERE typeID =" & DCAgentList(i).DataCoreID & " AND RegionList ='" & DCAgentList(i).SystemID & "'"

                DBCommand = New SQLiteCommand(SQL, DB)
                readerDC2 = DBCommand.ExecuteReader()

                DCAgentRecord = DCAgentList(i)

                If readerDC2.Read Then
                    DCAgentRecord.DataCorePrice = readerDC2.GetDouble(0)
                Else
                    DCAgentRecord.DataCorePrice = 0
                End If

                DCAgentRecord.DataCorePrice -= DataCoreRedeemCost ' Add an amount of Isk to redeem each datacore, so subtract this from the market price

                DCAgentRecord.PriceFrom = "System"
                DCAgentRecord.IskPerHour = Math.Round((DCAgentRecord.DataCorePrice * DCAgentRecord.CoresPerDay) / 24, 2)

                ' Insert the record
                TempDCAgentList.Add(DCAgentRecord)

                readerDC2.Close()
                readerDC2 = Nothing
                DBCommand = Nothing
            Next

        End If

        ' Set the updated list
        DCAgentList = TempDCAgentList

        ' Sort the Agent List by Isk per hour
        ' Sort the ore List by the iph
        DCAgentList.Sort(New DataCoreIPHComparer)

        ' Get number of R&D Agents they can use
        ReDim UniqueAgentList(TotalRDAgents - 1)
        j = 0

        pnlStatus.Text = "Refreshing List..."
        pnlProgressBar.Value = 0
        pnlProgressBar.Maximum = DCAgentList.Count
        pnlProgressBar.Visible = True
        Application.DoEvents()

        ' Build a list of unique agent names equal to number the user can use in order of Isk per hour
        For i = 0 To DCAgentList.Count - 1
            If DCAgentList(i).AgentAvailable Or (Not DCAgentList(i).AgentAvailable And chkDCIncludeAllAgents.Checked) Then ' make sure we want to look at this one
                If Not UniqueAgentList.Contains(DCAgentList(i).Agent) Then
                    ' Add the agent
                    UniqueAgentList(j) = DCAgentList(i).Agent
                    j = j + 1

                    If j > TotalRDAgents - 1 Then
                        Exit For
                    End If
                End If
            End If
        Next

        j = 0
        lstDC.Items.Clear()

        ' Load the data into the table
        lstDC.BeginUpdate()
        For i = 0 To DCAgentList.Count - 1
            If DCAgentList(i).AgentAvailable Or (Not DCAgentList(i).AgentAvailable And chkDCIncludeAllAgents.Checked) Then
                lstDCViewRow = lstDC.Items.Add("") ' Check
                'The remaining columns are subitems  
                lstDCViewRow.SubItems.Add(DCAgentList(i).Corporation)
                lstDCViewRow.SubItems.Add(DCAgentList(i).Agent)
                lstDCViewRow.SubItems.Add(CStr(DCAgentList(i).AgentLevel))
                lstDCViewRow.SubItems.Add(FormatNumber(DCAgentList(i).AgentStanding, 2))
                lstDCViewRow.SubItems.Add(DCAgentList(i).AgentLocation)
                lstDCViewRow.SubItems.Add(DCAgentList(i).DataCoreSkill)
                lstDCViewRow.SubItems.Add(FormatNumber(DCAgentList(i).DataCorePrice, 2))
                lstDCViewRow.SubItems.Add(DCAgentList(i).PriceFrom)
                lstDCViewRow.SubItems.Add(FormatNumber(DCAgentList(i).CoresPerDay, 2))
                lstDCViewRow.SubItems.Add(FormatNumber(DCAgentList(i).IskPerHour, 2))

                ' Color in the top 5 unique agents
                If j <= TotalRDAgents - 1 Then
                    If DCAgentList(i).Agent = UniqueAgentList(j) Then
                        ' Color this row
                        lstDCViewRow.BackColor = Color.LightGreen
                        ' Save the total iph for this agent and add it to the total
                        TotalIPH = TotalIPH + DCAgentList(i).IskPerHour
                        ' Move to next agent name
                        j = j + 1
                    End If
                End If

                ' If the agent can't be used, grey out the row
                If Not DCAgentList(i).AgentAvailable Then
                    lstDCViewRow.ForeColor = Color.Gray
                Else
                    Select Case DCAgentList(i).SystemSecurity
                        Case Is < 0.1
                            lstDCViewRow.ForeColor = Color.Red
                        Case Is < 0.5
                            lstDCViewRow.ForeColor = Color.Orange
                        Case Else
                            lstDCViewRow.ForeColor = Color.Black
                    End Select
                End If

                ' Finally, highlight with blue text the agents we have selected
                For Each DBAgent In SelectedCharacter.GetResearchAgents.GetResearchAgents
                    If DCAgentList(i).Agent = DBAgent.Agent And DCAgentList(i).AgentLevel = DBAgent.AgentLevel _
                        And DCAgentList(i).DataCoreSkill = DBAgent.Field And DCAgentList(i).AgentAvailable Then
                        lstDCViewRow.ForeColor = Color.Blue
                        Exit For
                    End If
                Next

            End If

            ' For each record, update the progress bar
            Call IncrementToolStripProgressBar(pnlProgressBar)

        Next

        lstDC.EndUpdate()

        ' Update the Total IPH
        txtDCTotalOptIPH.Text = FormatNumber(TotalIPH, 2)

Leave:
        ' End
        Me.Cursor = Cursors.Default
        pnlStatus.Text = ""
        pnlProgressBar.Visible = False
        Application.DoEvents()

    End Sub

    ' Returns the text standing in the DC box for the corp name sent
    Private Function GetDCtxtCorpStanding(ByVal CorpName As String) As Double
        ' Load the Research names
        For i = 1 To DCCorpLabels.Count - 1
            ' Compare to the label (all indexes are synched)
            If DCCorpLabels(i).Text = CorpName Then
                ' Return the value of the text box
                If Trim(DCCorpTextboxes(i).Text) = "" Or Not IsNumeric(DCCorpTextboxes(i).Text) Then
                    DCCorpTextboxes(i).Text = "0.00"
                    Return 0
                Else
                    Return CDbl(DCCorpTextboxes(i).Text)
                End If
            End If
        Next

        Return 0
    End Function

    ' Returns the skill set in the combo boxes that is sent
    Private Function GetCoreSkillLevel(ByVal SkillName As String) As Integer
        Dim i As Integer

        For i = 1 To DCSkillLabels.Count - 1
            If DCSkillLabels(i).Text = SkillName Then
                Return CInt(DCSkillCombos(i).Text)
            End If
        Next

        Return 0

    End Function

    ' Loads the corporation standings on the Datacore screen
    Private Sub LoadDCCorpStandings(Optional ByVal UpdateCheckBoxes As Boolean = True)
        Dim Settings As New ProgramSettings

        ' Load the Corporation Standings with skills
        If SelectedCharacter.Name <> None Then
            For i = 1 To DCCorpLabels.Count - 1

                ' Check based on default
                If UserDCTabSettings.CorpsStanding(i - 1) = Settings.DefaultCorpStanding Then
                    DCCorpTextboxes(i).Text = FormatNumber(SelectedCharacter.Standings.GetEffectiveStanding(DCCorpLabels(i).Text, CInt(cmbDCConnections.Text), SelectedCharacter.Skills.GetSkillLevel(3357)), 2)
                Else ' use what they entered
                    DCCorpTextboxes(i).Text = FormatNumber(UserDCTabSettings.CorpsStanding(i - 1), 2)
                End If

                If UpdateCheckBoxes Then
                    ' check it based on defaults
                    If UserDCTabSettings.CorpsChecked(i - 1) = Settings.DefaultCorpStandingChecked Then
                        If DCCorpTextboxes(i).Text <> "0.00" Then
                            DCCorpCheckBoxes(i).Checked = True
                            DCCorpTextboxes(i).Enabled = True
                        Else
                            DCCorpCheckBoxes(i).Checked = False
                            DCCorpTextboxes(i).Enabled = False
                        End If
                    Else ' What they set
                        DCCorpCheckBoxes(i).Checked = CBool(UserDCTabSettings.CorpsChecked(i - 1))
                        DCCorpTextboxes(i).Enabled = CBool(UserDCTabSettings.CorpsChecked(i - 1))
                    End If

                End If

            Next

            If UpdateCheckBoxes Then
                txtDCTotalOptIPH.Text = "0.00"
                txtDCTotalSelectedIPH.Text = "0.00"
                lstDC.Items.Clear()
            End If
        Else
            ' Using dummy, so uncheck all and disable all boxes
            For i = 1 To DCCorpLabels.Count - 1
                DCCorpCheckBoxes(i).Checked = False
                DCCorpTextboxes(i).Enabled = False
                DCCorpTextboxes(i).Text = "0.00"
            Next
        End If

    End Sub

    Private Sub btnDCExporttoClip_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDCExporttoClip.Click
        Dim ClipboardData = New DataObject
        Dim OutputText As String = ""
        Dim item As ListViewItem
        Dim checkeditems As ListView.CheckedListViewItemCollection
        Dim ItemsSelected As Boolean = False
        Dim Separator As String = ""

        If lstDC.CheckedItems.Count <> 0 Then
            ' For each checked item, export the data
            checkeditems = lstDC.CheckedItems

            If UserApplicationSettings.DataExportFormat = CSVDataExport Then
                Separator = ", "
            ElseIf UserApplicationSettings.DataExportFormat = SSVDataExport Then
                Separator = "; "
            End If

            If UserApplicationSettings.DataExportFormat = CSVDataExport Then
                OutputText = "Selected R&D Agents:" & Environment.NewLine & "Corporation, Agent Name, Agent Level, Agent Location, DataCore Skill, Isk per Hour" & Environment.NewLine & Environment.NewLine
            ElseIf UserApplicationSettings.DataExportFormat = SSVDataExport Then
                OutputText = "Selected R&D Agents:" & Environment.NewLine & "Corporation; Agent Name; Agent Level; Agent Location; DataCore Skill; Isk per Hour" & Environment.NewLine & Environment.NewLine
            Else
                OutputText = "Selected R&D Agents:" & Environment.NewLine & Environment.NewLine
            End If

            For Each item In checkeditems
                ItemsSelected = True
                If UserApplicationSettings.DataExportFormat = CSVDataExport Or UserApplicationSettings.DataExportFormat = SSVDataExport Then
                    OutputText = OutputText & item.SubItems(1).Text & Separator & item.SubItems(2).Text & Separator & item.SubItems(3).Text & Separator
                    OutputText = OutputText & item.SubItems(5).Text & Separator & item.SubItems(6).Text & Separator
                    If UserApplicationSettings.DataExportFormat = SSVDataExport Then
                        ' Replace any commas with decimals and vice versa
                        OutputText = OutputText & ConvertUStoEUDecimal(item.SubItems(10).Text) & Separator & Environment.NewLine
                    Else ' Save as normal but remove any commas in the price
                        OutputText = OutputText & item.SubItems(10).Text.Replace(",", "") & Separator & Environment.NewLine
                    End If
                Else
                    OutputText = OutputText & "Corporation: " & item.SubItems(1).Text & Environment.NewLine
                    OutputText = OutputText & "Agent Name: " & item.SubItems(2).Text & Environment.NewLine
                    OutputText = OutputText & "Agent Level: " & item.SubItems(3).Text & Environment.NewLine
                    OutputText = OutputText & "Agent Location: " & item.SubItems(5).Text & Environment.NewLine
                    OutputText = OutputText & "Datacore Skill: " & item.SubItems(6).Text & Environment.NewLine
                    OutputText = OutputText & "Isk per Hour: " & item.SubItems(10).Text & Environment.NewLine & Environment.NewLine
                End If
            Next

            If ItemsSelected Then
                ' Paste to clipboard
                Call CopyTextToClipboard(OutputText)
            End If
        Else
            MsgBox("No Agents Selected", vbInformation, Application.ProductName)
        End If

    End Sub

    Private Sub cmbDCRegions_DropDown(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmbDCRegions.DropDown
        Dim SQL As String
        Dim readerReg As SQLiteDataReader

        If Not DCRegionsLoaded Then

            ' Load the select systems combobox with systems
            SQL = "SELECT regionName FROM RESEARCH_AGENTS, REGIONS WHERE RESEARCH_AGENTS.REGION_ID = REGIONS.regionID "
            SQL = SQL & "GROUP BY regionName"

            DBCommand = New SQLiteCommand(SQL, DB)
            readerReg = DBCommand.ExecuteReader

            cmbDCRegions.Items.Add("All Regions")

            While readerReg.Read
                cmbDCRegions.Items.Add(readerReg.GetString(0))
            End While

            readerReg.Close()
            readerReg = Nothing
            DBCommand = Nothing

            cmbDCRegions.Text = "All Regions"
            DCRegionsLoaded = True

        End If

    End Sub

    ' For sorting a list of Mining Ore
    Public Class DataCoreIPHComparer

        Implements System.Collections.Generic.IComparer(Of DCAgent)

        Public Function Compare(ByVal p1 As DCAgent, ByVal p2 As DCAgent) As Integer Implements IComparer(Of DCAgent).Compare
            ' swap p2 and p1 to do decending sort
            Return p2.IskPerHour.CompareTo(p1.IskPerHour)
        End Function

    End Class

#End Region

#Region "Reactions"

#Region "Reaction Form functions"

    ' Calculate per hour, the best profit available for reactions selected
    Private Sub btnCalculateCosts_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnReactionRefresh.Click
        lstReactionMats.Visible = False
        Call UpdateReactionsGrid()

    End Sub

    Private Sub chkReactionsTaxes_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkReactionsTaxes.CheckedChanged
        If Not FirstLoad Then

            ' Reset check box
            lblReactionsTaxes.Text = "0.00"

            Call UpdateReactionsGrid()
        End If
    End Sub

    Private Sub chkReactionsFees_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkReactionsFees.CheckedChanged
        If Not FirstLoad Then

            ' Reset check box
            lblReactionsFees.Text = "0.00"

            Call UpdateReactionsGrid()
        End If
    End Sub

    Private Sub txtReactionsNumPOS_GotFocus(sender As Object, e As System.EventArgs) Handles txtReactionsNumPOS.GotFocus
        Call txtReactionsNumPOS.SelectAll()
    End Sub

    Private Sub txtReactionsNumPOS_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtReactionsNumPOS.KeyDown
        Call ProcessCutCopyPasteSelect(txtReactionsNumPOS, e)
        If e.KeyCode = Keys.Enter Then
            Call UpdateReactionsGrid()
        End If
    End Sub

    Private Sub txtReactionsNumPOS_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtReactionsNumPOS.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub txtReactionPOSFuelCost_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtReactionPOSFuelCost.Click
        Call txtReactionPOSFuelCost.SelectAll()
    End Sub

    Private Sub txtReactionPOSFuelCost_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtReactionPOSFuelCost.GotFocus
        Call txtReactionPOSFuelCost.SelectAll()
    End Sub

    Private Sub txtReactionPOSFuelCost_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txtReactionPOSFuelCost.KeyDown
        Call ProcessCutCopyPasteSelect(txtReactionPOSFuelCost, e)
        If e.KeyCode = Keys.Enter Then
            Call UpdateReactionsGrid()
        End If
    End Sub

    Private Sub txtReactionPOSFuelCost_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtReactionPOSFuelCost.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedPriceChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub chkReactionsMoonMats_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkReactionsProcMoonMats.CheckedChanged
        Call UpdateReactionChecks()
    End Sub

    Private Sub chkReactionsAdvComp_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkReactionsAdvMoonMats.CheckedChanged
        Call UpdateReactionChecks()
    End Sub

    Private Sub chkReactionsSimpleBio_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkReactionsSimpleBio.CheckedChanged
        Call UpdateReactionChecks()
    End Sub

    Private Sub chkReactionsComplexBio_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkReactionsComplexBio.CheckedChanged
        Call UpdateReactionChecks()
    End Sub

    Private Sub chkReactionsBuildBasic_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkReactionsBuildBasic.CheckedChanged
        If chkReactionsBuildBasic.Checked Then
            chkReactionsIgnoreBaseMatPrice.Enabled = True
        Else
            chkReactionsIgnoreBaseMatPrice.Enabled = False
        End If
    End Sub

    Private Sub chkReactionsBuildBasic_EnabledChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkReactionsBuildBasic.EnabledChanged
        If Not chkReactionsBuildBasic.Enabled Then
            chkReactionsIgnoreBaseMatPrice.Enabled = False
        End If
    End Sub

    Private Sub UpdateReactionChecks()
        If chkReactionsAdvMoonMats.Checked Or chkReactionsComplexBio.Checked Then
            chkReactionsBuildBasic.Enabled = True
        Else
            chkReactionsBuildBasic.Enabled = False
        End If

        If chkReactionsSimpleBio.Checked Or chkReactionsProcMoonMats.Checked Then
            chkReactionsIgnoreBaseMatPrice.Enabled = True
        Else
            chkReactionsIgnoreBaseMatPrice.Enabled = False
        End If

        If chkReactionsProcMoonMats.Checked Then
            chkReactionsRefine.Enabled = True
        Else
            chkReactionsRefine.Enabled = False
        End If

    End Sub

    Private Sub lstReactions_ColumnClick(ByVal sender As System.Object, ByVal e As System.Windows.Forms.ColumnClickEventArgs) Handles lstReactions.ColumnClick
        ' Set the sort order options
        Call SetLstVwColumnSortOrder(e, ReactionsColumnSorter)

        ' Perform the sort with these new sort options.
        lstReactions.Sort()
    End Sub

#End Region

    Private Sub InitReactionsTab()
        lstReactions.Items.Clear()
        lstReactionMats.Visible = False

        chkReactionsTaxes.Checked = UserReactionTabSettings.CheckTaxes
        chkReactionsFees.Checked = UserReactionTabSettings.CheckFees

        chkReactionsAdvMoonMats.Checked = UserReactionTabSettings.CheckAdvMoonMats
        chkReactionsProcMoonMats.Checked = UserReactionTabSettings.CheckProcessedMoonMats
        chkReactionsHybrid.Checked = UserReactionTabSettings.CheckHybrid

        chkReactionsSimpleBio.Checked = UserReactionTabSettings.CheckSimpleBio
        chkReactionsComplexBio.Checked = UserReactionTabSettings.CheckComplexBio

        chkReactionsRefine.Checked = UserReactionTabSettings.CheckRefine
        chkReactionsIgnoreBaseMatPrice.Checked = UserReactionTabSettings.CheckIgnoreMarket
        chkReactionsBuildBasic.Checked = UserReactionTabSettings.CheckBuildBasic

        txtReactionsNumPOS.Text = CStr(UserReactionTabSettings.NumberofPOS)
        txtReactionPOSFuelCost.Text = FormatNumber(UserReactionTabSettings.POSFuelCost, 2)
        txtReactionPOSFuelCost.Focus()

    End Sub

    Private Sub btnReactionsSaveSettings_Click(sender As System.Object, e As System.EventArgs) Handles btnReactionsSaveSettings.Click
        Dim TempSettings As ReactionsTabSettings = Nothing
        Dim Settings As New ProgramSettings

        If Not IsNumeric(txtReactionPOSFuelCost.Text) Or Trim(txtReactionPOSFuelCost.Text) = "" Then
            MsgBox("Invalid POS Fuel Cost", vbExclamation, Application.ProductName)
            txtReactionPOSFuelCost.Focus()
            Exit Sub
        End If

        If Not IsNumeric(txtReactionPOSFuelCost.Text) Or Trim(txtReactionsNumPOS.Text) = "" Then
            MsgBox("Invalid Number of POSs", vbExclamation, Me.Text)
            txtReactionsNumPOS.Focus()
            Exit Sub
        End If

        TempSettings.POSFuelCost = CDbl(txtReactionPOSFuelCost.Text)
        TempSettings.NumberofPOS = CInt(txtReactionsNumPOS.Text)

        TempSettings.CheckTaxes = chkReactionsTaxes.Checked
        TempSettings.CheckFees = chkReactionsFees.Checked
        TempSettings.CheckAdvMoonMats = chkReactionsAdvMoonMats.Checked
        TempSettings.CheckProcessedMoonMats = chkReactionsProcMoonMats.Checked
        TempSettings.CheckHybrid = chkReactionsHybrid.Checked

        TempSettings.CheckIgnoreMarket = chkReactionsIgnoreBaseMatPrice.Checked
        TempSettings.CheckBuildBasic = chkReactionsBuildBasic.Checked
        TempSettings.CheckSimpleBio = chkReactionsSimpleBio.Checked
        TempSettings.CheckComplexBio = chkReactionsComplexBio.Checked

        ' Save the data in the XML file
        Call Settings.SaveReactionSettings(TempSettings)

        ' Save the data to the local variable
        UserReactionTabSettings = TempSettings

        MsgBox("Settings Saved", vbInformation, Application.ProductName)

    End Sub

    ' Rebuild of reaction processing
    Private Function BuildReactionList(ByVal LoadAdvMoon As Boolean, ByVal LoadSimpleMoon As Boolean, ByVal LoadHybrid As Boolean, _
                                   ByVal LoadSimpleBio As Boolean, ByVal LoadAdvBio As Boolean, ByVal IgnoreBaseMatPrice As Boolean, _
                                   ByVal BuildBaseMats As Boolean, ByVal SetTaxes As Boolean, ByVal SetFees As Boolean, _
                                   ByVal Refine As Boolean, TotalHourlyPOSCost As Double, NumberofTowers As Integer) As List(Of Reaction)

        Dim FinalReactionList As New List(Of Reaction)
        Dim CurrentReaction As Reaction
        Dim readerReactions As SQLiteDataReader
        Dim SQL As String
        Dim ReactionGroupList As String = ""

        Dim ReprocessingStation As RefiningReprocessing
        Dim RefineOutputName As String
        Dim RefineOutputQuantity As Long
        Dim RefineOutputVolume As Double
        Dim TempMats As Materials

        ' Get the list of reactions we want to make
        SQL = "SELECT REACTION_TYPE_ID, REACTION_NAME, REACTION_GROUP, MATERIAL_GROUP, MATERIAL_CATEGORY, MATERIAL_TYPE_ID,"
        SQL = SQL & "MATERIAL_NAME, MATERIAL_QUANTITY, MATERIAL_VOLUME, "
        SQL = SQL & "CASE WHEN ITEM_PRICES.PRICE IS NULL THEN 0 ELSE ITEM_PRICES.PRICE END AS MATERIAL_PRICE_PER_UNIT "
        SQL = SQL & "FROM REACTIONS LEFT OUTER JOIN ITEM_PRICES ON REACTIONS.MATERIAL_TYPE_ID  = ITEM_PRICES.ITEM_ID "

        If LoadAdvMoon Then
            ReactionGroupList = ReactionGroupList & "'Complex Reactions',"
        End If
        If LoadSimpleMoon Then
            ReactionGroupList = ReactionGroupList & "'Simple Reaction',"
        End If
        If LoadHybrid Then
            ReactionGroupList = ReactionGroupList & "'Hybrid Reactions',"
        End If
        If LoadSimpleBio Then
            ReactionGroupList = ReactionGroupList & "'Simple Biochemical Reactions',"
        End If
        If LoadAdvBio Then
            ReactionGroupList = ReactionGroupList & "'Complex Biochemical Reactions',"
        End If

        SQL = SQL & "WHERE REACTION_TYPE = 'Output' "
        SQL = SQL & "AND REACTION_GROUP IN (" & ReactionGroupList.Substring(0, Len(ReactionGroupList) - 1) & ") "
        SQL = SQL & "AND MATERIAL_CATEGORY NOT IN ('Commodity','Planetary Commodities')"

        DBCommand = New SQLiteCommand(SQL, DB)
        readerReactions = DBCommand.ExecuteReader()

        While readerReactions.Read
            CurrentReaction = Nothing

            ' For each resulting reaction, set initial data of the final reaction
            CurrentReaction.TypeID = readerReactions.GetInt32(0)
            CurrentReaction.Reaction = readerReactions.GetString(1)
            CurrentReaction.ReactionGroup = readerReactions.GetString(2)

            ' Set the name of the reaction type here by group type
            Select Case CurrentReaction.ReactionGroup
                Case "Complex Biochemical Reactions"
                    CurrentReaction.ReactionType = "Complex Biochemical"
                Case "Complex Reactions"
                    CurrentReaction.ReactionType = "Advanced Moon Materials"
                Case "Hybrid Reactions"
                    CurrentReaction.ReactionType = "Hybrid Polymers"
                Case "Simple Biochemical Reactions"
                    CurrentReaction.ReactionType = "Simple Biochemical"
                Case "Simple Reaction"
                    CurrentReaction.ReactionType = "Processed Moon Materials"
            End Select

            ' Get the Inputs
            CurrentReaction.Inputs = GetReactionInputs(CurrentReaction.TypeID, BuildBaseMats, IgnoreBaseMatPrice)

            ' Set the output material
            ' If we are refining and the material produced is unrefined, then get refined mats value
            If Refine And readerReactions.GetString(6).Contains("Unrefined") Then
                ReprocessingStation = New RefiningReprocessing(SelectedCharacter.Skills.GetSkillLevel(3385), _
                                                              SelectedCharacter.Skills.GetSkillLevel(3389), _
                                                              SelectedCharacter.Skills.GetSkillLevel(12196), _
                                                              UserApplicationSettings.RefiningImplantValue, CDbl(UserApplicationSettings.RefiningEfficiency), _
                                                              UserApplicationSettings.RefiningTax, UserApplicationSettings.RefineCorpStanding)

                TempMats = ReprocessingStation.ReprocessMaterial(readerReactions.GetInt64(5), 1, 1, False, False, False)
                RefineOutputName = ""
                RefineOutputQuantity = 0

                ' Sum up the outputs
                For k = 0 To TempMats.GetMaterialList.Count - 1
                    ' Save the name/quantity as a combination of the outputs
                    RefineOutputName = RefineOutputName & TempMats.GetMaterialList(k).GetMaterialName & "(" & CStr(TempMats.GetMaterialList(k).GetQuantity) & ") - "
                    RefineOutputQuantity = RefineOutputQuantity + TempMats.GetMaterialList(k).GetQuantity
                    RefineOutputVolume = RefineOutputVolume + TempMats.GetMaterialList(k).GetVolume
                Next

                RefineOutputName = RefineOutputName.Substring(0, Len(RefineOutputName) - 3)

                ' Set the refine output - use the total cost divided by the total quantity to fudge the numbers to look correct in the screen
                CurrentReaction.Output = New Material(readerReactions.GetInt64(5), _
                                                   RefineOutputName, readerReactions.GetString(3), _
                                                   RefineOutputQuantity, RefineOutputVolume, TempMats.GetTotalMaterialsCost / RefineOutputQuantity, "-")
            Else
                ' Set the output
                CurrentReaction.Output = New Material(readerReactions.GetInt64(5), readerReactions.GetString(6), _
                                                          readerReactions.GetString(3), readerReactions.GetInt64(7), _
                                                          readerReactions.GetDouble(8), readerReactions.GetDouble(9), "0")
            End If

            ' We are assuming the full chain is set up and processing - so 1 hour per reaction
            ' Unless we are building the base materials, these output 200 units instead of 100 required
            ' for final reaction. So assume the number of POS's entered takes this into account and double the reaction output quantity
            If BuildBaseMats And (CurrentReaction.ReactionGroup = "Complex Biochemical Reactions" Or CurrentReaction.ReactionGroup = "Complex Reactions") Then
                ' Double the output mats
                CurrentReaction.Output.SetQuantity(CurrentReaction.Output.GetQuantity * 2)
            End If

            ' Determine final profit
            CurrentReaction.ProfitPerHour = CurrentReaction.Output.GetTotalCost - CurrentReaction.Inputs.GetTotalMaterialsCost - (TotalHourlyPOSCost * NumberofTowers)

            ' Finally set the taxes and fees
            If SetTaxes Then
                CurrentReaction.Taxes = GetSalesTax(CurrentReaction.ProfitPerHour)
                CurrentReaction.ProfitPerHour = CurrentReaction.ProfitPerHour - CurrentReaction.Taxes
            End If

            If SetFees Then
                CurrentReaction.Fees = GetSalesTax(CurrentReaction.ProfitPerHour)
                CurrentReaction.ProfitPerHour = CurrentReaction.ProfitPerHour - CurrentReaction.Fees
            End If

            FinalReactionList.Add(CurrentReaction)

        End While

        readerReactions.Close()
        DBCommand = Nothing

        Return FinalReactionList

    End Function

    ' Gets the inputs of an output reaction and returns the list of materials
    Private Function GetReactionInputs(ReactionTypeID As Long, BuildBaseMaterials As Boolean, IgnoreBaseMatPrices As Boolean) As Materials
        Dim readerInputs As SQLiteDataReader
        Dim readerSubInput As SQLiteDataReader
        Dim SQL As String
        Dim ReactionInputList As New Materials
        Dim ReactionSubInputList As New Materials
        Dim BaseInputList As New List(Of Material)
        Dim InputMaterial As Material

        SQL = "SELECT REACTION_TYPE_ID, REACTION_NAME, REACTION_GROUP, MATERIAL_GROUP, MATERIAL_CATEGORY, MATERIAL_TYPE_ID,"
        SQL = SQL & "MATERIAL_NAME, MATERIAL_QUANTITY, MATERIAL_VOLUME, "
        SQL = SQL & "CASE WHEN ITEM_PRICES.PRICE IS NULL THEN 0 ELSE ITEM_PRICES.PRICE END AS MATERIAL_PRICE_PER_UNIT "
        SQL = SQL & "FROM REACTIONS LEFT OUTER JOIN ITEM_PRICES ON REACTIONS.MATERIAL_TYPE_ID  = ITEM_PRICES.ITEM_ID "
        SQL = SQL & "WHERE REACTION_TYPE = 'Input' AND REACTION_TYPE_ID = " & ReactionTypeID

        DBCommand = New SQLiteCommand(SQL, DB)
        readerInputs = DBCommand.ExecuteReader()

        While readerInputs.Read
            ' Two options, buy them or build them if they are complex
            If BuildBaseMaterials And (readerInputs.GetString(2) = "Complex Biochemical Reactions" Or readerInputs.GetString(2) = "Complex Reactions") _
                And readerInputs.GetString(4) <> "Commodity" And readerInputs.GetString(4) <> "Planetary Commodities" Then
                ' Look up each input material for it's base build cost and use that for profit calc
                '        ' The logic for a full chain is as follows:
                '        ' 2 Basic Moon Materials from Moon Mining -> ReactoreaderInputsr => 1 Processed Moon Material} These 2 Processed Moon Materials -> Reactor => Advanced Moon Material
                '        ' 2 Basic Moon Materials from Moon Mining -> Reactor => 1 Processed Moon Material}
                ' 
                ' Assume it takes one hour to do a full chain after one gets the initial materials loaded and running (~3 hour startup)

                ' Get the reaction type id for the input reaction
                SQL = "SELECT REACTION_TYPE_ID, REACTION_GROUP FROM REACTIONS WHERE REACTION_TYPE = 'Output' and MATERIAL_NAME = '" & readerInputs.GetString(6) & "'"

                DBCommand = New SQLiteCommand(SQL, DB)
                readerSubInput = DBCommand.ExecuteReader()

                Call readerSubInput.Read()
                ReactionSubInputList = GetReactionInputs(readerSubInput.GetInt64(0), BuildBaseMaterials, IgnoreBaseMatPrices)

                ' Add the inputs to the list
                For i = 0 To ReactionSubInputList.GetMaterialList.Count - 1
                    ' If this is a base material, and they want to ignore cost, then update
                    If IgnoreBaseMatPrices And (readerSubInput.GetString(1) = "Simple Biochemical Reactions" Or readerSubInput.GetString(1) = "Simple Reaction") Then
                        ReactionSubInputList.GetMaterialList(i).SetTotalCost(0)
                    End If
                    ReactionInputList.InsertMaterial(ReactionSubInputList.GetMaterialList(i))
                Next

                readerSubInput.Close()

            Else ' Buying

                ' Insert all the inputs into the list individually
                InputMaterial = New Material(readerInputs.GetInt64(5), readerInputs.GetString(6), _
                                                              readerInputs.GetString(3), readerInputs.GetInt64(7), _
                                                              readerInputs.GetDouble(8), readerInputs.GetDouble(9), "0")

                ' If this is a base material, and they want to ignore cost, then update
                If IgnoreBaseMatPrices And (readerInputs.GetString(2) = "Simple Biochemical Reactions" Or readerInputs.GetString(2) = "Simple Reaction") Then
                    Call InputMaterial.SetTotalCost(0)
                End If

                ReactionInputList.InsertMaterial(InputMaterial)

            End If

        End While

        readerInputs.Close()
        DBCommand = Nothing

        Return ReactionInputList

    End Function

    ' Updates the grid with all the reactions
    Public Sub UpdateReactionsGrid()
        Dim lstViewRow As ListViewItem
        Dim POSFuelCost As Double
        Dim NumberOfPOS As Integer
        Dim ReactionIPH As Double
        Dim IgnoreMoonMatPrice As Boolean = False
        Dim BuildBaseMats As Boolean = False
        Dim i As Integer

        ' Don't do anything but clear the list if no items checked
        If Not chkReactionsAdvMoonMats.Checked And Not chkReactionsComplexBio.Checked And Not chkReactionsHybrid.Checked And Not chkReactionsProcMoonMats.Checked And Not chkReactionsSimpleBio.Checked Then
            lstReactions.Items.Clear()
            Exit Sub
        End If

        ' Check Fuel Cost
        If Not IsNumeric(txtReactionPOSFuelCost.Text) Or Trim(txtReactionPOSFuelCost.Text) = "" Then
            MsgBox("Must Enter Fuel Cost", vbExclamation, Me.Text)
            txtReactionPOSFuelCost.Focus()
            Exit Sub
        Else
            POSFuelCost = CDbl(txtReactionPOSFuelCost.Text)
        End If

        If Not IsNumeric(txtReactionPOSFuelCost.Text) Or Trim(txtReactionsNumPOS.Text) = "" Then
            MsgBox("Invalid Number of POSs", vbExclamation, Me.Text)
            txtReactionsNumPOS.Focus()
            Exit Sub
        Else
            NumberOfPOS = CInt(txtReactionsNumPOS.Text)
        End If

        ' Working
        Me.Cursor = Cursors.WaitCursor

        ' Create an instance of a ListView column sorter and assign it for reactions
        ReactionsColumnSorter = New ListViewColumnSorter()
        lstReactions.ListViewItemSorter = ReactionsColumnSorter

        If chkReactionsIgnoreBaseMatPrice.Checked And chkReactionsIgnoreBaseMatPrice.Enabled Then
            IgnoreMoonMatPrice = True
        Else
            IgnoreMoonMatPrice = False
        End If

        If chkReactionsBuildBasic.Checked And chkReactionsBuildBasic.Enabled Then
            BuildBaseMats = True
        Else
            BuildBaseMats = False
        End If

        ' Get the reaction list
        GlobalReactionList = BuildReactionList(chkReactionsAdvMoonMats.Checked, chkReactionsProcMoonMats.Checked, chkReactionsHybrid.Checked, _
                                            chkReactionsSimpleBio.Checked, chkReactionsComplexBio.Checked, IgnoreMoonMatPrice, BuildBaseMats, _
                                            chkReactionsTaxes.Checked, chkReactionsFees.Checked, chkReactionsRefine.Checked, POSFuelCost, NumberOfPOS)

        If GlobalReactionList.Count > 0 Then
            ' Sort it
            GlobalReactionList.Sort(New ReactionIPHComparer)

            ' Put the materials in the list
            ' Clear List and begin update
            lstReactions.BeginUpdate()
            lstReactions.Items.Clear()

            For i = 0 To GlobalReactionList.Count - 1
                lstViewRow = lstReactions.Items.Add(GlobalReactionList(i).ReactionType)
                'The remaining columns are subitems  
                lstViewRow.SubItems.Add(GlobalReactionList(i).Reaction)
                lstViewRow.SubItems.Add(GlobalReactionList(i).Output.GetMaterialName)
                lstViewRow.SubItems.Add(FormatNumber(GlobalReactionList(i).Output.GetQuantity, 0))
                lstViewRow.SubItems.Add(GlobalReactionList(i).Output.GetMaterialGroup)
                ReactionIPH = GlobalReactionList(i).ProfitPerHour

                If ReactionIPH < 0 Then
                    lstViewRow.ForeColor = Color.Red
                Else
                    lstViewRow.ForeColor = Color.Black
                End If

                ' Color row by type of reaction
                Select Case GlobalReactionList(i).Output.GetMaterialGroup
                    Case "Biochemical Material"
                        If GlobalReactionList(i).ReactionGroup.Substring(0, 6) = "Simple" Then
                            lstViewRow.BackColor = Color.LightYellow
                        Else
                            lstViewRow.BackColor = Color.LightGreen
                        End If
                    Case "Composite"
                        lstViewRow.BackColor = Color.Wheat
                    Case "Hybrid Polymers"
                        lstViewRow.BackColor = Color.LightSteelBlue
                    Case "Intermediate Materials"
                        lstViewRow.BackColor = Color.LightCyan
                End Select

                lstViewRow.SubItems.Add(FormatNumber(ReactionIPH, 2)) ' IPH
            Next

            lstReactions.EndUpdate()
        End If

        Me.Cursor = Cursors.Default

    End Sub

    ' Loads the reaction into the list
    Private Sub LoadReaction(ByVal SentReaction As Reaction)
        Dim lstViewRow As ListViewItem
        Dim ReactionIPH As Double

        lstViewRow = lstReactions.Items.Add(SentReaction.ReactionType)
        'The remaining columns are subitems  
        lstViewRow.SubItems.Add(SentReaction.Reaction)
        lstViewRow.SubItems.Add(SentReaction.Output.GetMaterialName)
        lstViewRow.SubItems.Add(SentReaction.Output.GetMaterialGroup)
        ReactionIPH = SentReaction.ProfitPerHour - 15000

        If ReactionIPH < 0 Then
            lstViewRow.ForeColor = Color.Red
        Else
            lstViewRow.ForeColor = Color.Black
        End If

        ' Color row by type of reaction
        Select Case SentReaction.Output.GetMaterialGroup
            Case "Biochemical Material"
                If SentReaction.ReactionGroup.Substring(0, 6) = "Simple" Then
                    lstViewRow.BackColor = Color.LightYellow
                Else
                    lstViewRow.BackColor = Color.LightGreen
                End If
            Case "Composite"
                lstViewRow.BackColor = Color.Wheat
            Case "Hybrid Polymers"
                lstViewRow.BackColor = Color.LightSteelBlue
            Case "Intermediate Materials"
                lstViewRow.BackColor = Color.LightCyan
        End Select

        lstViewRow.SubItems.Add(FormatNumber(ReactionIPH, 2))

    End Sub

    ' Function takes 2 reaction lists and returns the combined list
    'Private Function AddReactions(ByVal ReactionList1 As Reaction(), ByVal ReactionList2 As Reaction()) As Reaction()
    '    Dim TempReactions() As Reaction
    '    Dim i As Integer = 0
    '    Dim j As Integer = 0
    '    Dim TotalRecords As Integer

    '    If IsNothing(ReactionList1) And IsNothing(ReactionList2) Then
    '        Return Nothing
    '    ElseIf IsNothing(ReactionList1) Then
    '        Return ReactionList2
    '    ElseIf IsNothing(ReactionList2) Then
    '        Return ReactionList1
    '    End If

    '    TotalRecords = ReactionList1.Count + ReactionList2.Count - 1
    '    ReDim TempReactions(TotalRecords)

    '    ' Copy the first list
    '    For i = 0 To ReactionList1.Count - 1
    '        TempReactions(i).TypeID = ReactionList1(i).TypeID
    '        TempReactions(i).ReactionType = ReactionList1(i).ReactionType
    '        TempReactions(i).Reaction = ReactionList1(i).Reaction
    '        TempReactions(i).ReactionGroup = ReactionList1(i).ReactionGroup
    '        TempReactions(i).Output = ReactionList1(i).Output
    '        TempReactions(i).Inputs = ReactionList1(i).Inputs
    '        TempReactions(i).ProfitPerHour = ReactionList1(i).ProfitPerHour
    '        TempReactions(i).Fees = ReactionList1(i).Fees
    '        TempReactions(i).Taxes = ReactionList1(i).Taxes
    '    Next

    '    'Now the second
    '    For i = ReactionList1.Count To TotalRecords
    '        TempReactions(i).TypeID = ReactionList2(j).TypeID
    '        TempReactions(i).ReactionType = ReactionList2(j).ReactionType
    '        TempReactions(i).Reaction = ReactionList2(j).Reaction
    '        TempReactions(i).ReactionGroup = ReactionList2(j).ReactionGroup
    '        TempReactions(i).Output = ReactionList2(j).Output
    '        TempReactions(i).Inputs = ReactionList2(j).Inputs
    '        TempReactions(i).ProfitPerHour = ReactionList2(j).ProfitPerHour
    '        TempReactions(i).Fees = ReactionList2(j).Fees
    '        TempReactions(i).Taxes = ReactionList2(j).Taxes
    '        j = j + 1
    '    Next

    '    Return TempReactions

    'End Function

    ' Sorts a Reaction list descending
    'Private Sub SortListDesc(ByRef List() As Reaction, ByVal First As Integer, ByVal Last As Integer)
    '    Dim LowIndex As Integer
    '    Dim HighIndex As Integer
    '    Dim MidValue As Double

    '    ' Quicksort
    '    LowIndex = First
    '    HighIndex = Last
    '    MidValue = List((First + Last) \ 2).ProfitPerHour

    '    Do
    '        While List(LowIndex).ProfitPerHour > MidValue
    '            LowIndex = LowIndex + 1
    '        End While

    '        While List(HighIndex).ProfitPerHour < MidValue
    '            HighIndex = HighIndex - 1
    '        End While

    '        If LowIndex <= HighIndex Then
    '            Swap(List, LowIndex, HighIndex)
    '            LowIndex = LowIndex + 1
    '            HighIndex = HighIndex - 1
    '        End If

    '    Loop While LowIndex <= HighIndex

    '    If First < HighIndex Then
    '        SortListDesc(List, First, HighIndex)
    '    End If

    '    If LowIndex < Last Then
    '        SortListDesc(List, LowIndex, Last)
    '    End If

    'End Sub

    ' This swaps the Reaction list values
    'Private Sub Swap(ByRef List() As Reaction, ByRef IndexA As Integer, ByRef IndexB As Integer)
    '    Dim Temp As Reaction

    '    Temp = List(IndexA)
    '    List(IndexA) = List(IndexB)
    '    List(IndexB) = Temp

    'End Sub

    ' Updates the input list boxes when a row is clicked
    Private Sub lstReactions_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lstReactions.SelectedIndexChanged
        Dim i As Integer
        Dim index As Integer
        Dim lstViewRow As ListViewItem

        ' Load up the inputs into the boxes depending on number of mats
        ' Reactions is form global and since it is sorted, it represents what is in lstReactions
        If lstReactions.SelectedItems.Count > 0 Then
            index = lstReactions.SelectedIndices(0)

            ' Look up the index in the global list
            index = GetGlobalReactionListIndex(lstReactions.SelectedItems(0).SubItems(1).Text)

            lstReactionMats.BeginUpdate()
            lstReactionMats.Items.Clear()

            If Not IsNothing(GlobalReactionList(index).Inputs.GetMaterialList) Then
                For i = 0 To GlobalReactionList(index).Inputs.GetMaterialList.Count - 1

                    lstViewRow = lstReactionMats.Items.Add(GlobalReactionList(index).Inputs.GetMaterialList(i).GetMaterialName)
                    'The remaining columns are subitems  
                    'lstViewRow.SubItems.Add(GlobalReactionList(index).Inputs.GetMaterialList(i).GetCostPerItem)
                    lstViewRow.SubItems.Add(CStr(GlobalReactionList(index).Inputs.GetMaterialList(i).GetQuantity))

                Next

                ' Populate Taxes and Fees
                lblReactionsFees.Text = FormatNumber(GlobalReactionList(index).Fees, 2)
                lblReactionsTaxes.Text = FormatNumber(GlobalReactionList(index).Taxes, 2)

            End If
            lstReactionMats.EndUpdate()
        End If

        lstReactionMats.Visible = True

    End Sub

    ' Searches through the reaction list for the selected reaction and returns the index in that list
    ' This is because sorting the list doesn't update the reaction list (Temp Fix)
    Private Function GetGlobalReactionListIndex(ReactionName As String) As Integer

        For i = 0 To GlobalReactionList.Count - 1
            If GlobalReactionList(i).Reaction = ReactionName Then
                Return i
            End If
        Next

        Return 0

    End Function

    ' Reaction Structure
    Public Structure Reaction
        Dim TypeID As Integer
        Dim ReactionType As String
        Dim Reaction As String
        Dim ReactionGroup As String
        Dim Output As Material
        Dim ProfitPerHour As Double
        Dim Taxes As Double ' Taxes for selling this item
        Dim Fees As Double ' Fees for setting up sell order
        ' Inputs
        Dim Inputs As Materials
    End Structure

    ' For sorting a list of Reactions
    Public Class ReactionIPHComparer

        Implements System.Collections.Generic.IComparer(Of Reaction)

        Public Function Compare(ByVal p1 As Reaction, ByVal p2 As Reaction) As Integer Implements IComparer(Of Reaction).Compare
            ' swap p2 and p1 to do decending sort
            Return p2.ProfitPerHour.CompareTo(p1.ProfitPerHour)
        End Function

    End Class

#End Region

#Region "Mining"

#Region "Mining Object Functions"

    Private Sub lstMineGrid_ColumnWidthChanging(sender As Object, e As System.Windows.Forms.ColumnWidthChangingEventArgs) Handles lstMineGrid.ColumnWidthChanging
        If e.ColumnIndex = 0 Then
            e.Cancel = True
            e.NewWidth = lstPricesView.Columns(e.ColumnIndex).Width
        End If
    End Sub

    Private Sub lstMineGrid_MouseClick(sender As System.Object, e As System.Windows.Forms.MouseEventArgs) Handles lstMineGrid.MouseClick
        Call ListClicked(lstMineGrid, sender, e)
    End Sub

    Private Sub chkMineRorqDeployedMode_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineRorqDeployedMode.CheckedChanged
        If chkMineRorqDeployedMode.Checked = True Then
            lblMineIndustrialReconfig.Enabled = True
            cmbMineIndustReconfig.Enabled = True
        Else
            lblMineIndustrialReconfig.Enabled = False
            cmbMineIndustReconfig.Enabled = False
        End If
    End Sub

    Private Sub chkOreProcessing1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing1.CheckedChanged
        Call UpdateProcessingSkillBoxes(1, chkOreProcessing1.Checked)
    End Sub

    Private Sub chkOreProcessing2_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing2.CheckedChanged
        Call UpdateProcessingSkillBoxes(2, chkOreProcessing2.Checked)
    End Sub

    Private Sub chkOreProcessing3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing3.CheckedChanged
        Call UpdateProcessingSkillBoxes(3, chkOreProcessing3.Checked)
    End Sub

    Private Sub chkOreProcessing4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing4.CheckedChanged
        Call UpdateProcessingSkillBoxes(4, chkOreProcessing4.Checked)
    End Sub

    Private Sub chkOreProcessing5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing5.CheckedChanged
        Call UpdateProcessingSkillBoxes(5, chkOreProcessing5.Checked)
    End Sub

    Private Sub chkOreProcessing6_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing6.CheckedChanged
        Call UpdateProcessingSkillBoxes(6, chkOreProcessing6.Checked)
    End Sub

    Private Sub chkOreProcessing7_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing7.CheckedChanged
        Call UpdateProcessingSkillBoxes(7, chkOreProcessing7.Checked)
    End Sub

    Private Sub chkOreProcessing8_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing8.CheckedChanged
        Call UpdateProcessingSkillBoxes(8, chkOreProcessing8.Checked)
    End Sub

    Private Sub chkOreProcessing17_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing17.CheckedChanged
        Call UpdateProcessingSkillBoxes(17, chkOreProcessing17.Checked)
    End Sub

    Private Sub chkOreProcessing9_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing9.CheckedChanged
        Call UpdateProcessingSkillBoxes(9, chkOreProcessing9.Checked)
    End Sub

    Private Sub chkOreProcessing10_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing10.CheckedChanged
        Call UpdateProcessingSkillBoxes(10, chkOreProcessing10.Checked)
    End Sub

    Private Sub chkOreProcessing11_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing11.CheckedChanged
        Call UpdateProcessingSkillBoxes(11, chkOreProcessing11.Checked)
    End Sub

    Private Sub chkOreProcessing12_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing12.CheckedChanged
        Call UpdateProcessingSkillBoxes(12, chkOreProcessing12.Checked)
    End Sub

    Private Sub chkOreProcessing13_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing13.CheckedChanged
        Call UpdateProcessingSkillBoxes(13, chkOreProcessing13.Checked)
    End Sub

    Private Sub chkOreProcessing14_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing14.CheckedChanged
        Call UpdateProcessingSkillBoxes(14, chkOreProcessing14.Checked)
    End Sub

    Private Sub chkOreProcessing15_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing15.CheckedChanged
        Call UpdateProcessingSkillBoxes(15, chkOreProcessing15.Checked)
    End Sub

    Private Sub chkOreProcessing16_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkOreProcessing16.CheckedChanged
        Call UpdateProcessingSkillBoxes(16, chkOreProcessing16.Checked)
    End Sub

    Private Sub UpdateProcessingSkillBoxes(ByVal Index As Integer, ByVal Checked As Boolean)
        MineProcessingCombos(Index).Enabled = Checked
        MineProcessingLabels(Index).Enabled = Checked
    End Sub

    Private Sub cmbMineShipType_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineShipType.SelectedIndexChanged
        If Not UpdatingMiningShips And Not FirstLoad Then
            Call LoadMiningshipImage()
            Call UpdateMiningSkills()
            Call UpdateMiningShipEquipment()
            ' Clear the grid
            lstMineGrid.Items.Clear()
        End If
    End Sub

    Private Sub cmbMineShipType_DropDown(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmbMineShipType.DropDown
        Call UpdateMiningShipsCombo()
    End Sub

    Private Sub cmbMineAstrogeology_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineAstrogeology.SelectedIndexChanged
        If Not FirstLoad Then
            Call UpdateMiningShipForm(True)
        End If
    End Sub

    Private Sub cmbMineExhumers_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineExhumers.SelectedIndexChanged
        If Not FirstLoad Then
            Call UpdateMiningShipForm(False)
        End If
    End Sub

    Private Sub cmbMineBaseShipSkill_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineBaseShipSkill.SelectedIndexChanged
        If Not FirstLoad Then
            Call UpdateMiningShipForm(False)
        End If
    End Sub

    Private Sub cmbMineSkill_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineSkill.SelectedIndexChanged
        If Not FirstLoad Then
            Call UpdateMiningShipForm(True)
        End If
    End Sub

    Private Sub cmbMineIceHarvesting_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineGasIceHarvesting.SelectedIndexChanged
        If Not FirstLoad Then
            Call UpdateMiningShipForm(True)
        End If
    End Sub

    Private Sub cmbMineDeepCore_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineDeepCore.SelectedIndexChanged
        If Not FirstLoad Then
            Call UpdateMiningShipForm(True)
        End If
    End Sub

    Private Sub cmbMineType_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineOreType.SelectedIndexChanged

        If cmbMineOreType.Text = "Ice" Then
            chkMineIncludeHighYieldOre.Enabled = False
            gbMineOreProcessingType.Enabled = True
            chkMineIncludeHighYieldOre.Text = "High Yield Ice"
            chkMineIncludeHighSec.Text = "High Sec Ice"
            chkMineIncludeLowSec.Text = "Low Sec Ice"
            chkMineIncludeNullSec.Text = "Null Sec Ice"
            lstMineGrid.Columns(1).Text = "Ice Name"
            gbMineMiningDroneM3.Enabled = False ' drones don't apply to ice
            rbtnMineIceRig.Enabled = True
            If UserMiningTabSettings.IceMiningRig Then
                rbtnMineIceRig.Checked = True
            Else
                rbtnMineNoRigs.Checked = True
            End If
            rbtnMineMercoxitRig.Enabled = False

            ' No ice in wormholes
            chkMineWH.Enabled = False
            chkMineC1.Enabled = False
            chkMineC2.Enabled = False
            chkMineC3.Enabled = False
            chkMineC4.Enabled = False
            chkMineC5.Enabled = False
            chkMineC6.Enabled = False

            If chkMineRefinedOre.Checked Then
                gbMineBaseRefineSkills.Enabled = True
                gbMineStationYield.Enabled = True
            End If

            gbMineRefining.Enabled = True

        ElseIf cmbMineOreType.Text = "Ore" Then
            chkMineIncludeHighYieldOre.Enabled = True
            gbMineOreProcessingType.Enabled = True
            chkMineIncludeHighYieldOre.Text = "High Yield Ores"
            chkMineIncludeHighSec.Text = "High Sec Ore"
            chkMineIncludeLowSec.Text = "Low Sec Ore"
            chkMineIncludeNullSec.Text = "Null Sec Ore"
            lstMineGrid.Columns(1).Text = "Ore Name"
            gbMineMiningDroneM3.Enabled = True
            rbtnMineMercoxitRig.Enabled = True
            rbtnMineIceRig.Enabled = False
            If UserMiningTabSettings.MercoxitMiningRig Then
                rbtnMineMercoxitRig.Checked = True
            Else
                rbtnMineNoRigs.Checked = True
            End If

            chkMineWH.Enabled = True
            chkMineC1.Enabled = True
            chkMineC2.Enabled = True
            chkMineC3.Enabled = True
            chkMineC4.Enabled = True
            chkMineC5.Enabled = True
            chkMineC6.Enabled = True

            If chkMineRefinedOre.Checked Then
                gbMineBaseRefineSkills.Enabled = True
                gbMineStationYield.Enabled = True
            End If

            gbMineRefining.Enabled = True

        ElseIf cmbMineOreType.Text = "Gas" Then
            chkMineIncludeHighYieldOre.Enabled = False
            gbMineOreProcessingType.Enabled = False
            chkMineIncludeHighYieldOre.Text = "High Yield Gas"
            chkMineIncludeHighSec.Text = "High Sec Gas"
            chkMineIncludeLowSec.Text = "Low Sec Gas"
            chkMineIncludeNullSec.Text = "Null Sec Gas"
            lstMineGrid.Columns(1).Text = "Gas Name"
            gbMineMiningDroneM3.Enabled = False
            rbtnMineMercoxitRig.Enabled = False
            rbtnMineIceRig.Enabled = False
            rbtnMineNoRigs.Checked = True

            chkMineWH.Enabled = True
            chkMineC1.Enabled = True
            chkMineC2.Enabled = True
            chkMineC3.Enabled = True
            chkMineC4.Enabled = True
            chkMineC5.Enabled = True
            chkMineC6.Enabled = True

            ' No refining for Gas
            gbMineBaseRefineSkills.Enabled = False
            gbMineStationYield.Enabled = False
            gbMineRefining.Enabled = False

        End If

        If Not FirstLoad Then
            ' Load all the skills for the character first
            Call LoadCharacterMiningSkills()
            Call UpdateMiningImplants()
            Call UpdateMiningShipForm(True)
            Call UpdateProcessingSkills()
        End If

        lstMineGrid.Items.Clear()

    End Sub

    Private Sub lstMineGrid_ColumnClick(ByVal sender As System.Object, ByVal e As System.Windows.Forms.ColumnClickEventArgs) Handles lstMineGrid.ColumnClick
        ' Set the sort order options
        Call SetLstVwColumnSortOrder(e, MiningColumnSorter)

        ' Perform the sort with these new sort options.
        lstMineGrid.Sort()
    End Sub

    Private Sub chkMineUseFleetBooster_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkMineUseFleetBooster.CheckedChanged
        If Not FirstLoad Then
            Call LoadFleetBoosterImage()
            Call UpdateBoosterSkills()
        End If
    End Sub

    Private Sub cmbMineMiningForeman_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineMiningForeman.SelectedIndexChanged
        If Not FirstLoad Then
            Call UpdateBoosterSkills()
        End If
    End Sub

    Private Sub cmbMineMiningDirector_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineMiningDirector.SelectedIndexChanged
        If Not FirstLoad Then
            Call UpdateBoosterSkills()
        End If
    End Sub

    Private Sub cmbMineBoosterShip_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineBoosterShip.SelectedIndexChanged
        If Not UpdatingMiningShips Then
            Call LoadFleetBoosterImage()
            Call UpdateBoosterSkills()
            ' Clear the grid
            lstMineGrid.Items.Clear()
        End If
    End Sub

    Private Sub chkMineForemanBooster_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkMineForemanLaserOpBoost.Click
        Call UpdateMiningBoosterObjects()
    End Sub

    Private Sub txtMineNumberMiners_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtMineNumberMiners.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedPriceChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub txtMineTotalJumpM3_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMineTotalJumpM3.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedPriceChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub txtMineTotalJumpFuel_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMineTotalJumpFuel.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedPriceChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub chkMineUseHauler_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkMineUseHauler.CheckedChanged
        If chkMineUseHauler.Checked Then
            lblMineRTMin.Enabled = False
            txtMineRTMin.Enabled = False
            lblMineRTSec.Enabled = False
            txtMineRTSec.Enabled = False
            lblMineHaulerM3.Enabled = False
            txtMineHaulerM3.Enabled = False
        Else
            lblMineRTMin.Enabled = True
            txtMineRTMin.Enabled = True
            lblMineRTSec.Enabled = True
            txtMineRTSec.Enabled = True
            lblMineHaulerM3.Enabled = True
            txtMineHaulerM3.Enabled = True
        End If

        ' Refresh this value regardless
        Call RefreshHaulerM3()

    End Sub

    Private Sub txtMineRTMin_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMineRTMin.GotFocus
        Call txtMineRTMin.SelectAll()
    End Sub

    Private Sub txtMineHaulerM3_GotFocus(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMineHaulerM3.GotFocus
        Call txtMineHaulerM3.SelectAll()
    End Sub

    Private Sub txtMineTotalJumpM3_GotFocus(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMineTotalJumpM3.GotFocus
        Call txtMineTotalJumpM3.SelectAll()
    End Sub

    Private Sub txtMineTotalJumpFuel_GotFocus(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMineTotalJumpFuel.GotFocus
        Call txtMineTotalJumpFuel.SelectAll()
    End Sub

    Private Sub txtMineRTMin_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMineRTMin.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub txtMineRTSec_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMineRTSec.GotFocus
        Call txtMineRTSec.SelectAll()
    End Sub

    Private Sub txtMineRTSec_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMineRTSec.KeyPress
        ' Only allow numbers or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedRunschars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub txtMineRTSec_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtMineRTSec.TextChanged
        ' Update the minutes and seconds if they enter greater than 60
        If CInt(txtMineRTSec.Text) >= 60 Then
            txtMineRTMin.Text = CStr(Math.Floor(CInt(txtMineRTSec.Text) / 60))
            txtMineRTSec.Text = CStr(CInt(txtMineRTSec.Text) - (CInt(txtMineRTMin.Text) * 60))
        End If
    End Sub

    Private Sub txtMineMiningDroneM3_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtMineMiningDroneM3.KeyPress
        ' Only allow numbers, decmial or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedPriceChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub btnMineRefresh_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMineRefresh.Click
        Call LoadMiningGrid()
    End Sub

    Private Sub btnMineReset_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMineReset.Click
        Call LoadMiningTab()
    End Sub

    Private Sub chkMineIncludeJumpCosts_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkMineIncludeJumpCosts.CheckedChanged
        If chkMineIncludeJumpCosts.Checked Then
            lblMineTotalJumpFuel.Enabled = True
            txtMineTotalJumpFuel.Enabled = True
            lblMineTotalJumpM3.Enabled = True
            txtMineTotalJumpM3.Enabled = True
            rbtnMineJumpCompress.Enabled = True
            If chkMineRefinedOre.Checked And chkMineRefinedOre.Enabled Then
                rbtnMineJumpMinerals.Enabled = True
            Else
                rbtnMineJumpMinerals.Enabled = False
            End If
        Else
            lblMineTotalJumpFuel.Enabled = False
            txtMineTotalJumpFuel.Enabled = False
            lblMineTotalJumpM3.Enabled = False
            txtMineTotalJumpM3.Enabled = False
            rbtnMineJumpCompress.Enabled = False
            rbtnMineJumpMinerals.Enabled = False
        End If
    End Sub

    Private Sub cmbMineRefining_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineRefining.SelectedIndexChanged

        ' Load up the right processing checks
        Call UpdateProcessingSkills()

    End Sub

    Private Sub cmbMineRefineryEff_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineRefineryEff.SelectedIndexChanged

        ' Load up the right processing checks
        Call UpdateProcessingSkills()

    End Sub

    Private Sub cmbMineMiningLaser_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmbMineMiningLaser.SelectedIndexChanged
        Select Case cmbMineMiningLaser.Text
            Case "Modulated Deep Core Miner II", "Modulated Deep Core Strip Miner II", "Modulated Strip Miner II"
                rbtnMineT1Crystals.Enabled = True
                rbtnMineT2Crystals.Enabled = True
            Case Else
                rbtnMineT1Crystals.Enabled = False
                rbtnMineT2Crystals.Enabled = False
        End Select
    End Sub

    Private Sub cmbMineRefineStationTax_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cmbMineRefineStationTax.GotFocus
        Call cmbMineRefineStationTax.SelectAll()
    End Sub

    Private Sub txtMineRefineStanding_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtMineRefineStanding.GotFocus
        Call txtMineRefineStanding.SelectAll()
    End Sub

    Private Sub txtMineRefineStanding_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtMineRefineStanding.KeyPress
        ' Only allow numbers, decmial or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedDecimalChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub cmbMineRefineStationTax_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cmbMineRefineStationTax.KeyPress
        ' Only allow numbers, decimal, percent or backspace
        If e.KeyChar <> ControlChars.Back Then
            If allowedPercentChars.IndexOf(e.KeyChar) = -1 Then
                ' Invalid Character
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub chkMineRefinedOre_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineRefinedOre.CheckedChanged
        Call SetOreRefineChecks()
    End Sub

    Private Sub chkMineUnrefinedOre_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineUnrefinedOre.CheckedChanged
        Call SetOreRefineChecks()
    End Sub

    Private Sub chkMineCompressedOre_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineCompressedOre.CheckedChanged
        Call SetOreRefineChecks()
    End Sub

    Private Sub chkMineForemanLaserRangeBoost_Click(sender As Object, e As System.EventArgs) Handles chkMineForemanLaserRangeBoost.Click
        Call UpdateMiningBoosterObjects()
    End Sub

    Private Function GetMiningShipImage(ShipName As String) As String
        Dim ImageFile As Long
        Dim BPImage As String

        ' Display the mining ship
        Select Case ShipName
            Case Venture
                ImageFile = MiningShipTypeID.Venture
            Case Covetor
                ImageFile = MiningShipTypeID.Covetor
            Case Retriever
                ImageFile = MiningShipTypeID.Retriever
            Case Hulk
                ImageFile = MiningShipTypeID.Hulk
            Case Skiff
                ImageFile = MiningShipTypeID.Skiff
            Case Procurer
                ImageFile = MiningShipTypeID.Procurer
            Case Mackinaw
                ImageFile = MiningShipTypeID.Mackinaw
            Case Rorqual
                ImageFile = MiningShipTypeID.Rorqual
            Case Orca
                ImageFile = MiningShipTypeID.Orca
            Case Drake
                ImageFile = MiningShipTypeID.Drake
            Case Rokh
                ImageFile = MiningShipTypeID.Rokh
            Case Prospect
                ImageFile = MiningShipTypeID.Prospect
            Case Else
                ImageFile = 0
        End Select

        BPImage = UserImagePath & CStr(ImageFile) & "_64.png"

        Return BPImage

    End Function

    Private Sub chkMineWH_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineWH.CheckedChanged
        If chkMineWH.Checked = True Then
            chkMineC1.Enabled = True
            chkMineC2.Enabled = True
            chkMineC3.Enabled = True
            chkMineC4.Enabled = True
            chkMineC5.Enabled = True
            chkMineC6.Enabled = True
            ' Also check the null box if not checked
            chkMineIncludeNullSec.Checked = True
        Else
            chkMineC1.Enabled = False
            chkMineC2.Enabled = False
            chkMineC3.Enabled = False
            chkMineC4.Enabled = False
            chkMineC5.Enabled = False
            chkMineC6.Enabled = False
        End If

        Call UpdateOrebySpaceChecks()
    End Sub

    Private Sub UpdateOrebySpaceChecks()

        If Not FirstLoad Then
            If cmbMineOreType.Text = "Ore" And chkMineWH.Checked = True And chkMineAmarr.Checked = False And chkMineGallente.Checked = False _
                And chkMineMinmatar.Checked = False And chkMineCaldari.Checked = False Then
                chkMineIncludeHighYieldOre.Enabled = False
            Else
                chkMineIncludeHighYieldOre.Enabled = True
            End If
        End If

    End Sub

    Private Sub chkMineAmarr_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineAmarr.CheckedChanged
        Call UpdateOrebySpaceChecks()
    End Sub

    Private Sub chkMineGallente_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineGallente.CheckedChanged
        Call UpdateOrebySpaceChecks()
    End Sub

    Private Sub chkMineCaldari_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineCaldari.CheckedChanged
        Call UpdateOrebySpaceChecks()
    End Sub

    Private Sub chkMineMinmatar_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineMinmatar.CheckedChanged
        Call UpdateOrebySpaceChecks()
    End Sub

    Private Sub chkMineIncludeNullSec_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkMineIncludeNullSec.CheckedChanged
        ' Don't let them choose WH classes unless null checked
        If chkMineIncludeNullSec.Checked And chkMineWH.Checked Then
            chkMineC1.Enabled = True
            chkMineC2.Enabled = True
            chkMineC3.Enabled = True
            chkMineC4.Enabled = True
            chkMineC5.Enabled = True
            chkMineC6.Enabled = True
        Else
            chkMineC1.Enabled = False
            chkMineC2.Enabled = False
            chkMineC3.Enabled = False
            chkMineC4.Enabled = False
            chkMineC5.Enabled = False
            chkMineC6.Enabled = False
            ' Turn off WH
            chkMineWH.Checked = False
        End If

    End Sub

#End Region

    Private Enum MiningShipTypeID
        'Bantam = 582
        'Tormentor = 591
        'Navitas = 592
        'Burst = 599
        'Osprey = 620
        'Scythe = 631
        Venture = 32880
        Covetor = 17476
        Retriever = 17478
        Hulk = 22544
        Skiff = 22546
        Mackinaw = 22548
        Rorqual = 28352
        Orca = 28606
        Procurer = 17480
        Drake = 24698
        Rokh = 24688
        Prospect = 33697
    End Enum

    Private Sub InitMiningTab()
        Call LoadMiningTab()
    End Sub

    ' Loads in all the skills and such for the tab 
    Private Sub LoadMiningTab()
        Dim i As Integer
        Dim TempSkillLevel As Integer

        With UserMiningTabSettings
            ' Ore types
            cmbMineOreType.Text = .OreType

            chkMineIncludeHighYieldOre.Checked = .CheckHighYieldOres
            chkMineIncludeHighSec.Checked = .CheckHighSecOres
            chkMineIncludeLowSec.Checked = .CheckLowSecOres
            chkMineIncludeNullSec.Checked = .CheckNullSecOres
            chkMineWH.Checked = .CheckSovWormhole

            If chkMineIncludeNullSec.Checked Then
                chkMineC1.Enabled = True
                chkMineC2.Enabled = True
                chkMineC3.Enabled = True
                chkMineC4.Enabled = True
                chkMineC5.Enabled = True
                chkMineC6.Enabled = True
            Else
                chkMineC1.Enabled = False
                chkMineC2.Enabled = False
                chkMineC3.Enabled = False
                chkMineC4.Enabled = False
                chkMineC5.Enabled = False
                chkMineC6.Enabled = False
                ' Can't check wh if they don't select null
                chkMineWH.Checked = False
            End If

            ' Check all locations
            chkMineAmarr.Checked = .CheckSovAmarr
            chkMineCaldari.Checked = .CheckSovCaldari
            chkMineGallente.Checked = .CheckSovGallente
            chkMineMinmatar.Checked = .CheckSovMinmatar

            chkMineC1.Checked = .CheckSovC1
            chkMineC2.Checked = .CheckSovC2
            chkMineC3.Checked = .CheckSovC3
            chkMineC4.Checked = .CheckSovC4
            chkMineC5.Checked = .CheckSovC5
            chkMineC6.Checked = .CheckSovC6

            ' Drones
            txtMineMiningDroneM3.Text = FormatNumber(.MiningDroneM3perHour, 2)

            ' Fleet booster
            chkMineUseFleetBooster.Checked = .CheckUseFleetBooster
            cmbMineBoosterShip.Text = .BoosterShip
            cmbMineMiningDirector.Text = CStr(.MiningDirectorSkill)
            cmbMineMiningForeman.Text = CStr(.MiningFormanSkill)
            cmbMineBoosterShipSkill.Text = CStr(.BoosterShipSkill)
            cmbMineWarfareLinkSpec.Text = CStr(.WarfareLinkSpecSkill)
            chkMineForemanMindlink.Checked = .CheckMiningForemanMindLink
            chkMineRorqDeployedMode.Checked = .CheckRorqDeployed
            cmbMineIndustReconfig.Text = CStr(.IndustrialReconfig)

            If chkMineRorqDeployedMode.Checked Then
                cmbMineIndustReconfig.Enabled = True
                lblMineIndustrialReconfig.Enabled = True
            Else
                cmbMineIndustReconfig.Enabled = False
                lblMineIndustrialReconfig.Enabled = False
            End If

            Select Case .CheckMineForemanLaserOpBoost
                Case 2
                    chkMineForemanLaserOpBoost.ThreeState = True
                    chkMineForemanLaserOpBoost.CheckState = CheckState.Indeterminate
                Case 1
                    chkMineForemanLaserOpBoost.ThreeState = False
                    chkMineForemanLaserOpBoost.Checked = True
                Case 0
                    chkMineForemanLaserOpBoost.ThreeState = False
                    chkMineForemanLaserOpBoost.Checked = False
            End Select

            Select Case .CheckMineForemanLaserRangeBoost
                Case 2
                    chkMineForemanLaserRangeBoost.ThreeState = True
                    chkMineForemanLaserRangeBoost.CheckState = CheckState.Indeterminate
                Case 1
                    chkMineForemanLaserRangeBoost.ThreeState = False
                    chkMineForemanLaserRangeBoost.Checked = True
                Case 0
                    chkMineForemanLaserRangeBoost.ThreeState = False
                    chkMineForemanLaserRangeBoost.Checked = False
            End Select

            ' Update the Booster boxes
            Call UpdateBoosterSkills()

            ' Refining
            chkMineRefinedOre.Checked = .RefinedOre
            chkMineUnrefinedOre.Checked = .UnrefinedOre
            chkMineCompressedOre.Checked = .CompressedOre

            Call SetOreRefineChecks()

            ' Station numbers
            cmbMineStationEff.Text = FormatPercent(UserApplicationSettings.RefiningEfficiency, 0)
            txtMineRefineStanding.Text = FormatNumber(UserApplicationSettings.RefineCorpStanding, 2)
            cmbMineRefineStationTax.Text = FormatPercent(UserApplicationSettings.RefiningTax, 1)

            ' Jump Ore
            If .CheckIncludeJumpFuelCosts Then
                rbtnMineJumpCompress.Enabled = True
                rbtnMineJumpMinerals.Enabled = True
                lblMineTotalJumpFuel.Enabled = True
                txtMineTotalJumpFuel.Enabled = True
                lblMineTotalJumpM3.Enabled = True
                txtMineTotalJumpM3.Enabled = True
            Else
                rbtnMineJumpCompress.Enabled = False
                rbtnMineJumpMinerals.Enabled = False
                lblMineTotalJumpFuel.Enabled = False
                txtMineTotalJumpFuel.Enabled = False
                lblMineTotalJumpM3.Enabled = False
                txtMineTotalJumpM3.Enabled = False
            End If

            chkMineIncludeJumpCosts.Checked = .CheckIncludeJumpFuelCosts
            rbtnMineJumpCompress.Checked = .JumpCompressedOre
            rbtnMineJumpMinerals.Checked = .JumpMinerals
            txtMineTotalJumpFuel.Text = FormatNumber(.TotalJumpFuelCost, 2)
            txtMineTotalJumpM3.Text = FormatNumber(.TotalJumpFuelM3)

            ' Hauler
            If .CheckUseHauler Then
                lblMineHaulerM3.Enabled = False
                lblMineRTMin.Enabled = False
                lblMineRTSec.Enabled = False
            Else
                lblMineHaulerM3.Enabled = True
                lblMineRTMin.Enabled = True
                lblMineRTSec.Enabled = True
            End If

            chkMineUseHauler.Checked = .CheckUseHauler
            txtMineRTMin.Text = FormatNumber(.RoundTripMin, 0)
            txtMineRTSec.Text = FormatNumber(.RoundTripSec, 0)
            txtMineHaulerM3.Text = FormatNumber(.Haulerm3, 0)

            ' Taxes and Fees
            chkMineIncludeBrokerFees.Checked = .CheckIncludeFees
            chkMineIncludeTaxes.Checked = .CheckIncludeTaxes

            ' Michii
            chkMineMichiImplant.Checked = .MichiiImplant

            ' Number of miners
            txtMineNumberMiners.Text = CStr(.NumberofMiners)

            ' Upgrades and miner types - different for Ice or Ore
            If .OreType = "Ore" Then
                cmbMineShipType.Text = .OreMiningShip
                cmbMineMiningLaser.Text = .OreStrip
                cmbMineMiningUpgrade.Text = .OreUpgrade
                cmbMineNumLasers.Text = CStr(.NumOreMiners)
                cmbMineNumMiningUpgrades.Text = CStr(.NumOreUpgrades)
                rbtnMineMercoxitRig.Enabled = True
                rbtnMineIceRig.Enabled = False
                If .MercoxitMiningRig Then
                    rbtnMineMercoxitRig.Checked = True
                Else
                    rbtnMineNoRigs.Checked = True
                End If
            ElseIf .OreType = "Ice" Then
                cmbMineShipType.Text = .IceMiningShip
                cmbMineMiningLaser.Text = .IceStrip
                cmbMineMiningUpgrade.Text = .IceUpgrade
                cmbMineNumLasers.Text = CStr(.NumIceMiners)
                cmbMineNumMiningUpgrades.Text = CStr(.NumIceUpgrades)
                rbtnMineMercoxitRig.Enabled = False
                rbtnMineIceRig.Enabled = True
                If .IceMiningRig Then
                    rbtnMineIceRig.Checked = True
                Else
                    rbtnMineIceRig.Checked = True
                End If
            ElseIf .OreType = "Gas" Then
                cmbMineShipType.Text = .GasMiningShip
                cmbMineMiningLaser.Text = .GasHarvester
                cmbMineMiningUpgrade.Text = .GasUpgrade
                cmbMineNumLasers.Text = CStr(.NumGasHarvesters)
                cmbMineNumMiningUpgrades.Text = CStr(.NumGasUpgrades)
                rbtnMineMercoxitRig.Enabled = False
                rbtnMineIceRig.Enabled = False
                rbtnMineNoRigs.Checked = True
            End If

            If .OreType = "Ore" Then
                gbMineCrystals.Enabled = True
                If .T2Crystals Then
                    rbtnMineT1Crystals.Checked = False
                    rbtnMineT2Crystals.Checked = True
                Else
                    rbtnMineT1Crystals.Checked = True
                    rbtnMineT2Crystals.Checked = False
                End If
            Else
                gbMineCrystals.Enabled = False
            End If

            ' Implants
            Call UpdateMiningImplants()

            ' Load the ore processing skills
            For i = 1 To MineProcessingCheckBoxes.Count - 1
                TempSkillLevel = SelectedCharacter.Skills.GetSkillLevel(SelectedCharacter.Skills.GetSkillTypeID(MineProcessingLabels(i).Text))
                If TempSkillLevel <> 0 Then
                    MineProcessingCombos(i).Text = CStr(TempSkillLevel)
                    MineProcessingCheckBoxes(i).Checked = True
                Else
                    MineProcessingCombos(i).Text = "0"
                    MineProcessingCheckBoxes(i).Checked = False
                End If
            Next

            ' Update the ore processing skills
            Call UpdateProcessingSkills()

        End With

        ' Load all the skills for the character
        Call LoadCharacterMiningSkills()

        ' Updates the mining ship form with correct boxes enabled and equipment, etc
        Call UpdateMiningShipForm(True)

        ' Load up the ship image
        Call LoadMiningshipImage()

        ' Clear the grid
        lstMineGrid.Items.Clear()

    End Sub

    Public Sub LoadCharacterMiningSkills()

        ' Load the Mining Skills for this character
        cmbMineDeepCore.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(11395))
        cmbMineAstrogeology.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(3410))
        cmbMineSkill.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(3386))
        cmbMineRefineryEff.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(3389))
        cmbMineRefining.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(3385))
        If cmbMineOreType.Text = "Gas" Then
            If SelectedCharacter.Skills.GetSkillLevel(25544) = 0 Then
                ' Set it to base 1 - even though if they don't have this skill they can't fit a gas harvester
                cmbMineGasIceHarvesting.Text = "1"
            Else
                cmbMineGasIceHarvesting.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(25544))
            End If
        ElseIf cmbMineOreType.Text = "Ice" Then
            cmbMineGasIceHarvesting.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(16281))
        Else
            cmbMineGasIceHarvesting.Text = "0"
        End If

        If cmbMineOreType.Text <> "Gas" Then
            cmbMineExhumers.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(22551))
        Else
            ' Load the Expedition frigate skill for the prospect
            cmbMineExhumers.Text = CStr(SelectedCharacter.Skills.GetSkillLevel(33856))
        End If

        Dim MiningBarge As Integer = SelectedCharacter.Skills.GetSkillLevel(17940)
        Dim MiningFrigate As Integer = SelectedCharacter.Skills.GetSkillLevel(32918)

        If MiningBarge = 0 Then
            ' Look up Mining Frigate skill
            If MiningFrigate = 0 Then
                ' Just set it to 1
                cmbMineBaseShipSkill.Text = "1"
            Else
                cmbMineBaseShipSkill.Text = CStr(MiningFrigate)
            End If
        Else
            cmbMineBaseShipSkill.Text = CStr(MiningBarge)
        End If

    End Sub

    ' Saves all the settings on the screen selected
    Private Sub btnMineSaveAllSettings_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMineSaveAllSettings.Click
        Dim TempSettings As MiningTabSettings = Nothing
        Dim Settings As New ProgramSettings

        ' Check data first
        If Not CheckMiningEntryData() Then
            Exit Sub
        End If

        With TempSettings
            ' Ore types
            .OreType = cmbMineOreType.Text

            .CheckHighSecOres = chkMineIncludeHighSec.Checked
            .CheckLowSecOres = chkMineIncludeLowSec.Checked
            .CheckNullSecOres = chkMineIncludeNullSec.Checked
            .CheckHighYieldOres = chkMineIncludeHighYieldOre.Checked

            .MiningDroneM3perHour = CDbl(txtMineMiningDroneM3.Text)
            .RefinedOre = chkMineRefinedOre.Checked
            .UnrefinedOre = chkMineUnrefinedOre.Checked
            .CompressedOre = chkMineCompressedOre.Checked

            ' Upgrades and miner types - different for Ice, Ore, or Gas
            If .OreType = "Ore" Then
                .OreMiningShip = cmbMineShipType.Text
                .OreStrip = cmbMineMiningLaser.Text
                .OreUpgrade = cmbMineMiningUpgrade.Text
                .NumOreMiners = CInt(cmbMineNumLasers.Text)
                .NumOreUpgrades = CInt(cmbMineNumMiningUpgrades.Text)
                .OreImplant = cmbMineImplant.Text

                ' Save the rigs
                If rbtnMineMercoxitRig.Checked = True Then
                    .MercoxitMiningRig = True
                Else
                    .MercoxitMiningRig = False
                End If

                ' Save Ice data
                .IceMiningShip = UserMiningTabSettings.IceMiningShip
                .IceStrip = UserMiningTabSettings.IceStrip
                .IceUpgrade = UserMiningTabSettings.IceUpgrade
                .NumIceMiners = UserMiningTabSettings.NumOreMiners
                .NumIceUpgrades = UserMiningTabSettings.NumOreUpgrades
                .IceImplant = UserMiningTabSettings.IceImplant
                .IceMiningRig = UserMiningTabSettings.IceMiningRig

                ' Save Gas Data
                .GasMiningShip = UserMiningTabSettings.GasMiningShip
                .GasHarvester = UserMiningTabSettings.GasHarvester
                .GasUpgrade = UserMiningTabSettings.GasUpgrade
                .NumGasHarvesters = UserMiningTabSettings.NumGasHarvesters
                .NumGasUpgrades = UserMiningTabSettings.NumGasUpgrades
                .GasImplant = UserMiningTabSettings.GasImplant

            ElseIf .OreType = "Ice" Then
                .IceMiningShip = cmbMineShipType.Text
                .IceStrip = cmbMineMiningLaser.Text
                .IceUpgrade = cmbMineMiningUpgrade.Text
                .NumIceMiners = CInt(cmbMineNumLasers.Text)
                .NumIceUpgrades = CInt(cmbMineNumMiningUpgrades.Text)
                .IceImplant = cmbMineImplant.Text

                ' Save Rig
                If rbtnMineIceRig.Checked = True Then
                    .IceMiningRig = True
                Else
                    .IceMiningRig = False
                End If

                ' Save Ore data
                .OreMiningShip = UserMiningTabSettings.OreMiningShip
                .OreStrip = UserMiningTabSettings.OreStrip
                .OreUpgrade = UserMiningTabSettings.OreUpgrade
                .NumOreMiners = UserMiningTabSettings.NumOreMiners
                .NumOreUpgrades = UserMiningTabSettings.NumOreUpgrades
                .OreImplant = UserMiningTabSettings.OreImplant
                .MercoxitMiningRig = UserMiningTabSettings.MercoxitMiningRig

                ' Save Gas Data
                .GasMiningShip = UserMiningTabSettings.GasMiningShip
                .GasHarvester = UserMiningTabSettings.GasHarvester
                .GasUpgrade = UserMiningTabSettings.GasUpgrade
                .NumGasHarvesters = UserMiningTabSettings.NumGasHarvesters
                .NumGasUpgrades = UserMiningTabSettings.NumGasUpgrades
                .GasImplant = UserMiningTabSettings.GasImplant

            ElseIf .OreType = "Gas" Then
                .GasMiningShip = cmbMineShipType.Text
                .GasHarvester = cmbMineMiningLaser.Text
                .GasUpgrade = None
                .NumGasHarvesters = CInt(cmbMineNumLasers.Text)
                .NumGasUpgrades = 0
                .GasImplant = cmbMineImplant.Text

                ' Save Ore data
                .OreMiningShip = UserMiningTabSettings.OreMiningShip
                .OreStrip = UserMiningTabSettings.OreStrip
                .OreUpgrade = UserMiningTabSettings.OreUpgrade
                .NumOreMiners = UserMiningTabSettings.NumOreMiners
                .NumOreUpgrades = UserMiningTabSettings.NumOreUpgrades
                .OreImplant = UserMiningTabSettings.OreImplant
                .MercoxitMiningRig = UserMiningTabSettings.MercoxitMiningRig

                ' Save Ice data
                .IceMiningShip = UserMiningTabSettings.IceMiningShip
                .IceStrip = UserMiningTabSettings.IceStrip
                .IceUpgrade = UserMiningTabSettings.IceUpgrade
                .NumIceMiners = UserMiningTabSettings.NumOreMiners
                .NumIceUpgrades = UserMiningTabSettings.NumOreUpgrades
                .IceImplant = UserMiningTabSettings.IceImplant
                .IceMiningRig = UserMiningTabSettings.IceMiningRig

            End If

            .T2Crystals = rbtnMineT2Crystals.Checked

            ' Fleet booster
            .CheckUseFleetBooster = chkMineUseFleetBooster.Checked
            .BoosterShip = cmbMineBoosterShip.Text
            .MiningDirectorSkill = CInt(cmbMineMiningDirector.Text)
            .MiningFormanSkill = CInt(cmbMineMiningForeman.Text)
            .BoosterShipSkill = CInt(cmbMineBoosterShipSkill.Text)
            .WarfareLinkSpecSkill = CInt(cmbMineWarfareLinkSpec.Text)
            .CheckMiningForemanMindLink = chkMineForemanMindlink.Checked
            .CheckRorqDeployed = chkMineRorqDeployedMode.Checked
            .IndustrialReconfig = CInt(cmbMineIndustReconfig.Text)

            If chkMineForemanLaserOpBoost.CheckState = CheckState.Indeterminate Then
                .CheckMineForemanLaserOpBoost = 2
            ElseIf chkMineForemanLaserOpBoost.Checked = True Then
                .CheckMineForemanLaserOpBoost = 1
            Else
                .CheckMineForemanLaserOpBoost = 0
            End If

            If chkMineForemanLaserRangeBoost.CheckState = CheckState.Indeterminate Then
                .CheckMineForemanLaserRangeBoost = 2
            ElseIf chkMineForemanLaserRangeBoost.Checked = True Then
                .CheckMineForemanLaserRangeBoost = 1
            Else
                .CheckMineForemanLaserRangeBoost = 0
            End If

            ' Check all locations
            .CheckSovAmarr = chkMineAmarr.Checked
            .CheckSovCaldari = chkMineCaldari.Checked
            .CheckSovGallente = chkMineGallente.Checked
            .CheckSovMinmatar = chkMineMinmatar.Checked
            .CheckSovWormhole = chkMineWH.Checked

            .CheckSovC1 = chkMineC1.Checked
            .CheckSovC2 = chkMineC2.Checked
            .CheckSovC3 = chkMineC3.Checked
            .CheckSovC4 = chkMineC4.Checked
            .CheckSovC5 = chkMineC5.Checked
            .CheckSovC6 = chkMineC6.Checked

            ' Refining
            ' Station numbers
            If cmbMineStationEff.Text.Contains("%") Then
                UserApplicationSettings.RefiningEfficiency = CDbl(cmbMineStationEff.Text.Substring(0, Len(cmbMineStationEff.Text) - 1)) / 100
            Else
                UserApplicationSettings.RefiningEfficiency = CDbl(cmbMineStationEff.Text) / 100
            End If
            If cmbMineRefineStationTax.Text.Contains("%") Then
                UserApplicationSettings.RefiningTax = CDbl(cmbMineRefineStationTax.Text.Substring(0, Len(cmbMineRefineStationTax.Text) - 1)) / 100
            Else
                UserApplicationSettings.RefiningTax = CDbl(cmbMineRefineStationTax.Text) / 100
            End If

            ' Allow them to update the refine standing here as well
            UserApplicationSettings.RefineCorpStanding = CDbl(txtMineRefineStanding.Text)

            ' Save it in the Application settings
            Settings.SaveApplicationSettings(UserApplicationSettings)

            ' Jump costs
            .CheckIncludeJumpFuelCosts = chkMineIncludeJumpCosts.Checked
            .JumpCompressedOre = rbtnMineJumpCompress.Checked
            .JumpMinerals = rbtnMineJumpMinerals.Checked
            .TotalJumpFuelCost = CDbl(txtMineTotalJumpFuel.Text)
            .TotalJumpFuelM3 = CDbl(txtMineTotalJumpM3.Text)

            .CheckUseHauler = chkMineUseHauler.Checked

            ' Hauler - only save values if not using hauler
            If chkMineUseHauler.Checked = False Then
                .RoundTripMin = CInt(txtMineRTMin.Text)
                .RoundTripSec = CInt(txtMineRTSec.Text)
                .Haulerm3 = CDbl(txtMineHaulerM3.Text)
            Else
                .RoundTripMin = Settings.DefaultMiningRoundTripMin
                .RoundTripSec = Settings.DefaultMiningRoundTripSec
                .Haulerm3 = Settings.DefaultMiningHaulerm3
            End If

            ' Taxes and Fees
            .CheckIncludeFees = chkMineIncludeBrokerFees.Checked
            .CheckIncludeTaxes = chkMineIncludeTaxes.Checked

            ' Michii
            .MichiiImplant = chkMineMichiImplant.Checked

            ' Number of miners
            .NumberofMiners = CInt(txtMineNumberMiners.Text)

        End With

        ' Save the data in the XML file
        Call Settings.SaveMiningSettings(TempSettings)

        ' Save the data to the local variable
        UserMiningTabSettings = TempSettings

        MsgBox("Settings Saved", vbInformation, Application.ProductName)

    End Sub

    ' Sets the screen settings for ore type selected
    Private Sub SetOreRefineChecks()
        If cmbMineOreType.Text <> "Gas" Then
            If chkMineRefinedOre.Checked Then
                gbMineBaseRefineSkills.Enabled = True
                gbMineStationYield.Enabled = True
            Else
                gbMineBaseRefineSkills.Enabled = False
                gbMineStationYield.Enabled = False
            End If
            gbMineRefining.Enabled = True
        Else
            gbMineBaseRefineSkills.Enabled = False
            gbMineStationYield.Enabled = False
            gbMineRefining.Enabled = False
            If cmbMineOreType.Text = "Gas" Then
                ' Can't refine gas
                chkMineRefinedOre.Checked = False
                chkMineUnrefinedOre.Checked = False
                chkMineCompressedOre.Checked = False
            End If
        End If
    End Sub

    ' Loads the Fleet Boost Ship image
    Private Sub LoadFleetBoosterImage()
        If chkMineUseFleetBooster.Checked Then
            Dim ShipName As String

            If cmbMineBoosterShip.Text = "Other" Then
                ShipName = Rokh
            ElseIf cmbMineBoosterShip.Text = "Battlecruiser" Then
                ShipName = Drake
            Else
                ShipName = cmbMineBoosterShip.Text
            End If

            Dim BPImage As String = GetMiningShipImage(ShipName)

            If System.IO.File.Exists(BPImage) Then
                pictMineFleetBoostShip.Image = Image.FromFile(BPImage)
            Else
                pictMineFleetBoostShip.Image = Nothing
            End If

        Else
            pictMineFleetBoostShip.Image = Nothing
        End If

        pictMineFleetBoostShip.Update()

    End Sub

    ' Loads the Mining Ship Image
    Private Sub LoadMiningshipImage()
        Dim ShipName As String

        If cmbMineShipType.Text = "Other" Then
            ShipName = Rokh
        ElseIf cmbMineShipType.Text = "Battlecruiser" Then
            ShipName = Drake
        Else
            ShipName = cmbMineShipType.Text
        End If

        Dim BPImage As String = GetMiningShipImage(ShipName)

        If System.IO.File.Exists(BPImage) Then
            pictMineSelectedShip.Image = Image.FromFile(BPImage)
        Else
            pictMineSelectedShip.Image = Nothing
        End If

        pictMineSelectedShip.Update()

    End Sub

    ' Loads the implants for the mining type
    Private Sub UpdateMiningImplants()
        Dim ReqSkill As Integer

        ' Clear implants
        cmbMineImplant.Items.Clear()

        ' Set Ore or Ice implants
        If cmbMineOreType.Text = "Ice" Then
            cmbMineImplant.Items.Add(None)
            'Inherent Implants 'Yeti' Ice Harvesting IH-1001
            cmbMineImplant.Items.Add("'Yeti' IH-1001")
            cmbMineImplant.Items.Add("'Yeti' IH-1003")
            cmbMineImplant.Items.Add("'Yeti' IH-1005")

            ' No Michi for ice
            chkMineMichiImplant.Enabled = False
            chkMineMichiImplant.ForeColor = Color.Black

            cmbMineImplant.Text = UserMiningTabSettings.IceImplant

        ElseIf cmbMineOreType.Text = "Ore" Then
            'Inherent Implants 'Highwall' Mining MX-1001
            cmbMineImplant.Items.Add(None)
            cmbMineImplant.Items.Add("'Highwall' MX-1001")
            cmbMineImplant.Items.Add("'Highwall' MX-1003")
            cmbMineImplant.Items.Add("'Highwall' MX-1005")

            chkMineMichiImplant.Enabled = True

            ' Michi Implant
            ReqSkill = CInt(GetAttribute("requiredSkill1Level", "Michi's Excavation Augmentor"))
            If ReqSkill <> SelectedCharacter.Skills.GetSkillLevel(3411) Then
                chkMineMichiImplant.ForeColor = Color.Red
                If UserApplicationSettings.ShowToolTips Then
                    ttMain.SetToolTip(chkMineMichiImplant, "Requires Cybernetics " & ReqSkill)
                End If
            Else
                chkMineMichiImplant.ForeColor = Color.Black
            End If

            cmbMineImplant.Text = UserMiningTabSettings.OreImplant

        ElseIf cmbMineOreType.Text = "Gas" Then
            cmbMineImplant.Items.Add(None)
            'Eifyr and Co. 'Alchemist' Gas Harvesting GH-801
            cmbMineImplant.Items.Add("'Alchemist' GH-801")
            cmbMineImplant.Items.Add("'Alchemist' GH-803")
            cmbMineImplant.Items.Add("'Alchemist' GH-805")

            ' No Michi for gas
            chkMineMichiImplant.Enabled = False
            chkMineMichiImplant.ForeColor = Color.Black

            cmbMineImplant.Text = UserMiningTabSettings.GasImplant
        End If

    End Sub

    ' Updates the skills and combos associated with the ship selected
    Private Sub UpdateMiningShipForm(UpdateEquipment As Boolean)

        ' Update the mining skills first, ships loaded depend on these
        Call UpdateMiningSkills()

        ' Load the ships into the ship combo
        Call UpdateMiningShipsCombo()

        If UpdateEquipment Then
            ' Finally load all the ship equipment
            Call UpdateMiningShipEquipment()
        End If

    End Sub

    ' Updates the mining skills for the ships and equipment
    Private Sub UpdateMiningSkills()
        ' Mining upgrades - need mining upgrades 1 or 4 for T2
        ' * mercoxit - T2's Deep core Mining 2
        ' Deep Core Strip Mining skill - Astrogeology 5 and Mining 5
        ' Ice miners - Need to change the mining combo name to Ice Harvesting
        ' * Need level 4 for T1 and level 5 for T2
        ' If they choose 'Other' for ship, hide strip miners and then show 'Miners' and number
        ' If they choose frigs or cruisers, show skill level of ship along with miners

        ' Mining Skill
        ' 3 for mining upgrades
        ' 4 for Astrology and ice harvesting
        ' 5 for Deep core mining

        ' Mining upgrades (ice and ore)
        If CInt(cmbMineSkill.Text) >= 3 And cmbMineOreType.Text <> "Gas" Then
            cmbMineMiningUpgrade.Enabled = True
        Else
            cmbMineMiningUpgrade.Enabled = False
        End If

        ' Ice/Gas Harvesting skill
        If CInt(cmbMineSkill.Text) >= 4 Then
            If cmbMineOreType.Text = "Ice" Then
                lblMineGasIceHarvesting.Text = "Ice Harv:"
                lblMineGasIceHarvesting.Enabled = True
                cmbMineGasIceHarvesting.Enabled = True
                cmbMineAstrogeology.Enabled = True
            ElseIf cmbMineOreType.Text = "Gas" Then
                lblMineGasIceHarvesting.Text = "Gas Harv:"
                lblMineGasIceHarvesting.Enabled = True
                cmbMineGasIceHarvesting.Enabled = True
                cmbMineAstrogeology.Enabled = False
            ElseIf cmbMineOreType.Text = "Ore" Then
                lblMineGasIceHarvesting.Enabled = False
                cmbMineGasIceHarvesting.Enabled = False
                cmbMineAstrogeology.Enabled = True
            End If
        Else
            cmbMineAstrogeology.Enabled = False
            lblMineGasIceHarvesting.Enabled = False
            cmbMineGasIceHarvesting.Enabled = False
        End If

        ' Deep core only for asteroid mining
        If CInt(cmbMineSkill.Text) = 5 And CInt(cmbMineAstrogeology.Text) = 5 And cmbMineOreType.Text = "Ore" Then
            cmbMineDeepCore.Enabled = True
            lblMineDeepCore.Enabled = True
        Else
            cmbMineDeepCore.Enabled = False
            lblMineDeepCore.Enabled = False
        End If

        ' Set exhumer skill combo for ice, but the prospect can mine ore so enable it for all
        If cmbMineOreType.Text = "Ice" Then
            If CInt(cmbMineAstrogeology.Text) = 5 And cmbMineAstrogeology.Enabled = True And CInt(cmbMineBaseShipSkill.Text) = 5 Then
                cmbMineExhumers.Enabled = True
                lblMineExhumers.Enabled = True
            Else
                cmbMineExhumers.Enabled = False
                lblMineExhumers.Enabled = False
            End If
        Else
            cmbMineExhumers.Enabled = True
            lblMineExhumers.Enabled = True
        End If

        ' Set true, can be set false when they choose "other"
        cmbMineBaseShipSkill.Enabled = True
        lblMineBaseShipSkill.Enabled = True

        ' Set the skill level of the ship they selected if not a mining barge/exhumer
        Select Case cmbMineShipType.Text
            Case "Other"
                cmbMineBaseShipSkill.Enabled = False
                lblMineBaseShipSkill.Enabled = False
                cmbMineExhumers.Enabled = False
                lblMineExhumers.Enabled = False
        End Select

    End Sub

    ' Updates the ships combo with ships based on the levels of skills set
    Private Sub UpdateMiningShipsCombo()
        Dim PreviousShip As String = cmbMineShipType.Text
        Dim MaxShipName As String = ""
        Dim ShipSkillLevel As Integer = 0

        UpdatingMiningShips = True
        cmbMineShipType.Items.Clear()

        ' For gas and ore, load venture, prospect and other
        If cmbMineOreType.Text <> "Ice" Then
            ' Check for Mining Frigate skill to load the Venture
            If CInt(cmbMineBaseShipSkill.Text) >= 1 Then
                cmbMineShipType.Items.Add(Venture)
                MaxShipName = Venture
            End If

            ' Use exhumers skill for expedition frigate
            If CInt(cmbMineExhumers.Text) >= 1 Then
                cmbMineShipType.Items.Add(Prospect)
                MaxShipName = Prospect
            End If

            ' Always add other for non ICE mining
            cmbMineShipType.Items.Add("Other")
        End If

        If cmbMineOreType.Text <> "Gas" Then
            ' Exhumers and Mining Barges - Load for both Ice and Ore
            ' 3 for Mining barge, Procurer, 4 for Retriever, 5 for Covetor
            ' 5 for Exhumers and Deep core mining
            'Covetor, Retriever, Procurer. Hulk, Skiff, Mackinaw
            If CInt(cmbMineAstrogeology.Text) >= 3 And cmbMineAstrogeology.Enabled = True And CInt(cmbMineBaseShipSkill.Text) >= 1 Then
                cmbMineShipType.Items.Add(Procurer)
                MaxShipName = Procurer
                cmbMineShipType.Items.Add(Retriever)
                MaxShipName = Retriever
                cmbMineShipType.Items.Add(Covetor)
                MaxShipName = Covetor
            End If

            If CInt(cmbMineAstrogeology.Text) = 5 And cmbMineAstrogeology.Enabled = True And CInt(cmbMineBaseShipSkill.Text) = 5 And CInt(cmbMineExhumers.Text) >= 1 Then
                cmbMineShipType.Items.Add(Skiff)
                MaxShipName = Skiff
                cmbMineShipType.Items.Add(Mackinaw)
                MaxShipName = Mackinaw
                cmbMineShipType.Items.Add(Hulk)
                MaxShipName = Hulk
            End If
        End If

        If MaxShipName = "" And cmbMineOreType.Text <> "Ice" Then
            MaxShipName = "Other"
        ElseIf MaxShipName = "" And cmbMineOreType.Text = "Ice" Then ' Only 6 ships can mine ice.
            MaxShipName = None
            ' Always add None for this case
            cmbMineShipType.Items.Add(None)
        End If

        ' Use settings to load the ships, else load the maxshipname unless first load
        If cmbMineOreType.Text = "Ore" And UserMiningTabSettings.OreMiningShip <> "" And FirstShowMining Then
            cmbMineShipType.Text = UserMiningTabSettings.OreMiningShip
        ElseIf cmbMineOreType.Text = "Ice" And UserMiningTabSettings.IceMiningShip <> "" And FirstShowMining Then
            cmbMineShipType.Text = UserMiningTabSettings.IceMiningShip
        ElseIf cmbMineOreType.Text = "Gas" And UserMiningTabSettings.GasMiningShip <> "" And FirstShowMining Then
            cmbMineShipType.Text = UserMiningTabSettings.GasMiningShip
        Else
            If cmbMineShipType.Items.Contains(PreviousShip) Then
                cmbMineShipType.Text = PreviousShip
            Else
                cmbMineShipType.Text = MaxShipName
            End If
        End If

        ' If we have a max ship name, then set it if it didn't stick in the combo after checking settings
        If MaxShipName <> "" And cmbMineShipType.Text = "" Then
            cmbMineShipType.Text = MaxShipName
        End If

        UpdatingMiningShips = False
        Call LoadMiningshipImage()

    End Sub

    ' Loads the laser/strip combos, implant, etc for the ship types
    Private Sub UpdateMiningShipEquipment()
        Dim LaserCount As Integer = 0
        Dim MLUCount As Integer = 0
        Dim i As Integer
        Dim MaxStrip As String = ""
        Dim ShipName As String
        Dim DeepCoreLoaded As Boolean = False

        ' Clear miners
        cmbMineMiningLaser.Items.Clear()

        ShipName = cmbMineShipType.Text

        Select Case ShipName
            Case Hulk, Mackinaw, Skiff, Covetor, Retriever, Procurer
                ' Get the numbers
                'LaserCount = CInt(GetAttribute("High Slots", ShipName))
                'MLUCount = CInt(GetAttribute("Low Slots", ShipName))
                Select Case ShipName
                    Case Hulk, Covetor
                        LaserCount = 3
                        MLUCount = 2
                    Case Mackinaw, Retriever
                        LaserCount = 2
                        MLUCount = 3
                    Case Skiff
                        LaserCount = 1
                        MLUCount = 3
                    Case Procurer
                        LaserCount = 1
                        MLUCount = 2
                End Select

                ' Now load the strips
                If cmbMineOreType.Text = "Ore" Then
                    ' Mining Skill
                    ' Mining 4 for T1 Strips
                    ' Mining 5 for T2 Strips

                    If CInt(cmbMineSkill.Text) >= 4 Then
                        cmbMineMiningLaser.Items.Add("Strip Miner I")
                        cmbMineMiningLaser.Items.Add("ORE Strip Miner")
                        MaxStrip = "Strip Miner I"
                        rbtnMineT1Crystals.Enabled = False
                        rbtnMineT2Crystals.Enabled = False
                    End If

                    If CInt(cmbMineSkill.Text) = 5 Then
                        cmbMineMiningLaser.Items.Add("Modulated Strip Miner II")
                        MaxStrip = "Modulated Strip Miner II"
                        rbtnMineT1Crystals.Enabled = True
                        rbtnMineT2Crystals.Enabled = True
                    End If

                    If CInt(cmbMineDeepCore.Text) >= 2 And cmbMineDeepCore.Enabled = True Then
                        cmbMineMiningLaser.Items.Add("Modulated Deep Core Strip Miner II")
                        rbtnMineT1Crystals.Enabled = True
                        rbtnMineT2Crystals.Enabled = True
                    End If

                Else
                    ' Ice harvesting skill
                    ' 1 for T1 strip
                    ' 5 for T2 strips

                    If CInt(cmbMineGasIceHarvesting.Text) >= 1 Then
                        cmbMineMiningLaser.Items.Add("Ice Harvester I")
                        cmbMineMiningLaser.Items.Add("ORE Ice Harvester")
                        MaxStrip = "Ice Harvester I"
                    End If

                    If CInt(cmbMineGasIceHarvesting.Text) = 5 Then
                        cmbMineMiningLaser.Items.Add("Ice Harvester II")
                        MaxStrip = "Ice Harvester II"
                    End If

                    rbtnMineT1Crystals.Enabled = False
                    rbtnMineT2Crystals.Enabled = False

                End If

                ' Turn on the num lasers
                lblMineLaserNumber.Enabled = True
                cmbMineNumLasers.Enabled = True

            Case Else ' Other ships that are not mining barges

                'LaserCount = CInt(GetAttribute("Turret hardpoints", ShipName)) ' Use turret hardpoints for this
                'MLUCount = CInt(GetAttribute("Low Slots", ShipName))
                Select Case ShipName
                    Case Prospect
                        LaserCount = 2
                        MLUCount = 4
                    Case Venture
                        LaserCount = 2
                        MLUCount = 1
                End Select

                ' For Other Ships
                lblMineLaserNumber.Visible = True
                cmbMineNumLasers.Visible = True

                If cmbMineOreType.Text = "Ore" Then
                    rbtnMineT1Crystals.Enabled = False
                    rbtnMineT2Crystals.Enabled = False

                    ' Add all the basic mining lasers
                    cmbMineMiningLaser.Items.Clear()
                    cmbMineMiningLaser.Items.Add("Miner I")

                    If CInt(cmbMineSkill.Text) >= 4 Then
                        cmbMineMiningLaser.Items.Add("Miner II")
                        MaxStrip = "Miner II"
                    End If

                    cmbMineMiningLaser.Items.Add("Civilian Miner")
                    cmbMineMiningLaser.Items.Add("EP-S Gaussian Scoped Mining Laser")
                    cmbMineMiningLaser.Items.Add("Particle Bore Compact Mining Laser")
                    cmbMineMiningLaser.Items.Add("Gallente Mining Laser")
                    cmbMineMiningLaser.Items.Add("ORE Miner")
                    cmbMineMiningLaser.Items.Add("Single Diode Basic Mining Laser")

                    Select Case UserMiningTabSettings.OreStrip
                        Case "Civilian Miner"
                            MaxStrip = "Civilian Miner"
                        Case "EP-S Gaussian Scoped Mining Laser"
                            MaxStrip = "EP-S Gaussian Scoped Mining Laser"
                        Case "Particle Bore Compact Mining Laser"
                            MaxStrip = "Particle Bore Compact Mining Laser"
                        Case "Gallente Mining Laser"
                            MaxStrip = "Gallente Mining Laser"
                        Case "ORE Miner"
                            MaxStrip = "ORE Miner"
                        Case "Single Diode Basic Mining Laserr"
                            MaxStrip = "Single Diode Basic Mining Laser"
                        Case Else
                            MaxStrip = "Miner I"
                    End Select

                    ' Deep core (Mercoxit)
                    If CInt(cmbMineDeepCore.Text) >= 1 And cmbMineDeepCore.Enabled = True Then
                        cmbMineMiningLaser.Items.Add("Deep Core Mining Laser I")
                        cmbMineMiningLaser.Items.Add("ORE Deep Core Mining Laser")
                    End If

                    If CInt(cmbMineDeepCore.Text) >= 2 And cmbMineDeepCore.Enabled = True Then
                        cmbMineMiningLaser.Items.Add("Modulated Deep Core Miner II")
                        ' Uses crystals
                        rbtnMineT1Crystals.Enabled = True
                        rbtnMineT2Crystals.Enabled = True
                    End If

                ElseIf cmbMineOreType.Text = "Gas" Then
                    ' Only venture and other
                    cmbMineMiningLaser.Items.Add("'Crop' Gas Cloud Harvester")
                    cmbMineMiningLaser.Items.Add("Gas Cloud Harvester I")
                    cmbMineMiningLaser.Items.Add("'Plow' Gas Cloud Harvester")
                    cmbMineMiningLaser.Items.Add("Syndicate Gas Cloud Harvester")

                    Select Case UserMiningTabSettings.OreStrip
                        Case "'Crop' Gas Cloud Harvester"
                            MaxStrip = "'Crop' Gas Cloud Harvester"
                        Case "Gas Cloud Harvester I"
                            MaxStrip = "Gas Cloud Harvester I"
                        Case "'Plow' Gas Cloud Harvester"
                            MaxStrip = "'Plow' Gas Cloud Harvester"
                        Case "Syndicate Gas Cloud Harvester"
                            MaxStrip = "Syndicate Gas Cloud Harvester"
                        Case Else
                            MaxStrip = "Gas Cloud Harvester I"
                    End Select

                    If CInt(cmbMineGasIceHarvesting.Text) = 5 Then
                        cmbMineMiningLaser.Items.Add("Gas Cloud Harvester II")
                        MaxStrip = "Gas Cloud Harvester II"
                    End If

                End If

        End Select

        ' Set crystals
        rbtnMineT2Crystals.Checked = UserMiningTabSettings.T2Crystals

        ' Set Strip name
        cmbMineMiningLaser.Text = MaxStrip

        ' Set the MLU numbers
        cmbMineNumMiningUpgrades.Items.Clear()
        cmbMineNumMiningUpgrades.Enabled = True

        ' Allow 8 for MLU's if other ship (Rohk, Iteron, etc)
        If ShipName = "Other" And cmbMineOreType.Text <> "Gas" Then
            MLUCount = 8
            LaserCount = 8
        ElseIf cmbMineOreType.Text = "Gas" Then
            MLUCount = 0
            ' Update laser count based on skills - max of 5
            If cmbMineShipType.Text = Venture Or cmbMineShipType.Text = Prospect Then
                ' Update the laser count if it's less than the turrets on the venture/prospect
                If CInt(cmbMineGasIceHarvesting.Text) < LaserCount Then
                    LaserCount = CInt(cmbMineGasIceHarvesting.Text)
                End If
            Else ' Other Ship
                ' Update the turrets based on the skill, max of 5
                LaserCount = CInt(cmbMineGasIceHarvesting.Text)
            End If
        End If

        For i = 1 To MLUCount
            cmbMineNumMiningUpgrades.Items.Add(CStr(i))
        Next

        ' Set the number of Strip miners available
        cmbMineNumLasers.Items.Clear()

        ' Set the max allowable lasers
        For i = 1 To LaserCount
            cmbMineNumLasers.Items.Add(CStr(i))
        Next

        ' Choose options for None ships first, these should be just clear settings
        If cmbMineShipType.Text = None Then

            cmbMineNumMiningUpgrades.Text = "0"
            cmbMineMiningUpgrade.Text = None
            cmbMineNumLasers.Text = "0"
            cmbMineMiningLaser.Text = None

        Else ' Normal ship or "other"
            ' Load settings, only change to user settings if the ship is the same as the one selected

            ' Set the names and numbers for upgrades and strips
            If cmbMineOreType.Text = "Ore" Then
                ' Set the number of MLUs
                If UserMiningTabSettings.NumOreUpgrades = 0 Or MLUCount < UserMiningTabSettings.NumOreUpgrades Or ShipName <> UserMiningTabSettings.OreMiningShip Then
                    cmbMineNumMiningUpgrades.Text = CStr(MLUCount)
                Else
                    cmbMineNumMiningUpgrades.Text = CStr(UserMiningTabSettings.NumOreUpgrades)
                End If

                ' Set the MLU Text - These are hardcoded so just use the default or user setting
                cmbMineMiningUpgrade.Text = UserMiningTabSettings.OreUpgrade

                ' Set number of strips
                If UserMiningTabSettings.NumOreMiners = 0 Or LaserCount < UserMiningTabSettings.NumOreMiners Or ShipName <> UserMiningTabSettings.OreMiningShip Then
                    cmbMineNumLasers.Text = CStr(LaserCount)
                Else
                    cmbMineNumLasers.Text = CStr(UserMiningTabSettings.NumOreMiners)
                End If

                ' Set Strip name
                If UserMiningTabSettings.OreStrip = "" Then
                    cmbMineMiningLaser.Text = MaxStrip
                Else
                    cmbMineMiningLaser.Text = UserMiningTabSettings.OreStrip
                End If

            ElseIf cmbMineOreType.Text = "Ice" Then
                ' Set the number of MLUs
                If UserMiningTabSettings.NumIceUpgrades = 0 Or MLUCount < UserMiningTabSettings.NumIceUpgrades Or ShipName <> UserMiningTabSettings.IceMiningShip Then
                    cmbMineNumMiningUpgrades.Text = CStr(MLUCount)
                Else
                    cmbMineNumMiningUpgrades.Text = CStr(UserMiningTabSettings.NumIceUpgrades)
                End If

                ' Set the MLU Text - These are hardcoded so just use the default or user setting
                cmbMineMiningUpgrade.Text = UserMiningTabSettings.IceUpgrade

                ' Set number of strips
                If UserMiningTabSettings.NumIceMiners = 0 Or LaserCount < UserMiningTabSettings.NumIceMiners Or ShipName <> UserMiningTabSettings.IceMiningShip Then
                    cmbMineNumLasers.Text = CStr(LaserCount)
                Else
                    ' Update with the user settings they have, up to the max the ship can use
                    cmbMineNumLasers.Text = CStr(UserMiningTabSettings.NumIceMiners)
                End If

                ' Set Strip name
                If UserMiningTabSettings.IceStrip = "" Then
                    cmbMineMiningLaser.Text = MaxStrip
                Else
                    cmbMineMiningLaser.Text = UserMiningTabSettings.IceStrip
                End If

            ElseIf cmbMineOreType.Text = "Gas" Then
                ' No MLUs for gas
                cmbMineNumMiningUpgrades.Enabled = False
                cmbMineMiningUpgrade.Text = UserMiningTabSettings.GasUpgrade

                ' Set number of strips
                If UserMiningTabSettings.NumIceMiners = 0 Or MLUCount < UserMiningTabSettings.NumGasHarvesters Or ShipName <> UserMiningTabSettings.GasMiningShip Then
                    cmbMineNumLasers.Text = CStr(LaserCount)
                Else
                    cmbMineNumLasers.Text = CStr(UserMiningTabSettings.NumGasHarvesters)
                End If

                ' Set Strip name
                If UserMiningTabSettings.IceStrip = "" Then
                    cmbMineMiningLaser.Text = MaxStrip
                Else
                    cmbMineMiningLaser.Text = UserMiningTabSettings.GasHarvester
                End If
            End If

        End If

        Call RefreshHaulerM3()

        lblMineCycleTime.Text = ""
        lblMineRange.Text = ""

    End Sub

    ' Updates the processing skills (enable, disable) depending on the refining skills selected
    Private Sub UpdateProcessingSkills()

        If FirstLoad Then
            Exit Sub
        End If

        ' Set them all false first
        For i = 1 To MineProcessingCheckBoxes.Count - 1
            MineProcessingCheckBoxes(i).Enabled = False
        Next

        For i = 1 To MineProcessingCombos.Count - 1
            MineProcessingCombos(i).Enabled = False
        Next

        For i = 1 To MineProcessingLabels.Count - 1
            MineProcessingLabels(i).Enabled = False
        Next

        cmbMineRefineryEff.Enabled = False

        If cmbMineOreType.Text = "Ore" Then

            If cmbMineRefining.Text = "4" Or cmbMineRefining.Text = "5" Then
                ' Veld, Scordite, Pyroxeres, and Plag
                Call EnableOreProcessingGroup(1, True)
                Call EnableOreProcessingGroup(2, True)
                Call EnableOreProcessingGroup(9, True)
                Call EnableOreProcessingGroup(10, True)
            End If

            If cmbMineRefining.Text = "5" Then
                ' Hemo, Jaspet, Kernite, Omber, Refinery Effy
                Call EnableOreProcessingGroup(3, True)
                Call EnableOreProcessingGroup(4, True)
                Call EnableOreProcessingGroup(11, True)
                Call EnableOreProcessingGroup(12, True)

                cmbMineRefineryEff.Enabled = True

            End If

            If cmbMineRefineryEff.Text = "4" Or cmbMineRefineryEff.Text = "5" Then
                ' Dark Ochre, Gneiss, Hedb, Spod
                Call EnableOreProcessingGroup(5, True)
                Call EnableOreProcessingGroup(6, True)
                Call EnableOreProcessingGroup(13, True)
                Call EnableOreProcessingGroup(14, True)
            End If

            If cmbMineRefineryEff.Text = "5" Then
                ' Ark, Bisot, Crokite, Mercoxit
                Call EnableOreProcessingGroup(7, True)
                Call EnableOreProcessingGroup(8, True)
                Call EnableOreProcessingGroup(15, True)
                Call EnableOreProcessingGroup(16, True)
            End If

        ElseIf cmbMineOreType.Text = "Ice" Then
            ' Enable the one ice processing skill
            If cmbMineRefining.Text = "5" Then
                cmbMineRefineryEff.Enabled = True
            End If

            If cmbMineRefineryEff.Enabled And cmbMineRefineryEff.Text = "5" Then
                Call EnableOreProcessingGroup(17, True)
            End If

        Else ' Gas
            ' We don't refine, so leave them all off
        End If

    End Sub

    ' Changes the ore processing skill group to enabled or disabled
    Private Sub EnableOreProcessingGroup(ByVal Index As Integer, ByVal EnableObject As Boolean)
        If MineProcessingCheckBoxes(Index).Checked And EnableObject Then
            ' Ok to enable
            MineProcessingCombos(Index).Enabled = True
            MineProcessingLabels(Index).Enabled = True
        Else
            ' Don't enable
            MineProcessingCombos(Index).Enabled = False
            MineProcessingLabels(Index).Enabled = False
        End If

        MineProcessingCheckBoxes(Index).Enabled = EnableObject
    End Sub

    ' Updates the skills and boxes associated with the booster
    Private Sub UpdateBoosterSkills()
        Dim CurrentShip As String

        ' Industrial command ships = orca. Need Mining director 1
        ' Capital industrial = rorq, need nothing

        ' Mining director needs mining foreman 5
        ' Mindlink (implant) needs mining director 5 
        ' Mining gang link needs mining director 1
        ' Mining gang link II needs mining director 5 (three way check box)
        If chkMineUseFleetBooster.Checked Then
            cmbMineBoosterShip.Enabled = True
            cmbMineMiningForeman.Enabled = True
            lblMineBoosterShipSkill.Enabled = True
            cmbMineBoosterShipSkill.Enabled = True
            lblMineWarfareLinkSpec.Enabled = True
            cmbMineWarfareLinkSpec.Enabled = True

            If cmbMineMiningForeman.Text = "5" Then
                cmbMineMiningDirector.Enabled = True

                If cmbMineMiningDirector.Text = "5" Then
                    chkMineForemanMindlink.Enabled = True ' Implant
                    chkMineForemanLaserOpBoost.ThreeState = True ' Allow for t2 mindlink
                    chkMineForemanLaserOpBoost.Enabled = True
                    chkMineForemanLaserRangeBoost.ThreeState = True ' Allow for t2 mindlink
                    chkMineForemanLaserRangeBoost.Enabled = True
                Else
                    chkMineForemanMindlink.Enabled = False
                    chkMineForemanLaserOpBoost.Enabled = True
                    chkMineForemanLaserOpBoost.ThreeState = False ' Only the T1 mindlink
                    chkMineForemanLaserRangeBoost.Enabled = True
                    chkMineForemanLaserRangeBoost.ThreeState = False ' Only the T1 mindlink
                End If
            Else
                chkMineForemanLaserOpBoost.Enabled = False
                chkMineForemanLaserRangeBoost.Enabled = False
                chkMineForemanMindlink.Enabled = False
                cmbMineMiningDirector.Enabled = False
            End If

            Call UpdateMiningBoosterObjects()

            UpdatingMiningShips = True

            CurrentShip = cmbMineBoosterShip.Text
            cmbMineBoosterShip.Items.Clear()

            cmbMineBoosterShip.Items.Add(Rorqual)
            cmbMineBoosterShip.Items.Add(Orca)
            cmbMineBoosterShip.Items.Add("Battlecruiser")
            cmbMineBoosterShip.Items.Add("Other")

            If cmbMineBoosterShip.Items.Contains(CurrentShip) Then
                cmbMineBoosterShip.Text = CurrentShip
            Else
                cmbMineBoosterShip.Text = "Other"
            End If

            UpdatingMiningShips = False

            If cmbMineBoosterShip.Text = "Other" Then
                ' Disable mining foreman link
                chkMineForemanLaserOpBoost.Enabled = False
                chkMineForemanLaserRangeBoost.Enabled = False
            End If

            If cmbMineBoosterShip.Text = Orca Or cmbMineBoosterShip.Text = Rorqual Then
                cmbMineBoosterShipSkill.Enabled = True
            Else
                cmbMineBoosterShipSkill.Enabled = False
            End If

            If cmbMineBoosterShip.Text = Rorqual Then
                chkMineRorqDeployedMode.Enabled = True
                cmbMineIndustReconfig.Enabled = True
                lblMineIndustrialReconfig.Enabled = True
            Else
                chkMineRorqDeployedMode.Enabled = False
                cmbMineIndustReconfig.Enabled = False
                lblMineIndustrialReconfig.Enabled = False
            End If

        Else
            cmbMineBoosterShip.Enabled = False
            cmbMineMiningDirector.Enabled = False
            cmbMineMiningForeman.Enabled = False
            chkMineForemanMindlink.Enabled = False
            chkMineForemanLaserOpBoost.Enabled = False
            chkMineForemanLaserRangeBoost.Enabled = False
            lblMineBoosterShipSkill.Enabled = False
            cmbMineBoosterShipSkill.Enabled = False
            lblMineWarfareLinkSpec.Enabled = False
            cmbMineWarfareLinkSpec.Enabled = False
            chkMineRorqDeployedMode.Enabled = False
            cmbMineIndustReconfig.Enabled = False
            lblMineIndustrialReconfig.Enabled = False
        End If

    End Sub

    ' Main grid function for loading ores to mine
    Public Sub LoadMiningGrid()
        Dim SQL As String
        Dim readerMine As SQLiteDataReader
        Dim readerOre As SQLiteDataReader
        Dim i As Integer
        Dim lstOreRow As ListViewItem

        Dim IceMining As Boolean
        Dim GasMining As Boolean

        Dim StationRefineEfficiency As Double
        Dim StationRefineTax As Double

        Dim ShipMiningYield As Double
        Dim BaseCycleTime As Double
        Dim CycleTime As Double
        Dim CrystalMiningYield As Double
        Dim OreList As New List(Of MiningOre)
        Dim TempOre As MiningOre = Nothing
        Dim CrystalType As String = "" ' For reference out of getting crystals

        Dim Orem3PerSecond As Double
        Dim OrePerSecond As Double

        ' Ice stuff
        Dim IceCylesPerHour As Integer
        Dim IceBlocksPerHour As Integer
        ' Ice Hauling
        Dim IceBlocksPerLoad As Integer

        Dim RefineryYield As Double ' For reference out of refining

        ' For hauler calcs
        Dim SecondstoFill As Double  ' How much time it took to fill the m3 value with ore
        Dim FillCycles As Double ' How many cycles it will take to fill the m3 value with ore in an hour
        Dim RTTimetoStationSeconds As Long = 0 ' Seconds to get back to station to drop off ore

        Dim HeavyWaterCost As Double = 0 ' Total it costs to run the Rorq in deployed mode

        ' Error checks
        If Not CheckMiningEntryData() Then
            Exit Sub
        End If

        If cmbMineOreType.Text = "Ice" Then
            IceMining = True
        Else
            IceMining = False
        End If

        If cmbMineOreType.Text = "Gas" Then
            GasMining = True
        Else
            GasMining = False
        End If

        ' Get the refining stuff
        StationRefineEfficiency = CDbl(cmbMineStationEff.Text.Substring(0, Len(cmbMineStationEff.Text) - 1)) / 100
        StationRefineTax = CDbl(cmbMineRefineStationTax.Text.Substring(0, Len(cmbMineRefineStationTax.Text) - 1))

        If StationRefineTax > 0 Then
            StationRefineTax = StationRefineTax / 100
        Else
            StationRefineTax = 0
        End If

        ' Refining
        Dim RefinedMaterials As New Materials
        Dim RefiningStation As New RefiningReprocessing(CInt(cmbMineRefining.Text), _
                                                        CInt(cmbMineRefineryEff.Text), _
                                                        SelectedCharacter.Skills.GetSkillLevel(12196), _
                                                        UserApplicationSettings.RefiningImplantValue, _
                                                        StationRefineEfficiency, StationRefineTax, CDbl(txtMineRefineStanding.Text))

        ' Create an instance of a ListView column sorter and assign it 
        ' for the data cores
        MiningColumnSorter = New ListViewColumnSorter()
        lstMineGrid.ListViewItemSorter = MiningColumnSorter

        ' First determine what type of stuff we are mining
        SQL = "SELECT ORES.ORE_ID, ORE_NAME, ORE_VOLUME, UNITS_TO_REFINE "
        SQL = SQL & "FROM ORES, ORE_LOCATIONS "
        SQL = SQL & "WHERE ORES.ORE_ID = ORE_LOCATIONS.ORE_ID "
        SQL = SQL & "AND BELT_TYPE = '" & cmbMineOreType.Text & "' "

        ' See if we want High yield ores
        If IceMining Then
            SQL = SQL & "AND ORES.HIGH_YIELD_ORE = -1 "
        ElseIf GasMining Then
            SQL = SQL & "AND ORES.HIGH_YIELD_ORE = -2 "
        Else
            If chkMineIncludeHighYieldOre.Checked = False Then
                ' Only base ores
                SQL = SQL & "AND ORES.HIGH_YIELD_ORE = 0 "
            End If
        End If

        ' See where we want this for security
        SQL = SQL & "AND SYSTEM_SECURITY IN ("

        If chkMineIncludeHighSec.Checked = True Then
            SQL = SQL & "'High Sec',"
        End If
        If chkMineIncludeLowSec.Checked = True Then
            SQL = SQL & "'Low Sec',"
        End If
        If chkMineIncludeNullSec.Checked = True Then
            SQL = SQL & "'Null Sec',"
        End If

        ' If WH checked, then add the classes
        If chkMineWH.Checked = True Then
            If chkMineC1.Checked And chkMineC1.Enabled Then
                SQL = SQL & "'C1',"
            End If
            If chkMineC2.Checked And chkMineC2.Enabled Then
                SQL = SQL & "'C2',"
            End If
            If chkMineC3.Checked And chkMineC3.Enabled Then
                SQL = SQL & "'C3',"
            End If
            If chkMineC4.Checked And chkMineC4.Enabled Then
                SQL = SQL & "'C4',"
            End If
            If chkMineC5.Checked And chkMineC5.Enabled Then
                SQL = SQL & "'C5',"
            End If
            If chkMineC6.Checked And chkMineC6.Enabled Then
                SQL = SQL & "'C6',"
            End If
        End If

        SQL = SQL.Substring(0, Len(SQL) - 1) & ") "

        ' Now determine what space we are looking at
        SQL = SQL & "AND SPACE IN ("

        If chkMineAmarr.Checked = True Then
            SQL = SQL & "'Amarr',"
        End If
        If chkMineCaldari.Checked = True Then
            SQL = SQL & "'Caldari',"
        End If
        If chkMineGallente.Checked = True Then
            SQL = SQL & "'Gallente',"
        End If
        If chkMineMinmatar.Checked = True Then
            SQL = SQL & "'Minmatar',"
        End If
        If chkMineWH.Checked = True Then
            SQL = SQL & "'WH',"
        End If

        SQL = SQL.Substring(0, Len(SQL) - 1) & ") "

        ' Group them
        SQL = SQL & "GROUP BY ORES.ORE_ID, ORE_NAME, ORE_VOLUME, UNITS_TO_REFINE "

        DBCommand = New SQLiteCommand(SQL, DB)
        readerMine = DBCommand.ExecuteReader

        ' Process 
        ' Calculate the mining amount from all the stuff chosen except crystals

        ' Calculate cycle time for one laser

        ' Loop through ore, and determine the amount of ore the person can get per minute and include crystal amount
        ' because it's dependant on the ore type (and crystal type) and then we can look up skills on screen

        ' Adjust for hauling

        ' Then refine 60 minutes (ore per hour) of ore for each all in same loop

        ' For jumping amount - TBD

        ' Get the mining yield first (this is without crystals and no mercoxit)
        ShipMiningYield = CalculateMiningAmount()
        ' Duration is in milliseconds
        BaseCycleTime = CalculateMiningCycleTime(GetAttribute("duration", cmbMineMiningLaser.Text) / 1000)

        ' Get Heavy Water costs
        If chkMineRorqDeployedMode.Checked And CInt(cmbMineIndustReconfig.Text) <> 0 Then
            ' Add (subtract from total isk) the heavy water cost
            HeavyWaterCost = CalculateRorqDeployedCost(CInt(cmbMineIndustReconfig.Text), CInt(cmbMineBoosterShipSkill.Text))
        End If

        lblMineCycleTime.Text = FormatNumber(BaseCycleTime, 1) & " s"

        Me.Cursor = Cursors.WaitCursor

        ' Loop through all the ores and determine ore amount, refine, 
        While readerMine.Read
            Application.DoEvents()
            ' DB Data
            TempOre.OreID = readerMine.GetInt64(0)
            TempOre.OreName = readerMine.GetString(1)
            TempOre.OreVolume = readerMine.GetDouble(2)
            TempOre.UnitsToRefine = readerMine.GetInt32(3)

            ' If not using a hauler, adjust the cycle time based on round trip time
            If chkMineUseHauler.Checked = False Then

                If TempOre.OreVolume > CDbl(txtMineHaulerM3.Text) Then
                    ' You can't use this hauler for this amount of ore
                    ' So no point in going on
                    MsgBox("The volume of the hauler is too small to use for this setup.", vbExclamation, Application.ProductName)
                    txtMineHaulerM3.Focus()
                    Exit Sub
                End If

                ' Get Round Trip Time (RTT) to station to drop off ore - User entered, in seconds
                RTTimetoStationSeconds = (CInt(txtMineRTMin.Text) * 60) + CInt(txtMineRTSec.Text)

            End If

            ' Ore amount
            If Not IceMining And Not GasMining Then
                ' Determine crystal amount
                CrystalMiningYield = ShipMiningYield * GetMiningCrystalBonus(TempOre.OreName, CrystalType)
                ' Save the crystal type
                TempOre.CrystalType = CrystalType
                TempOre.OreUnitsPerCycle = CrystalMiningYield

                ' Calculate the m3 per second for this ore including mining drone input
                Orem3PerSecond = (CrystalMiningYield / BaseCycleTime) + (CDbl(txtMineMiningDroneM3.Text) / 3600)

                ' This is the m3 per second, but need to get this ORE per second based on it's volume
                OrePerSecond = Orem3PerSecond / TempOre.OreVolume

            ElseIf IceMining Then
                TempOre.CrystalType = None
                IceCylesPerHour = CInt(Math.Floor(3600 / BaseCycleTime))

                ' Total ice blocks per hour
                IceBlocksPerHour = CInt(IceCylesPerHour * ShipMiningYield)
                ' Total ice blocks per cycle
                TempOre.OreUnitsPerCycle = ShipMiningYield * 1000 ' Ice is 1000 m3

            ElseIf GasMining Then
                ' Save the crystal type
                TempOre.CrystalType = None

                TempOre.OreUnitsPerCycle = ShipMiningYield
                Orem3PerSecond = ShipMiningYield / BaseCycleTime

                ' This is the m3 per second, but need to get this ORE per second based on it's volume
                OrePerSecond = Orem3PerSecond / TempOre.OreVolume
            End If

            If chkMineUseHauler.Checked = False Then
                ' Treat Ore and Gas the same
                If Not IceMining Then
                    ' How long to fill the cargo?
                    SecondstoFill = CDbl(txtMineHaulerM3.Text) / Orem3PerSecond
                    ' How many cycles where in this session?
                    FillCycles = SecondstoFill / BaseCycleTime

                    ' Add on the round trip time and recalculate cycle time
                    CycleTime = ((FillCycles * BaseCycleTime) + RTTimetoStationSeconds) / FillCycles

                    ' Recalculate with new cycle time
                    If cmbMineOreType.Text = "Ore" Then
                        Orem3PerSecond = (CrystalMiningYield / CycleTime) + (CDbl(txtMineMiningDroneM3.Text) / 3600)
                    Else ' Gas
                        Orem3PerSecond = ShipMiningYield / CycleTime
                    End If

                    ' This is the m3 per second, but need to get CycleTime ORE per second based on it's volume
                    OrePerSecond = Orem3PerSecond / TempOre.OreVolume

                Else ' Ice
                    ' How much can fit in cargo?
                    IceBlocksPerLoad = CInt(Math.Floor(CDbl(txtMineHaulerM3.Text) / TempOre.OreVolume))

                    ' How many full cycles to fill the cargo?
                    FillCycles = CInt(Math.Ceiling(IceBlocksPerLoad / ShipMiningYield))

                    ' Add on the round trip time and recalculate cycle time
                    CycleTime = ((FillCycles * BaseCycleTime) + RTTimetoStationSeconds) / FillCycles

                    ' Recalculate with new cycle time
                    IceCylesPerHour = CInt(Math.Floor(3600 / CycleTime))

                    ' Total ice blocks per hour
                    IceBlocksPerHour = CInt(IceCylesPerHour * ShipMiningYield)
                End If
            End If

            If IceMining Then
                TempOre.UnitsPerHour = IceBlocksPerHour
            Else
                TempOre.UnitsPerHour = OrePerSecond * 3600
            End If

            ' Only refine ore or ice
            If chkMineRefinedOre.Checked And Not GasMining Then
                ' Refine total Ore we mined for an hour and save the total isk/hour
                RefinedMaterials = RefiningStation.RefineOre(TempOre.OreID, GetOreProcessingSkill(TempOre.OreName), TempOre.UnitsPerHour, _
                                                             chkMineIncludeTaxes.Checked, chkMineIncludeBrokerFees.Checked, RefineryYield)

                TempOre.RefineYield = RefineryYield

                TempOre.IPH = RefinedMaterials.GetTotalMaterialsCost - GetJumpCosts(RefinedMaterials, TempOre, TempOre.UnitsPerHour)
                If chkMineRorqDeployedMode.Checked And CInt(cmbMineIndustReconfig.Text) <> 0 Then
                    ' Add (subtract from total isk) the heavy water cost
                    TempOre.IPH = TempOre.IPH - HeavyWaterCost
                End If

                ' Calculate the unit price by refining one batch
                RefinedMaterials = RefiningStation.RefineOre(TempOre.OreID, GetOreProcessingSkill(TempOre.OreName), TempOre.UnitsToRefine, _
                                                             chkMineIncludeTaxes.Checked, chkMineIncludeBrokerFees.Checked, RefineryYield)
                TempOre.OreUnitPrice = RefinedMaterials.GetTotalMaterialsCost / TempOre.UnitsToRefine
                TempOre.RefineType = "Refined"
                OreList.Add(TempOre)

            End If

            If chkMineCompressedOre.Checked And Not GasMining Then
                ' First, get the unit price and volume for the compressed ore
                SQL = "SELECT PRICE FROM ITEM_PRICES WHERE ITEM_NAME LIKE 'Compressed " & TempOre.OreName & "'"
                DBCommand = New SQLiteCommand(SQL, DB)
                readerOre = DBCommand.ExecuteReader

                If readerOre.Read() Then
                    TempOre.OreUnitPrice = readerOre.GetDouble(0)
                    ' Reset the units mined
                    Dim SavedUnits As Double = TempOre.UnitsPerHour
                    If Not IceMining Then
                        ' All ores are 100 to 1 compressed block, ice is 1 to 1
                        TempOre.UnitsPerHour = TempOre.UnitsPerHour / 100
                    End If

                    ' Units we mined, times unit price is IPH (minus Jump fuel costs)
                    TempOre.IPH = (TempOre.UnitsPerHour * TempOre.OreUnitPrice) - GetJumpCosts(Nothing, TempOre, SavedUnits) ' Treat the compression for jump costs individually, so use original value
                    TempOre.RefineYield = 0
                    TempOre.RefineType = "Compressed"
                    OreList.Add(TempOre)
                    ' Reset the units if we do unrefined
                    TempOre.UnitsPerHour = SavedUnits
                End If

                readerOre.Close()

            End If

            If chkMineUnrefinedOre.Checked Or GasMining Then ' Just use the Ore prices since we are selling it straight
                ' First, get the unit price for the ore
                SQL = "SELECT PRICE FROM ITEM_PRICES WHERE ITEM_NAME = '" & TempOre.OreName & "'"
                DBCommand = New SQLiteCommand(SQL, DB)
                readerOre = DBCommand.ExecuteReader

                If readerOre.Read() Then
                    TempOre.OreUnitPrice = readerOre.GetDouble(0)
                    ' Units we mined, times unit price is IPH (minus Jump fuel costs)
                    TempOre.IPH = (TempOre.UnitsPerHour * TempOre.OreUnitPrice) - GetJumpCosts(Nothing, TempOre, TempOre.UnitsPerHour)

                    TempOre.RefineYield = 0
                    TempOre.RefineType = "Unrefined"
                    OreList.Add(TempOre)
                End If

                readerOre.Close()

            End If

        End While

        ' Sort the ore List by the iph
        OreList.Sort(New MiningOreIPHComparer)

        lstMineGrid.Items.Clear()

        ' Update column widths based on type - Ice, don't show Crystal, Gas, don't show Refine or Crystal
        Select Case cmbMineOreType.Text
            Case "Ore"
                lstMineGrid.Columns(1).Width = MineOreNameColumnWidth
                lstMineGrid.Columns(4).Width = MineRefineYieldColumnWidth
                lstMineGrid.Columns(5).Width = MineCrystalColumnWidth
            Case "Ice"
                lstMineGrid.Columns(1).Width = MineOreNameColumnWidth + MineCrystalColumnWidth
                lstMineGrid.Columns(4).Width = MineRefineYieldColumnWidth
                lstMineGrid.Columns(5).Width = 0 ' Hide
            Case "Gas"
                lstMineGrid.Columns(1).Width = MineOreNameColumnWidth + MineCrystalColumnWidth + MineRefineYieldColumnWidth
                lstMineGrid.Columns(4).Width = 0
                lstMineGrid.Columns(5).Width = 0 ' Hide
        End Select

        ' Determine multiplier - assume all additional mining ships have the same yield and other costs
        Dim MinerMultiplier As Integer = CInt(txtMineNumberMiners.Text)

        ' Finally load the list
        lstMineGrid.BeginUpdate()
        For i = 0 To OreList.Count - 1
            ' Make sure we want to add Mercoxit
            If Not OreList(i).OreName.Contains("Mercoxit") Or (OreList(i).OreName.Contains("Mercoxit") And cmbMineMiningLaser.Text.Contains("Deep Core")) Then
                lstOreRow = lstMineGrid.Items.Add(CStr(OreList(i).OreID))
                'The remaining columns are subitems  
                lstOreRow.SubItems.Add(OreList(i).OreName)
                lstOreRow.SubItems.Add(OreList(i).RefineType)
                lstOreRow.SubItems.Add(FormatNumber(OreList(i).OreUnitPrice, 2))
                If OreList(i).RefineYield = 0 Then
                    lstOreRow.SubItems.Add("-")
                Else
                    lstOreRow.SubItems.Add(FormatPercent(OreList(i).RefineYield, 3))
                End If
                lstOreRow.SubItems.Add(OreList(i).CrystalType)
                ' Modify all three by mining multiplier
                lstOreRow.SubItems.Add(FormatNumber(OreList(i).OreUnitsPerCycle * MinerMultiplier, 2))
                lstOreRow.SubItems.Add(FormatNumber(Math.Round(OreList(i).UnitsPerHour * MinerMultiplier), 0))
                lstOreRow.SubItems.Add(FormatNumber(OreList(i).IPH * MinerMultiplier, 2))
            End If
        Next

        lstMineGrid.EndUpdate()

        ' Last thing, calculate the mining range of the mining lasers selected
        lblMineRange.Text = FormatNumber(CalculateMiningRange(GetAttribute("Optimal Range", cmbMineMiningLaser.Text)) / 1000, 2) & " km"

        i = 0
        Me.Cursor = Cursors.Default

    End Sub

    ' Checks all the data entered
    Private Function CheckMiningEntryData() As Boolean

        ' Check the location
        If chkMineIncludeHighSec.Checked = False And chkMineIncludeLowSec.Checked = False And chkMineIncludeNullSec.Checked = False Then
            ' Can't query any ore
            MsgBox("You must select an Ore Location", vbExclamation, Application.ProductName)
            Return False
        End If

        ' Check the Space types
        If chkMineAmarr.Checked = False And chkMineCaldari.Checked = False And chkMineGallente.Checked = False And chkMineMinmatar.Checked = False And chkMineWH.Checked = False Then
            ' Can't query any ore
            MsgBox("You must select an Ore Space", vbExclamation, Application.ProductName)
            Return False
        End If

        If chkMineWH.Checked = True And chkMineWH.Enabled = True And (chkMineC1.Checked = False And chkMineC2.Checked = False And chkMineC3.Checked = False And chkMineC4.Checked = False And chkMineC5.Checked = False And chkMineC6.Checked = False) Then
            ' Can't query any ore
            MsgBox("You must select a Wormhole Class", vbExclamation, Application.ProductName)
            Return False
        End If

        ' Check the values in the hauler calculations. They can't be greater than 30 minutes
        If (CInt(txtMineRTMin.Text) * 60) + CInt(txtMineRTSec.Text) > 1800 Then
            ' Can't query any ore
            MsgBox("Please select a smaller Round Trip Time for returning to station", vbExclamation, Application.ProductName)
            txtMineRTMin.Focus()
            Return False
        End If

        ' Check jump costs
        If chkMineIncludeJumpCosts.Checked = True Then
            If Not IsNumeric(txtMineTotalJumpFuel.Text) Or Trim(txtMineTotalJumpFuel.Text) = "" Then
                MsgBox("Invalid Jump Fuel Value", vbExclamation, Application.ProductName)
                txtMineTotalJumpFuel.Focus()
                Return False
            End If

            If Not IsNumeric(txtMineTotalJumpM3.Text) Or Trim(txtMineTotalJumpM3.Text) = "" Then
                MsgBox("Invalid Jump m3 Value", vbExclamation, Application.ProductName)
                txtMineTotalJumpM3.Focus()
                Return False
            End If

            If CDbl(txtMineTotalJumpM3.Text) <= 0 Then
                MsgBox("Jump m3 Value must be greater than zero", vbExclamation, Application.ProductName)
                txtMineTotalJumpM3.Focus()
                Return False
            End If
        End If

        ' Number of miners
        If Trim(txtMineNumberMiners.Text) = "" Or Trim(txtMineNumberMiners.Text) = "0" Then
            MsgBox("Invalid number of miners", vbExclamation, Application.ProductName)
            txtMineNumberMiners.Focus()
            Return False
        End If

        If Val(txtMineNumberMiners.Text) > 100 Then
            MsgBox("You can't select more than 100 miners", vbExclamation, Application.ProductName)
            txtMineNumberMiners.Focus()
            Return False
        End If

        ' Make sure a refine type is selected for ice and ore
        If chkMineRefinedOre.Checked = False And chkMineCompressedOre.Checked = False And chkMineUnrefinedOre.Checked = False And cmbMineOreType.Text <> "Gas" Then
            ' Can't calculate nothing
            MsgBox("You must select one ore type to calculate.", vbExclamation, Application.ProductName)
            chkMineRefinedOre.Focus()
            Return False
        End If

        ' Check the refine values
        If CDbl(txtMineRefineStanding.Text) > 10 Then
            ' Can't query any ore
            MsgBox("Please set a smaller station standing value", vbExclamation, Application.ProductName)
            txtMineRefineStanding.Focus()
            Return False
        End If

        If Not IsNumeric(cmbMineRefineStationTax.Text.Replace("%", "")) Then
            ' Can't query any ore
            MsgBox("Invalid station tax rate value", vbExclamation, Application.ProductName)
            cmbMineRefineStationTax.Focus()
            Return False
        End If

        ' Mining drones
        If Trim(txtMineMiningDroneM3.Text) = "" Then
            ' Can't query any ore
            MsgBox("Invalid mining drone m3/hour amount", vbExclamation, Application.ProductName)
            txtMineMiningDroneM3.Focus()
            Return False
        End If

        If CDbl(txtMineMiningDroneM3.Text) < 0 Then
            ' Can't query any ore
            MsgBox("Invalid mining drone m3/hour amount", vbExclamation, Application.ProductName)
            txtMineMiningDroneM3.Focus()
            Return False
        End If

        ' Check that there is a mining laser chosen
        If CStr(cmbMineMiningLaser.Text) = "" Then
            MsgBox("No mining laser selected. Check ship type and skills selected.", vbExclamation, Application.ProductName)
            cmbMineMiningLaser.Focus()
            Return False
        End If

        Return True

    End Function

    ' Returns the Mining bonus multiplier for crystals
    Private Function GetMiningCrystalBonus(ByVal OreName As String, ByRef CrystalType As String) As Double
        Dim BonusValue As Double = 1
        Dim TempCrystalType As String = ""
        Dim OreProcessingSkill As Integer

        OreProcessingSkill = GetOreProcessingSkill(OreName)

        ' See if they have T1 or T2 - and use T1 if they select T2 but can't use them
        If (OreProcessingSkill >= 3 And rbtnMineT1Crystals.Checked And rbtnMineT1Crystals.Enabled = True) _
            Or (rbtnMineT2Crystals.Checked And OreProcessingSkill = 3 And rbtnMineT2Crystals.Enabled = True) Then
            ' Use T1 bonus
            If OreName.Contains("Mercoxit") Then
                BonusValue = 1.25
            Else
                BonusValue = 1.625
            End If
            TempCrystalType = "T1"
        ElseIf OreProcessingSkill >= 4 And rbtnMineT2Crystals.Checked And rbtnMineT2Crystals.Enabled = True Then
            ' Use T2 bonus
            If OreName.Contains("Mercoxit") Then
                BonusValue = 1.375
            Else
                BonusValue = 1.75
            End If
            TempCrystalType = "T2"
        End If

        '' Finally see if they are using a skiff
        '' Skiff => Exhumers Skill Bonus:  60% bonus to Mercoxit Mining Crystal yield multiplier per level
        'If cmbMineShipType.Text = Skiff And OreName.Contains("Mercoxit") Then
        '    ' Just multiply the bonus by the exhumers skill (plus 1 for initial bonus)
        '    BonusValue = BonusValue * ((0.6 * CInt(cmbMineExhumers.Text)) + 1)
        'End If

        ' Add rig value for mercoxit
        If rbtnMineMercoxitRig.Checked And OreName.Contains("Mercoxit") Then
            BonusValue = BonusValue + 0.16
        End If

        If TempCrystalType <> "" Then
            CrystalType = TempCrystalType
        Else
            CrystalType = None
        End If

        Return BonusValue

    End Function

    ' Loads the cargo m3 for hauler if selected
    Private Sub RefreshHaulerM3()
        ' If the hauler is not checked and they don't have a m3 set, load the M3 of the ship selected
        'If UserMiningTabSettings.Haulerm3 = DefaultSettings.DefaultMiningHaulerm3 Then
        ' Load the ore hold of the ship selected
        Select Case cmbMineShipType.Text
            Case Hulk, Skiff, Covetor, Procurer, Venture, Prospect
                txtMineHaulerM3.Text = FormatNumber(GetAttribute("specialOreHoldCapacity", cmbMineShipType.Text), 2)
            Case Mackinaw, Retriever
                txtMineHaulerM3.Text = FormatNumber(GetAttribute("specialOreHoldCapacity", cmbMineShipType.Text) * (1 + (CInt(cmbMineBaseShipSkill.Text) * 0.05)), 2)
            Case Else
                txtMineHaulerM3.Text = "0.00"
        End Select
        ' End If
    End Sub

    ' Calculates the total mining amount per cycle for the ship set up (not including crystals)
    Private Function CalculateMiningAmount() As Double
        Dim Mining As Double
        Dim Astrogeology As Double
        Dim BaseShipBonus As Double
        Dim Exhumers As Double
        Dim MiningForeman As Double
        Dim MiningUpgrades As Double
        Dim HighwallImplant As Double
        Dim MichiImplant As Double
        Dim RoleBonus As Double

        Dim m3YieldperCycle As Double

        If cmbMineOreType.Text = "Ore" Then

            ' Yield stacks
            If cmbMineSkill.Enabled = True Then
                Mining = CInt(cmbMineSkill.Text)
            Else
                Mining = 0
            End If

            If cmbMineAstrogeology.Enabled = True Then
                Astrogeology = CInt(cmbMineAstrogeology.Text)
            Else
                Astrogeology = 0
            End If

            If chkMineMichiImplant.Enabled = True And chkMineMichiImplant.Checked = True Then
                MichiImplant = GetAttribute(MiningAmountBonus, chkMineMichiImplant.Text)
            Else
                MichiImplant = 0
            End If

            ' Look up each based on bonus
            If cmbMineMiningUpgrade.Enabled = True And cmbMineMiningUpgrade.Text <> None Then
                ' Replace the percent if it's in the string so we can take the 9 or 10% bonus easier
                Dim TempUpgradeText As String = cmbMineMiningUpgrade.Text.Replace("%", "")
                MiningUpgrades = CInt(TempUpgradeText.Substring(0, 2))
            Else
                MiningUpgrades = 0
            End If

            If cmbMineImplant.Text <> None Then
                'Inherent Implants 'Highwall' Mining MX-1001
                HighwallImplant = GetAttribute(MiningAmountBonus, "Inherent Implants 'Highwall' Mining " & cmbMineImplant.Text.Substring(11))
            Else
                HighwallImplant = 0
            End If

            ' Normalize Default role
            RoleBonus = 1

            ' Yield
            If cmbMineShipType.Enabled = True Then
                ' Can't look up the bonuses easily
                Select Case cmbMineShipType.Text
                    Case Procurer, Skiff
                        ' Role Bonus 150%
                        RoleBonus = 2.5
                    Case Retriever, Mackinaw
                        ' Role bonus 25% 
                        RoleBonus = 1.25
                    Case Venture, Prospect
                        ' 5% per level plus 100% role bonus
                        BaseShipBonus = 0.05 * CInt(cmbMineBaseShipSkill.Text)
                        RoleBonus = 2
                    Case Else
                        BaseShipBonus = 0
                End Select
            Else
                BaseShipBonus = 0
            End If

            If cmbMineExhumers.Enabled = True Then
                Select Case cmbMineShipType.Text
                    Case Prospect
                        ' 5% per level plus for the expedition frigate skill (we'll use exhumers combo)
                        Exhumers = 0.05 * CInt(cmbMineExhumers.Text)
                    Case Else
                        Exhumers = 0
                End Select
            Else
                Exhumers = 0
            End If

            ' Finally check mining foreman
            If chkMineUseFleetBooster.Checked = True Then
                If chkMineForemanMindlink.Enabled = True And chkMineForemanMindlink.Checked = True Then
                    ' They have mindlink implant, so replace with implant mining bonus
                    MiningForeman = GetAttribute(MiningAmountBonus, chkMineForemanMindlink.Text)
                ElseIf cmbMineMiningForeman.Enabled = True Then
                    ' Just use the level they have
                    MiningForeman = CInt(cmbMineMiningForeman.Text) * GetAttribute(MiningAmountBonus, lblMineMiningForeman.Text.Substring(0, Len(lblMineMiningForeman.Text) - 1))
                Else
                    MiningForeman = 1
                End If
            End If

            ' Get base yield and multiply by number of lasers
            m3YieldperCycle = GetAttribute("miningAmount", cmbMineMiningLaser.Text) * CInt(cmbMineNumLasers.Text)
            ' Add skills
            m3YieldperCycle = m3YieldperCycle * (1 + ((GetAttribute(MiningAmountBonus, "Mining") * Mining) / 100))
            m3YieldperCycle = m3YieldperCycle * (1 + ((GetAttribute(MiningAmountBonus, "Astrogeology") * Astrogeology) / 100))
            m3YieldperCycle = m3YieldperCycle * (1 + (MichiImplant / 100))
            m3YieldperCycle = m3YieldperCycle * (1 + (HighwallImplant / 100))
            m3YieldperCycle = m3YieldperCycle * ((1 + (MiningUpgrades / 100)) ^ CInt(cmbMineNumMiningUpgrades.Text)) ' Diminishing returns
            m3YieldperCycle = m3YieldperCycle * (1 + BaseShipBonus)
            m3YieldperCycle = m3YieldperCycle * (1 + Exhumers)
            m3YieldperCycle = m3YieldperCycle * (1 + (MiningForeman / 100))
            m3YieldperCycle = m3YieldperCycle * RoleBonus

            Return m3YieldperCycle

        ElseIf cmbMineOreType.Text = "Ice" Then
            ' One block per cycle
            Return (1 * CInt(cmbMineNumLasers.Text))

        ElseIf cmbMineOreType.Text = "Gas" Then
            ' Get base yield and multiply by number of lasers
            m3YieldperCycle = GetAttribute("miningAmount", cmbMineMiningLaser.Text) * CInt(cmbMineNumLasers.Text)

            ' Role(Bonus)
            ' 100% bonus to mining yield and gas cloud harvesting
            Select Case cmbMineShipType.Text
                Case Prospect, Venture
                    m3YieldperCycle = m3YieldperCycle * 2
            End Select

            Return m3YieldperCycle
        End If

        Return 0

    End Function

    ' Calculates the range for the miner selected and boosts applied
    Private Function CalculateMiningRange(BaseRange As Double) As Double
        Dim GangLinkBonus As Double
        Dim MindLinkBonus As Double
        Dim WarLinkBonus As Double

        Dim CalculatedRange As Double

        ' Range links changed in Odyssey 1.1 - 9/3/2013
        ' Mining Director skill = 20% bonus to effectiveness of Mining Foreman link modules per level
        ' Mining Foreman Link T1 - Increases range by 13.6% old: 4.5%
        ' Mining Foreman Link T2 - Increases range by 17% old: 5.625%
        ' Mining Foreman Mindlink (implant)	Increases link effectiveness by 25% 
        ' Warfare Link Specialist 	Increases link effectiveness by 10%/level 

        If chkMineUseFleetBooster.Checked Then

            WarLinkBonus = 1 + (CInt(cmbMineWarfareLinkSpec.Text) * 0.1)

            If chkMineForemanMindlink.Checked = True And chkMineForemanMindlink.Enabled = True Then
                MindLinkBonus = 1.25
            Else
                MindLinkBonus = 1
            End If

            ' Mining Foreman Link bonus
            If cmbMineMiningDirector.Enabled = True And chkMineForemanLaserRangeBoost.Enabled Then
                If chkMineForemanLaserRangeBoost.Checked And chkMineForemanLaserRangeBoost.CheckState = CheckState.Indeterminate Then
                    ' Checked T2
                    GangLinkBonus = 0.17 * (1 + (CInt(cmbMineMiningDirector.Text) * 0.2)) * MindLinkBonus * WarLinkBonus
                ElseIf chkMineForemanLaserRangeBoost.Checked Then
                    ' Checked T1
                    GangLinkBonus = 0.136 * (1 + (CInt(cmbMineMiningDirector.Text) * 0.2)) * MindLinkBonus * WarLinkBonus
                Else
                    GangLinkBonus = 0
                End If
            Else
                GangLinkBonus = 0
            End If

            ' Ship boost to ganglinks
            If cmbMineBoosterShip.Text = Orca Then
                GangLinkBonus = GangLinkBonus * (1 + (0.03 * CInt(cmbMineBoosterShipSkill.Text)))
            ElseIf cmbMineBoosterShip.Text = Rorqual Then
                ' Rorq bonus applies only if deployed with core on
                If chkMineRorqDeployedMode.Checked And chkMineRorqDeployedMode.Enabled Then
                    GangLinkBonus = GangLinkBonus * (1 + (0.1 * CInt(cmbMineBoosterShipSkill.Text)))
                End If
            End If

            CalculatedRange = BaseRange * (1 + GangLinkBonus)

        Else
            CalculatedRange = BaseRange
        End If

        ' Finally, if we have a hulk or covetor, then add the range bonus
        Select Case cmbMineShipType.Text
            Case Covetor, Hulk
                CalculatedRange = CalculatedRange * (1 + (0.05 * CInt(cmbMineBaseShipSkill.Text)))
        End Select

        Return CalculatedRange

    End Function

    ' Returns the cycle time of the mining laser cycle time sent
    Private Function CalculateMiningCycleTime(ByVal BaseCycleTime As Double) As Double
        Dim GangLinkBonus As Double
        Dim MindLinkBonus As Double
        Dim WarLinkBonus As Double

        Dim TempCycleTime As Double

        ' Range links changed in Odyssey 1.1 - 9/3/2013
        ' Mining Director skill = 20% bonus to effectiveness of Mining Foreman link modules per level after level 2 is trained.
        ' Mining Foreman Link T1 - Decreases mining lasers/ gas harvester and ice harvester duration by 6%
        ' Mining Foreman Link T2 - Decreases mining lasers/ gas harvester and ice harvester duration by 7.5%
        ' Mining Foreman Mindlink (implant)	Increases link effectiveness by 25% 
        ' Warfare Link Specialist 	Increases link effectiveness by 10%/level 

        If chkMineUseFleetBooster.Checked Then
            If chkMineForemanMindlink.Checked = True And chkMineForemanMindlink.Enabled = True Then
                MindLinkBonus = 1.25 ' Changed to 25% with Odyssey 1.1
            Else
                MindLinkBonus = 1
            End If

            WarLinkBonus = 1 + (CInt(cmbMineWarfareLinkSpec.Text) * 0.1)

            ' Mining Foreman Link bonus
            If cmbMineMiningDirector.Enabled = True And chkMineForemanLaserRangeBoost.Enabled Then
                If chkMineForemanLaserOpBoost.Checked And chkMineForemanLaserOpBoost.CheckState = CheckState.Indeterminate Then
                    ' Checked T2
                    GangLinkBonus = 0.075 * (1 + (CInt(cmbMineMiningDirector.Text) * 0.2)) * MindLinkBonus * WarLinkBonus
                ElseIf chkMineForemanLaserOpBoost.Checked Then
                    ' Checked T1
                    GangLinkBonus = 0.06 * (1 + (CInt(cmbMineMiningDirector.Text) * 0.2)) * MindLinkBonus * WarLinkBonus
                Else
                    GangLinkBonus = 0
                End If
            Else
                GangLinkBonus = 0
            End If

            ' Ship type - Orca: 3% bonus to effectiveness of mining foreman gang links per level
            ' Ship type - Rorq: 10% bonus to effectiveness of mining foreman gang links per level when in deployed mode

            ' Ship boost to ganglinks
            If cmbMineBoosterShip.Text = Orca Then
                GangLinkBonus = GangLinkBonus * (1 + (0.03 * CInt(cmbMineBoosterShipSkill.Text)))
            ElseIf cmbMineBoosterShip.Text = Rorqual Then
                ' Rorq bonus applies only if deployed with core on
                If chkMineRorqDeployedMode.Checked And chkMineRorqDeployedMode.Enabled Then
                    GangLinkBonus = GangLinkBonus * (1 + (0.1 * CInt(cmbMineBoosterShipSkill.Text)))
                End If
            End If
        Else
            GangLinkBonus = 0
        End If

        ' Get the adjusted time with ganglinks etc
        TempCycleTime = BaseCycleTime * (1 - GangLinkBonus)

        If cmbMineOreType.Text = "Ore" Then ' Changed with Kronos

            Select Case cmbMineShipType.Text
                Case Procurer
                    ' 2% reduction per level
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.02))
                Case Retriever
                    ' 2% reduction per level
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.02))
                Case Covetor
                    ' 4% reduction
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.04))
                Case Skiff
                    ' 2% reduction per level for barges and 2% reduction for exhumers
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.02)) * (1 - (CDec(cmbMineExhumers.Text) * 0.02))
                Case Mackinaw
                    ' 2% reduction per level for barges and 2% reduction for exhumers
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.02)) * (1 - (CDec(cmbMineExhumers.Text) * 0.02))
                Case Hulk
                    ' 4% reduction for mining barges and 3% reduction for exhumers
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.04)) * (1 - (CDec(cmbMineExhumers.Text) * 0.03))
            End Select

        ElseIf cmbMineOreType.Text = "Ice" Then
            ' For Ice, check for duration reduction bonus, implant, and upgrades
            Select Case cmbMineShipType.Text
                Case Procurer
                    ' 2% reduction per level
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.02))
                    ' Role: 60% reduction
                    TempCycleTime = TempCycleTime * (1 - 0.6)
                Case Retriever
                    ' 2% reduction per level
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.02))
                    ' Role: 20% reduction
                    TempCycleTime = TempCycleTime * (1 - 0.2)
                Case Covetor
                    ' 4% reduction
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.04))
                Case Skiff
                    ' 2% reduction per level for barges and 2% reduction for exhumers
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.02)) * (1 - (CDec(cmbMineExhumers.Text) * 0.02))
                    ' Role: 60% reduction
                    TempCycleTime = TempCycleTime * (1 - 0.6)
                Case Mackinaw
                    ' 2% reduction per level for barges and 2% reduction for exhumers
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.02)) * (1 - (CDec(cmbMineExhumers.Text) * 0.02))
                    ' Role: 20% reduction
                    TempCycleTime = TempCycleTime * (1 - 0.2)
                Case Hulk
                    ' 4% reduction for mining barges and 3% reduction for exhumers
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.04)) * (1 - (CDec(cmbMineExhumers.Text) * 0.03))
            End Select

            If cmbMineGasIceHarvesting.Enabled Then
                ' Apply the ice harvesting bonus
                TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineGasIceHarvesting.Text) * 0.05))
            End If

            ' Apply the upgrades
            If cmbMineMiningUpgrade.Enabled = True And cmbMineMiningUpgrade.Text <> None Then
                ' Replace the percent if it's in the string so we can take the 9 or 10% bonus easier
                Dim TempUpgradeText As String = cmbMineMiningUpgrade.Text.Replace("%", "")
                TempCycleTime = TempCycleTime * ((1 - (CDec(CDbl(TempUpgradeText.Substring(0, 2)) / 100))) ^ CInt(cmbMineNumMiningUpgrades.Text)) ' Diminishing returns
            End If

            ' Finally include the implant value
            If cmbMineImplant.Text <> None Then
                'Inherent Implants 'Yeti' Ice Harvesting IH-1001
                TempCycleTime = TempCycleTime * (1 - (-1 * GetAttribute("iceHarvestCycleBonus", "Inherent Implants 'Yeti' Ice Harvesting " & cmbMineImplant.Text.Substring(7)) / 100))
            End If

            ' Apply the rig bonus if selected
            If rbtnMineIceRig.Checked = True Then
                ' 12% cycle reduction
                TempCycleTime = TempCycleTime * (1 - 0.12)
            End If

        ElseIf cmbMineOreType.Text = "Gas" Then
            ' Gas, look for venture ship and implant

            Select Case cmbMineShipType.Text
                Case Prospect, Venture
                    ' 5% reduction to gas cloud harvesting duration per level
                    TempCycleTime = TempCycleTime * (1 - (CDec(cmbMineBaseShipSkill.Text) * 0.05))
            End Select

            ' Finally include the implant value
            If cmbMineImplant.Text <> None Then
                'Eifyr and Co. 'Alchemist' Gas Harvesting GH-801
                TempCycleTime = TempCycleTime * (1 - (-1 * GetAttribute("durationBonus", "Eifyr and Co. 'Alchemist' Gas Harvesting " & cmbMineImplant.Text.Substring(12)) / 100))
            End If

        End If

        Return TempCycleTime

    End Function

    ' Returns the ore processing skill level on the screen for the ore name sent
    Private Function GetOreProcessingSkill(ByVal OreName As String) As Integer
        Dim i As Integer
        Dim CurrentProcessingLabel As String

        If cmbMineOreType.Text = "Ice" Then
            OreName = "Ice Processing"
        End If

        If OreName.Contains("Ochre") Then
            OreName = "Dark Ochre"
        End If

        For i = 1 To MineProcessingCombos.Count - 1
            CurrentProcessingLabel = MineProcessingLabels(i).Text.Substring(0, InStr(MineProcessingLabels(i).Text, " ") - 1)

            ' Special processing for Dark Ochre
            If CurrentProcessingLabel = "Dark" Then
                CurrentProcessingLabel = "Dark Ochre"
            End If

            If MineProcessingCombos(i).Enabled = True And CBool(InStr(OreName, CurrentProcessingLabel)) Then
                ' Found it, return value
                Return CInt(MineProcessingCombos(i).Text)
            End If
        Next

        Return 0

    End Function

    ' Gets the amount per hour that we need to adjust the isk/hour for jump costs
    Private Function GetJumpCosts(RefinedMats As Materials, Ore As MiningOre, OreAmount As Double) As Double
        Dim SQL As String
        Dim readerORE As SQLiteDataReader
        Dim ReturnValue As Double
        Dim IskperM3 As Double ' How much each m3 in the jump ship costs based on jump fuel

        ' Ore stuff
        Dim CompressedBlocks As Double
        Dim CompressedBlockVolume As Double

        If chkMineIncludeJumpCosts.Checked = True Then
            IskperM3 = CDbl(txtMineTotalJumpFuel.Text) / CDbl(txtMineTotalJumpM3.Text)

            If rbtnMineJumpMinerals.Checked = True Then
                ' Take the volume of minerals for the hour, then multiple by the isk per m3 for total cost
                ReturnValue = IskperM3 * RefinedMats.GetTotalVolume
            Else
                ' Compressed ORE
                ' Get quanity to build 1 compressed block, divide into ore amount (allow partial). 
                ' Multiply by Compressed block m3, then multiply by iskper m3 to get cost
                SQL = "SELECT QUANTITY FROM ALL_BLUEPRINT_MATERIALS WHERE MATERIAL ='" & Ore.OreName & "' AND BLUEPRINT_NAME = 'Compressed " & Ore.OreName & " Blueprint'"
                DBCommand = New SQLiteCommand(SQL, DB)
                readerORE = DBCommand.ExecuteReader

                If readerORE.Read Then
                    CompressedBlocks = OreAmount / CLng(readerORE.GetValue(0))
                Else
                    Return 0
                End If

                readerORE.Close()
                SQL = "SELECT volume FROM INVENTORY_TYPES WHERE typeName ='" & Ore.OreName & "'"
                DBCommand = New SQLiteCommand(SQL, DB)
                readerORE = DBCommand.ExecuteReader

                If readerORE.Read Then
                    CompressedBlockVolume = readerORE.GetDouble(0)
                Else
                    Return 0
                End If

                ' Final value to jump this ore
                Return CompressedBlocks * CompressedBlockVolume * IskperM3

            End If

            Return ReturnValue
        Else
            Return 0
        End If

    End Function

    ' Updates the booster section 
    Public Sub UpdateMiningBoosterObjects()

        ' Laser Op
        If chkMineForemanLaserOpBoost.Checked And chkMineForemanLaserOpBoost.CheckState = CheckState.Indeterminate Then ' Show T2
            chkMineForemanLaserOpBoost.Text = "Mining Foreman Link - Laser Optimization T2"
            chkMineForemanLaserOpBoost.ForeColor = Color.DarkOrange

            If System.IO.File.Exists(UserImagePath & "\4276_32.png") Then
                pictMineLaserOptmize.Image = Image.FromFile(UserImagePath & "\4276_32.png")
            Else
                pictMineLaserOptmize.Image = Nothing
            End If

            pictMineLaserOptmize.Update()

        Else
            chkMineForemanLaserOpBoost.Text = "Mining Foreman Link - Laser Optimization"
            chkMineForemanLaserOpBoost.ForeColor = Color.Black

            If System.IO.File.Exists(UserImagePath & "\22557_32.png") Then
                pictMineLaserOptmize.Image = Image.FromFile(UserImagePath & "\22557_32.png")
            Else
                pictMineLaserOptmize.Image = Nothing
            End If

            pictMineLaserOptmize.Update()
        End If

        ' Range 
        If chkMineForemanLaserRangeBoost.Checked And chkMineForemanLaserRangeBoost.CheckState = CheckState.Indeterminate Then ' Show T2
            chkMineForemanLaserRangeBoost.Text = "Mining Foreman Link - Mining Laser Field Enhancement T2"
            chkMineForemanLaserRangeBoost.ForeColor = Color.DarkOrange

            If System.IO.File.Exists(UserImagePath & "\4276_32.png") Then
                pictMineRangeLink.Image = Image.FromFile(UserImagePath & "\4276_32.png")
            Else
                pictMineRangeLink.Image = Nothing
            End If
        Else
            chkMineForemanLaserRangeBoost.Text = "Mining Foreman Link - Mining Laser Field Enhancement"
            chkMineForemanLaserRangeBoost.ForeColor = Color.Black

            If System.IO.File.Exists(UserImagePath & "\22557_32.png") Then
                pictMineRangeLink.Image = Image.FromFile(UserImagePath & "\22557_32.png")
            Else
                pictMineRangeLink.Image = Nothing
            End If

            pictMineRangeLink.Update()
        End If

    End Sub

    ' Calculates the cost for one hour of heavy water for boosting with a Rorqual 
    Private Function CalculateRorqDeployedCost(IndustrialReconfigSkill As Integer, CapIndustrialShipSkill As Integer) As Double
        Dim SQL As String
        Dim readerHW As SQLiteDataReader
        Dim HWUsage As Double = 1000 ' 1000 base use for core

        ' Users can set Industrial Reconfig to 0 - this is 0 cost or not calculating cost
        If IndustrialReconfigSkill = 0 Then
            Return 0
        End If

        ' Skill at the operation of industrial core modules.  
        ' 50-unit reduction in heavy water consumption amount for module activation per skill level.
        HWUsage = HWUsage - (IndustrialReconfigSkill * 50)

        ' Capital Industrial Ships skill bonuses:
        ' -5% reduction in fuel consumption for industrial cores per level
        HWUsage = HWUsage - (HWUsage * 0.05 * CapIndustrialShipSkill)

        ' Look up the cost for Heavy Water
        SQL = "SELECT PRICE FROM ITEM_PRICES WHERE ITEM_NAME = 'Heavy Water'"
        DBCommand = New SQLiteCommand(SQL, DB)
        readerHW = DBCommand.ExecuteReader

        If readerHW.Read Then
            ' Return cost for one hour (cycle is 5 minutes)
            Return HWUsage * readerHW.GetDouble(0) * 12
        Else
            Return 0
        End If

    End Function

    ' The Ore structure to display in our grid for mining
    Public Structure MiningOre
        Dim OreID As Long
        Dim OreName As String
        Dim OreUnitPrice As Double
        Dim RefineYield As Double
        Dim CrystalType As String
        Dim OreVolume As Double
        Dim IPH As Double
        Dim UnitsPerHour As Double
        Dim OreUnitsPerCycle As Double
        Dim UnitsToRefine As Integer
        Dim RefineType As String
    End Structure

    ' For sorting a list of Mining Ore
    Public Class MiningOreIPHComparer

        Implements System.Collections.Generic.IComparer(Of MiningOre)

        Public Function Compare(ByVal p1 As MiningOre, ByVal p2 As MiningOre) As Integer Implements IComparer(Of MiningOre).Compare
            ' swap p2 and p1 to do decending sort
            Return p2.IPH.CompareTo(p1.IPH)
        End Function

    End Class

#End Region

End Class